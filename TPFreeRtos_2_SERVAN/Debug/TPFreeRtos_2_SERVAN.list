
TPFreeRtos_2_SERVAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007904  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002b8  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d8c  08007d8c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08007d8c  08007d8c  00017d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d94  08007d94  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d98  08007d98  00017d98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08007d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000057ac  20000074  08007e10  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005820  08007e10  00025820  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018aa9  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b45  00000000  00000000  00038b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001468  00000000  00000000  0003c6d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fc0  00000000  00000000  0003db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029831  00000000  00000000  0003eb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f8f  00000000  00000000  00068331  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fac8f  00000000  00000000  000822c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005d90  00000000  00000000  0017cf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00182ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000074 	.word	0x20000074
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007abc 	.word	0x08007abc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000078 	.word	0x20000078
 800020c:	08007abc 	.word	0x08007abc

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005ac:	b480      	push	{r7}
 80005ae:	b085      	sub	sp, #20
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	60f8      	str	r0, [r7, #12]
 80005b4:	60b9      	str	r1, [r7, #8]
 80005b6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80005bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <vApplicationGetIdleTaskMemory+0x30>)
 80005c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80005ca:	bf00      	nop
 80005cc:	3714      	adds	r7, #20
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	20000094 	.word	0x20000094
 80005dc:	20000134 	.word	0x20000134

080005e0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80005e0:	b5b0      	push	{r4, r5, r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005e6:	4b0a      	ldr	r3, [pc, #40]	; (8000610 <MX_FREERTOS_Init+0x30>)
 80005e8:	1d3c      	adds	r4, r7, #4
 80005ea:	461d      	mov	r5, r3
 80005ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2100      	movs	r1, #0
 80005fc:	4618      	mov	r0, r3
 80005fe:	f004 f826 	bl	800464e <osThreadCreate>
 8000602:	4603      	mov	r3, r0
 8000604:	4a03      	ldr	r2, [pc, #12]	; (8000614 <MX_FREERTOS_Init+0x34>)
 8000606:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bdb0      	pop	{r4, r5, r7, pc}
 8000610:	08007ae0 	.word	0x08007ae0
 8000614:	20000090 	.word	0x20000090

08000618 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f004 f860 	bl	80046e6 <osDelay>
 8000626:	e7fb      	b.n	8000620 <StartDefaultTask+0x8>

08000628 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b08a      	sub	sp, #40	; 0x28
 800062c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800062e:	f107 0314 	add.w	r3, r7, #20
 8000632:	2200      	movs	r2, #0
 8000634:	601a      	str	r2, [r3, #0]
 8000636:	605a      	str	r2, [r3, #4]
 8000638:	609a      	str	r2, [r3, #8]
 800063a:	60da      	str	r2, [r3, #12]
 800063c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800063e:	4b23      	ldr	r3, [pc, #140]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a22      	ldr	r2, [pc, #136]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000644:	f043 0301 	orr.w	r3, r3, #1
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b20      	ldr	r3, [pc, #128]	; (80006cc <MX_GPIO_Init+0xa4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0301 	and.w	r3, r3, #1
 8000652:	613b      	str	r3, [r7, #16]
 8000654:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000656:	4b1d      	ldr	r3, [pc, #116]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065a:	4a1c      	ldr	r2, [pc, #112]	; (80006cc <MX_GPIO_Init+0xa4>)
 800065c:	f043 0302 	orr.w	r3, r3, #2
 8000660:	6313      	str	r3, [r2, #48]	; 0x30
 8000662:	4b1a      	ldr	r3, [pc, #104]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	60fb      	str	r3, [r7, #12]
 800066c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800066e:	4b17      	ldr	r3, [pc, #92]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a16      	ldr	r2, [pc, #88]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000674:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_GPIO_Init+0xa4>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a10      	ldr	r2, [pc, #64]	; (80006cc <MX_GPIO_Init+0xa4>)
 800068c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_GPIO_Init+0xa4>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800069e:	2200      	movs	r2, #0
 80006a0:	2102      	movs	r1, #2
 80006a2:	480b      	ldr	r0, [pc, #44]	; (80006d0 <MX_GPIO_Init+0xa8>)
 80006a4:	f001 f8e2 	bl	800186c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80006a8:	2302      	movs	r3, #2
 80006aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b0:	2300      	movs	r3, #0
 80006b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006b4:	2300      	movs	r3, #0
 80006b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80006b8:	f107 0314 	add.w	r3, r7, #20
 80006bc:	4619      	mov	r1, r3
 80006be:	4804      	ldr	r0, [pc, #16]	; (80006d0 <MX_GPIO_Init+0xa8>)
 80006c0:	f000 ff28 	bl	8001514 <HAL_GPIO_Init>

}
 80006c4:	bf00      	nop
 80006c6:	3728      	adds	r7, #40	; 0x28
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	40023800 	.word	0x40023800
 80006d0:	40022000 	.word	0x40022000

080006d4 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 80006dc:	1d39      	adds	r1, r7, #4
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	2201      	movs	r2, #1
 80006e4:	4803      	ldr	r0, [pc, #12]	; (80006f4 <__io_putchar+0x20>)
 80006e6:	f002 fd05 	bl	80030f4 <HAL_UART_Transmit>

	return ch;
 80006ea:	687b      	ldr	r3, [r7, #4]
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	200006dc 	.word	0x200006dc

080006f8 <fonction>:

int fonction(int argc, char ** argv)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	6039      	str	r1, [r7, #0]
	for (int i=0;i<argc;i++)
 8000702:	2300      	movs	r3, #0
 8000704:	60fb      	str	r3, [r7, #12]
 8000706:	e00c      	b.n	8000722 <fonction+0x2a>
	{
		printf("l'argument %d est : %s\r\n",i,argv[i]);
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	683a      	ldr	r2, [r7, #0]
 800070e:	4413      	add	r3, r2
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	461a      	mov	r2, r3
 8000714:	68f9      	ldr	r1, [r7, #12]
 8000716:	4807      	ldr	r0, [pc, #28]	; (8000734 <fonction+0x3c>)
 8000718:	f006 f8c0 	bl	800689c <iprintf>
	for (int i=0;i<argc;i++)
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	3301      	adds	r3, #1
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	429a      	cmp	r2, r3
 8000728:	dbee      	blt.n	8000708 <fonction+0x10>
	}

	return 0;
 800072a:	2300      	movs	r3, #0
}
 800072c:	4618      	mov	r0, r3
 800072e:	3710      	adds	r7, #16
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	08007afc 	.word	0x08007afc

08000738 <addition>:

int addition(int argc, char ** argv)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b084      	sub	sp, #16
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
 8000740:	6039      	str	r1, [r7, #0]
	if (argc ==3)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d115      	bne.n	8000774 <addition+0x3c>
	{
		int a,b;

		a=atoi(argv[1]);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	3304      	adds	r3, #4
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	4618      	mov	r0, r3
 8000750:	f005 ff64 	bl	800661c <atoi>
 8000754:	60f8      	str	r0, [r7, #12]
		b=atoi(argv[2]);
 8000756:	683b      	ldr	r3, [r7, #0]
 8000758:	3308      	adds	r3, #8
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4618      	mov	r0, r3
 800075e:	f005 ff5d 	bl	800661c <atoi>
 8000762:	60b8      	str	r0, [r7, #8]
		printf("La somme est %d\r\n",a+b);
 8000764:	68fa      	ldr	r2, [r7, #12]
 8000766:	68bb      	ldr	r3, [r7, #8]
 8000768:	4413      	add	r3, r2
 800076a:	4619      	mov	r1, r3
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <addition+0x4c>)
 800076e:	f006 f895 	bl	800689c <iprintf>
 8000772:	e002      	b.n	800077a <addition+0x42>
	}
	else
	{
		printf("Erreur, il n'y a pas le bon nombre d'argument\r\n");
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <addition+0x50>)
 8000776:	f006 f8f7 	bl	8006968 <puts>
	}
	return 0;
 800077a:	2300      	movs	r3, #0
}
 800077c:	4618      	mov	r0, r3
 800077e:	3710      	adds	r7, #16
 8000780:	46bd      	mov	sp, r7
 8000782:	bd80      	pop	{r7, pc}
 8000784:	08007b18 	.word	0x08007b18
 8000788:	08007b2c 	.word	0x08007b2c

0800078c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]

	if(huart -> Instance == USART1)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	4a04      	ldr	r2, [pc, #16]	; (80007ac <HAL_UART_RxCpltCallback+0x20>)
 800079a:	4293      	cmp	r3, r2
 800079c:	d101      	bne.n	80007a2 <HAL_UART_RxCpltCallback+0x16>
	{
		shell_uart_receive_irq_cb();
 800079e:	f000 fa93 	bl	8000cc8 <shell_uart_receive_irq_cb>
	}
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40011000 	.word	0x40011000

080007b0 <task_shell>:


void task_shell(void * unused){
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	shell_init();
 80007b8:	f000 f936 	bl	8000a28 <shell_init>
	shell_add('f', fonction, "Une fonction inutile");
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <task_shell+0x2c>)
 80007be:	4908      	ldr	r1, [pc, #32]	; (80007e0 <task_shell+0x30>)
 80007c0:	2066      	movs	r0, #102	; 0x66
 80007c2:	f000 f96b 	bl	8000a9c <shell_add>
	shell_add('a', addition, "Une fonction qui fait la somme");
 80007c6:	4a07      	ldr	r2, [pc, #28]	; (80007e4 <task_shell+0x34>)
 80007c8:	4907      	ldr	r1, [pc, #28]	; (80007e8 <task_shell+0x38>)
 80007ca:	2061      	movs	r0, #97	; 0x61
 80007cc:	f000 f966 	bl	8000a9c <shell_add>
	shell_run();
 80007d0:	f000 fa10 	bl	8000bf4 <shell_run>
	//shell run est une fct infinie on ne sort pas de la tache
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	08007b5c 	.word	0x08007b5c
 80007e0:	080006f9 	.word	0x080006f9
 80007e4:	08007b74 	.word	0x08007b74
 80007e8:	08000739 	.word	0x08000739

080007ec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80007f2:	f000 fcee 	bl	80011d2 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80007f6:	f000 f825 	bl	8000844 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80007fa:	f7ff ff15 	bl	8000628 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 80007fe:	f000 fc05 	bl	800100c <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	BaseType_t ret;
	TaskHandle_t h_task_shell =NULL;
 8000802:	2300      	movs	r3, #0
 8000804:	603b      	str	r3, [r7, #0]



	ret = xTaskCreate(task_shell, "Shell", TASK_SHELL_STACK_LENGHT, NULL, TASK_SHELL_PRIORITY, &h_task_shell);
 8000806:	463b      	mov	r3, r7
 8000808:	9301      	str	r3, [sp, #4]
 800080a:	2301      	movs	r3, #1
 800080c:	9300      	str	r3, [sp, #0]
 800080e:	2300      	movs	r3, #0
 8000810:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000814:	4908      	ldr	r1, [pc, #32]	; (8000838 <main+0x4c>)
 8000816:	4809      	ldr	r0, [pc, #36]	; (800083c <main+0x50>)
 8000818:	f004 fb85 	bl	8004f26 <xTaskCreate>
 800081c:	6078      	str	r0, [r7, #4]

	if (ret != pdPASS)
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d002      	beq.n	800082a <main+0x3e>
	{
		printf("impossible de créer la teche shell\r\n");
 8000824:	4806      	ldr	r0, [pc, #24]	; (8000840 <main+0x54>)
 8000826:	f006 f89f 	bl	8006968 <puts>
	}

	vTaskStartScheduler();
 800082a:	f004 fd01 	bl	8005230 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 800082e:	f7ff fed7 	bl	80005e0 <MX_FREERTOS_Init>

	/* Start scheduler */
	osKernelStart();
 8000832:	f003 ff05 	bl	8004640 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 8000836:	e7fe      	b.n	8000836 <main+0x4a>
 8000838:	08007b94 	.word	0x08007b94
 800083c:	080007b1 	.word	0x080007b1
 8000840:	08007b9c 	.word	0x08007b9c

08000844 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b094      	sub	sp, #80	; 0x50
 8000848:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800084a:	f107 0320 	add.w	r3, r7, #32
 800084e:	2230      	movs	r2, #48	; 0x30
 8000850:	2100      	movs	r1, #0
 8000852:	4618      	mov	r0, r3
 8000854:	f006 f99c 	bl	8006b90 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000858:	f107 030c 	add.w	r3, r7, #12
 800085c:	2200      	movs	r2, #0
 800085e:	601a      	str	r2, [r3, #0]
 8000860:	605a      	str	r2, [r3, #4]
 8000862:	609a      	str	r2, [r3, #8]
 8000864:	60da      	str	r2, [r3, #12]
 8000866:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000868:	4b2b      	ldr	r3, [pc, #172]	; (8000918 <SystemClock_Config+0xd4>)
 800086a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086c:	4a2a      	ldr	r2, [pc, #168]	; (8000918 <SystemClock_Config+0xd4>)
 800086e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000872:	6413      	str	r3, [r2, #64]	; 0x40
 8000874:	4b28      	ldr	r3, [pc, #160]	; (8000918 <SystemClock_Config+0xd4>)
 8000876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087c:	60bb      	str	r3, [r7, #8]
 800087e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000880:	4b26      	ldr	r3, [pc, #152]	; (800091c <SystemClock_Config+0xd8>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a25      	ldr	r2, [pc, #148]	; (800091c <SystemClock_Config+0xd8>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b23      	ldr	r3, [pc, #140]	; (800091c <SystemClock_Config+0xd8>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 80008ac:	2319      	movs	r3, #25
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 432;
 80008b0:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f83c 	bl	8001940 <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x8e>
	{
		Error_Handler();
 80008ce:	f000 f839 	bl	8000944 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008d2:	f000 ffe5 	bl	80018a0 <HAL_PWREx_EnableOverDrive>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d001      	beq.n	80008e0 <SystemClock_Config+0x9c>
	{
		Error_Handler();
 80008dc:	f000 f832 	bl	8000944 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008e0:	230f      	movs	r3, #15
 80008e2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008e4:	2302      	movs	r3, #2
 80008e6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008f0:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008f8:	f107 030c 	add.w	r3, r7, #12
 80008fc:	2107      	movs	r1, #7
 80008fe:	4618      	mov	r0, r3
 8000900:	f001 fac2 	bl	8001e88 <HAL_RCC_ClockConfig>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <SystemClock_Config+0xca>
	{
		Error_Handler();
 800090a:	f000 f81b 	bl	8000944 <Error_Handler>
	}
}
 800090e:	bf00      	nop
 8000910:	3750      	adds	r7, #80	; 0x50
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40007000 	.word	0x40007000

08000920 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	; (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000932:	f000 fc5b 	bl	80011ec <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40001000 	.word	0x40001000

08000944 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800094c:	e7fe      	b.n	800094c <Error_Handler+0x8>
	...

08000950 <uart_read>:
static int shell_func_list_size = 0;
static shell_func_t shell_func_list[SHELL_FUNC_LIST_MAX_SIZE];

static char print_buffer[BUFFER_SIZE];

static char uart_read() {
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
	char c;

	HAL_UART_Receive_IT(&UART_DEVICE, (uint8_t*)(&c), 1);
 8000956:	1dfb      	adds	r3, r7, #7
 8000958:	2201      	movs	r2, #1
 800095a:	4619      	mov	r1, r3
 800095c:	4807      	ldr	r0, [pc, #28]	; (800097c <uart_read+0x2c>)
 800095e:	f002 fc4c 	bl	80031fa <HAL_UART_Receive_IT>
	//on passe automatiquement à travers la fonction et on a pas encore le caractere, il faut bloquer la tache (on utilise un sémaphore)

	xSemaphoreTake(sem_uart_rx, portMAX_DELAY);
 8000962:	4b07      	ldr	r3, [pc, #28]	; (8000980 <uart_read+0x30>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f04f 31ff 	mov.w	r1, #4294967295
 800096a:	4618      	mov	r0, r3
 800096c:	f004 f8e4 	bl	8004b38 <xQueueSemaphoreTake>

	return c;
 8000970:	79fb      	ldrb	r3, [r7, #7]
}
 8000972:	4618      	mov	r0, r3
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200006dc 	.word	0x200006dc
 8000980:	20000334 	.word	0x20000334

08000984 <uart_write>:



static int uart_write(char * s, uint16_t size) {
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
 8000990:	887a      	ldrh	r2, [r7, #2]
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	4803      	ldr	r0, [pc, #12]	; (80009a8 <uart_write+0x24>)
 800099a:	f002 fbab 	bl	80030f4 <HAL_UART_Transmit>
	return size;
 800099e:	887b      	ldrh	r3, [r7, #2]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	200006dc 	.word	0x200006dc

080009ac <sh_help>:

static int sh_help(int argc, char ** argv) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	6078      	str	r0, [r7, #4]
 80009b4:	6039      	str	r1, [r7, #0]
	int i;
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80009b6:	2300      	movs	r3, #0
 80009b8:	60fb      	str	r3, [r7, #12]
 80009ba:	e022      	b.n	8000a02 <sh_help+0x56>
		int size;
		size = snprintf (print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell_func_list[i].c, shell_func_list[i].description);
 80009bc:	4916      	ldr	r1, [pc, #88]	; (8000a18 <sh_help+0x6c>)
 80009be:	68fa      	ldr	r2, [r7, #12]
 80009c0:	4613      	mov	r3, r2
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	4413      	add	r3, r2
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	440b      	add	r3, r1
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	4618      	mov	r0, r3
 80009ce:	4912      	ldr	r1, [pc, #72]	; (8000a18 <sh_help+0x6c>)
 80009d0:	68fa      	ldr	r2, [r7, #12]
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	440b      	add	r3, r1
 80009dc:	3308      	adds	r3, #8
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4603      	mov	r3, r0
 80009e4:	4a0d      	ldr	r2, [pc, #52]	; (8000a1c <sh_help+0x70>)
 80009e6:	2128      	movs	r1, #40	; 0x28
 80009e8:	480d      	ldr	r0, [pc, #52]	; (8000a20 <sh_help+0x74>)
 80009ea:	f005 ffc5 	bl	8006978 <sniprintf>
 80009ee:	60b8      	str	r0, [r7, #8]
		uart_write(print_buffer, size);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	b29b      	uxth	r3, r3
 80009f4:	4619      	mov	r1, r3
 80009f6:	480a      	ldr	r0, [pc, #40]	; (8000a20 <sh_help+0x74>)
 80009f8:	f7ff ffc4 	bl	8000984 <uart_write>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60fb      	str	r3, [r7, #12]
 8000a02:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <sh_help+0x78>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	68fa      	ldr	r2, [r7, #12]
 8000a08:	429a      	cmp	r2, r3
 8000a0a:	dbd7      	blt.n	80009bc <sh_help+0x10>
	}

	return 0;
 8000a0c:	2300      	movs	r3, #0
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3710      	adds	r7, #16
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000033c 	.word	0x2000033c
 8000a1c:	08007bc4 	.word	0x08007bc4
 8000a20:	2000063c 	.word	0x2000063c
 8000a24:	20000338 	.word	0x20000338

08000a28 <shell_init>:

int shell_init() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
	int size = 0;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	607b      	str	r3, [r7, #4]

	size = snprintf (print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
 8000a32:	4a14      	ldr	r2, [pc, #80]	; (8000a84 <shell_init+0x5c>)
 8000a34:	2128      	movs	r1, #40	; 0x28
 8000a36:	4814      	ldr	r0, [pc, #80]	; (8000a88 <shell_init+0x60>)
 8000a38:	f005 ff9e 	bl	8006978 <sniprintf>
 8000a3c:	6078      	str	r0, [r7, #4]
	uart_write(print_buffer, size);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	b29b      	uxth	r3, r3
 8000a42:	4619      	mov	r1, r3
 8000a44:	4810      	ldr	r0, [pc, #64]	; (8000a88 <shell_init+0x60>)
 8000a46:	f7ff ff9d 	bl	8000984 <uart_write>
	sem_uart_rx = xSemaphoreCreateBinary();
 8000a4a:	2203      	movs	r2, #3
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f003 ff7c 	bl	800494c <xQueueGenericCreate>
 8000a54:	4603      	mov	r3, r0
 8000a56:	4a0d      	ldr	r2, [pc, #52]	; (8000a8c <shell_init+0x64>)
 8000a58:	6013      	str	r3, [r2, #0]
	if (sem_uart_rx == NULL)
 8000a5a:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <shell_init+0x64>)
 8000a5c:	681b      	ldr	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d105      	bne.n	8000a6e <shell_init+0x46>
	{
		printf("Erreur shell sema\r\n");
 8000a62:	480b      	ldr	r0, [pc, #44]	; (8000a90 <shell_init+0x68>)
 8000a64:	f005 ff80 	bl	8006968 <puts>
		return -1;
 8000a68:	f04f 33ff 	mov.w	r3, #4294967295
 8000a6c:	e005      	b.n	8000a7a <shell_init+0x52>
	}

	shell_add('h', sh_help, "Help");
 8000a6e:	4a09      	ldr	r2, [pc, #36]	; (8000a94 <shell_init+0x6c>)
 8000a70:	4909      	ldr	r1, [pc, #36]	; (8000a98 <shell_init+0x70>)
 8000a72:	2068      	movs	r0, #104	; 0x68
 8000a74:	f000 f812 	bl	8000a9c <shell_add>
	return 0;
 8000a78:	2300      	movs	r3, #0
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}
 8000a82:	bf00      	nop
 8000a84:	08007bd0 	.word	0x08007bd0
 8000a88:	2000063c 	.word	0x2000063c
 8000a8c:	20000334 	.word	0x20000334
 8000a90:	08007bf8 	.word	0x08007bf8
 8000a94:	08007c0c 	.word	0x08007c0c
 8000a98:	080009ad 	.word	0x080009ad

08000a9c <shell_add>:

int shell_add(char c, int (* pfunc)(int argc, char ** argv), char * description) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b085      	sub	sp, #20
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	60b9      	str	r1, [r7, #8]
 8000aa6:	607a      	str	r2, [r7, #4]
 8000aa8:	73fb      	strb	r3, [r7, #15]
	if (shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <shell_add+0x74>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	2b3f      	cmp	r3, #63	; 0x3f
 8000ab0:	dc26      	bgt.n	8000b00 <shell_add+0x64>
		shell_func_list[shell_func_list_size].c = c;
 8000ab2:	4b17      	ldr	r3, [pc, #92]	; (8000b10 <shell_add+0x74>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	4917      	ldr	r1, [pc, #92]	; (8000b14 <shell_add+0x78>)
 8000ab8:	4613      	mov	r3, r2
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	4413      	add	r3, r2
 8000abe:	009b      	lsls	r3, r3, #2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	7bfa      	ldrb	r2, [r7, #15]
 8000ac4:	701a      	strb	r2, [r3, #0]
		shell_func_list[shell_func_list_size].func = pfunc;
 8000ac6:	4b12      	ldr	r3, [pc, #72]	; (8000b10 <shell_add+0x74>)
 8000ac8:	681a      	ldr	r2, [r3, #0]
 8000aca:	4912      	ldr	r1, [pc, #72]	; (8000b14 <shell_add+0x78>)
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3304      	adds	r3, #4
 8000ad8:	68ba      	ldr	r2, [r7, #8]
 8000ada:	601a      	str	r2, [r3, #0]
		shell_func_list[shell_func_list_size].description = description;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <shell_add+0x74>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	490c      	ldr	r1, [pc, #48]	; (8000b14 <shell_add+0x78>)
 8000ae2:	4613      	mov	r3, r2
 8000ae4:	005b      	lsls	r3, r3, #1
 8000ae6:	4413      	add	r3, r2
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	440b      	add	r3, r1
 8000aec:	3308      	adds	r3, #8
 8000aee:	687a      	ldr	r2, [r7, #4]
 8000af0:	601a      	str	r2, [r3, #0]
		shell_func_list_size++;
 8000af2:	4b07      	ldr	r3, [pc, #28]	; (8000b10 <shell_add+0x74>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a05      	ldr	r2, [pc, #20]	; (8000b10 <shell_add+0x74>)
 8000afa:	6013      	str	r3, [r2, #0]
		return 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	e001      	b.n	8000b04 <shell_add+0x68>
	}

	return -1;
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3714      	adds	r7, #20
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	20000338 	.word	0x20000338
 8000b14:	2000033c 	.word	0x2000033c

08000b18 <shell_exec>:

static int shell_exec(char * buf) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b090      	sub	sp, #64	; 0x40
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	int i;

	char c = buf[0];
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000b2c:	e040      	b.n	8000bb0 <shell_exec+0x98>
		if (shell_func_list[i].c == c) {
 8000b2e:	492d      	ldr	r1, [pc, #180]	; (8000be4 <shell_exec+0xcc>)
 8000b30:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b32:	4613      	mov	r3, r2
 8000b34:	005b      	lsls	r3, r3, #1
 8000b36:	4413      	add	r3, r2
 8000b38:	009b      	lsls	r3, r3, #2
 8000b3a:	440b      	add	r3, r1
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8000b42:	429a      	cmp	r2, r3
 8000b44:	d131      	bne.n	8000baa <shell_exec+0x92>
			argc = 1;
 8000b46:	2301      	movs	r3, #1
 8000b48:	63bb      	str	r3, [r7, #56]	; 0x38
			argv[0] = buf;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	637b      	str	r3, [r7, #52]	; 0x34
 8000b52:	e013      	b.n	8000b7c <shell_exec+0x64>
				if(*p == ' ') {
 8000b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b56:	781b      	ldrb	r3, [r3, #0]
 8000b58:	2b20      	cmp	r3, #32
 8000b5a:	d10c      	bne.n	8000b76 <shell_exec+0x5e>
					*p = '\0';
 8000b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b5e:	2200      	movs	r2, #0
 8000b60:	701a      	strb	r2, [r3, #0]
					argv[argc++] = p+1;
 8000b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b64:	1c5a      	adds	r2, r3, #1
 8000b66:	63ba      	str	r2, [r7, #56]	; 0x38
 8000b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000b6a:	3201      	adds	r2, #1
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	3340      	adds	r3, #64	; 0x40
 8000b70:	443b      	add	r3, r7
 8000b72:	f843 2c34 	str.w	r2, [r3, #-52]
			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
 8000b76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b78:	3301      	adds	r3, #1
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8000b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d002      	beq.n	8000b8a <shell_exec+0x72>
 8000b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b86:	2b07      	cmp	r3, #7
 8000b88:	dde4      	ble.n	8000b54 <shell_exec+0x3c>
				}
			}

			return shell_func_list[i].func(argc, argv);
 8000b8a:	4916      	ldr	r1, [pc, #88]	; (8000be4 <shell_exec+0xcc>)
 8000b8c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000b8e:	4613      	mov	r3, r2
 8000b90:	005b      	lsls	r3, r3, #1
 8000b92:	4413      	add	r3, r2
 8000b94:	009b      	lsls	r3, r3, #2
 8000b96:	440b      	add	r3, r1
 8000b98:	3304      	adds	r3, #4
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	f107 020c 	add.w	r2, r7, #12
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000ba4:	4798      	blx	r3
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	e017      	b.n	8000bda <shell_exec+0xc2>
	for(i = 0 ; i < shell_func_list_size ; i++) {
 8000baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000bac:	3301      	adds	r3, #1
 8000bae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000bb0:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <shell_exec+0xd0>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000bb6:	429a      	cmp	r2, r3
 8000bb8:	dbb9      	blt.n	8000b2e <shell_exec+0x16>
		}
	}

	int size;
	size = snprintf (print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
 8000bba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <shell_exec+0xd4>)
 8000bc0:	2128      	movs	r1, #40	; 0x28
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <shell_exec+0xd8>)
 8000bc4:	f005 fed8 	bl	8006978 <sniprintf>
 8000bc8:	62f8      	str	r0, [r7, #44]	; 0x2c
	uart_write(print_buffer, size);
 8000bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bcc:	b29b      	uxth	r3, r3
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4807      	ldr	r0, [pc, #28]	; (8000bf0 <shell_exec+0xd8>)
 8000bd2:	f7ff fed7 	bl	8000984 <uart_write>
	return -1;
 8000bd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	3740      	adds	r7, #64	; 0x40
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000033c 	.word	0x2000033c
 8000be8:	20000338 	.word	0x20000338
 8000bec:	08007c14 	.word	0x08007c14
 8000bf0:	2000063c 	.word	0x2000063c

08000bf4 <shell_run>:

static char backspace[] = "\b \b";
static char prompt[] = "> ";

int shell_run() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
	int reading = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
	int pos = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	60bb      	str	r3, [r7, #8]

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(prompt, 2);
 8000c02:	2102      	movs	r1, #2
 8000c04:	482a      	ldr	r0, [pc, #168]	; (8000cb0 <shell_run+0xbc>)
 8000c06:	f7ff febd 	bl	8000984 <uart_write>
		reading = 1;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	60fb      	str	r3, [r7, #12]

		while(reading) {
 8000c0e:	e047      	b.n	8000ca0 <shell_run+0xac>
			char c = uart_read();
 8000c10:	f7ff fe9e 	bl	8000950 <uart_read>
 8000c14:	4603      	mov	r3, r0
 8000c16:	70fb      	strb	r3, [r7, #3]
			int size;

			switch (c) {
 8000c18:	78fb      	ldrb	r3, [r7, #3]
 8000c1a:	2b08      	cmp	r3, #8
 8000c1c:	d025      	beq.n	8000c6a <shell_run+0x76>
 8000c1e:	2b0d      	cmp	r3, #13
 8000c20:	d12e      	bne.n	8000c80 <shell_run+0x8c>
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (print_buffer, BUFFER_SIZE, "\r\n");
 8000c22:	4a24      	ldr	r2, [pc, #144]	; (8000cb4 <shell_run+0xc0>)
 8000c24:	2128      	movs	r1, #40	; 0x28
 8000c26:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <shell_run+0xc4>)
 8000c28:	f005 fea6 	bl	8006978 <sniprintf>
 8000c2c:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	4619      	mov	r1, r3
 8000c34:	4820      	ldr	r0, [pc, #128]	; (8000cb8 <shell_run+0xc4>)
 8000c36:	f7ff fea5 	bl	8000984 <uart_write>
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	1c5a      	adds	r2, r3, #1
 8000c3e:	60ba      	str	r2, [r7, #8]
 8000c40:	4a1e      	ldr	r2, [pc, #120]	; (8000cbc <shell_run+0xc8>)
 8000c42:	2100      	movs	r1, #0
 8000c44:	54d1      	strb	r1, [r2, r3]
				size = snprintf (print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
 8000c46:	4b1d      	ldr	r3, [pc, #116]	; (8000cbc <shell_run+0xc8>)
 8000c48:	4a1d      	ldr	r2, [pc, #116]	; (8000cc0 <shell_run+0xcc>)
 8000c4a:	2128      	movs	r1, #40	; 0x28
 8000c4c:	481a      	ldr	r0, [pc, #104]	; (8000cb8 <shell_run+0xc4>)
 8000c4e:	f005 fe93 	bl	8006978 <sniprintf>
 8000c52:	6078      	str	r0, [r7, #4]
				uart_write(print_buffer, size);
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <shell_run+0xc4>)
 8000c5c:	f7ff fe92 	bl	8000984 <uart_write>
				reading = 0;        //exit read loop
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
				pos = 0;            //reset buffer
 8000c64:	2300      	movs	r3, #0
 8000c66:	60bb      	str	r3, [r7, #8]
				break;
 8000c68:	e01a      	b.n	8000ca0 <shell_run+0xac>
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
 8000c6a:	68bb      	ldr	r3, [r7, #8]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	dd16      	ble.n	8000c9e <shell_run+0xaa>
					pos--;          //remove it in buffer
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	3b01      	subs	r3, #1
 8000c74:	60bb      	str	r3, [r7, #8]

					uart_write(backspace, 3);	// delete the char on the terminal
 8000c76:	2103      	movs	r1, #3
 8000c78:	4812      	ldr	r0, [pc, #72]	; (8000cc4 <shell_run+0xd0>)
 8000c7a:	f7ff fe83 	bl	8000984 <uart_write>
				}
				break;
 8000c7e:	e00e      	b.n	8000c9e <shell_run+0xaa>
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	2b27      	cmp	r3, #39	; 0x27
 8000c84:	dc0c      	bgt.n	8000ca0 <shell_run+0xac>
					uart_write(&c, 1);
 8000c86:	1cfb      	adds	r3, r7, #3
 8000c88:	2101      	movs	r1, #1
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f7ff fe7a 	bl	8000984 <uart_write>
					cmd_buffer[pos++] = c; //store
 8000c90:	68bb      	ldr	r3, [r7, #8]
 8000c92:	1c5a      	adds	r2, r3, #1
 8000c94:	60ba      	str	r2, [r7, #8]
 8000c96:	78f9      	ldrb	r1, [r7, #3]
 8000c98:	4a08      	ldr	r2, [pc, #32]	; (8000cbc <shell_run+0xc8>)
 8000c9a:	54d1      	strb	r1, [r2, r3]
 8000c9c:	e000      	b.n	8000ca0 <shell_run+0xac>
				break;
 8000c9e:	bf00      	nop
		while(reading) {
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1b4      	bne.n	8000c10 <shell_run+0x1c>
				}
			}
		}
		shell_exec(cmd_buffer);
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <shell_run+0xc8>)
 8000ca8:	f7ff ff36 	bl	8000b18 <shell_exec>
		uart_write(prompt, 2);
 8000cac:	e7a9      	b.n	8000c02 <shell_run+0xe>
 8000cae:	bf00      	nop
 8000cb0:	20000004 	.word	0x20000004
 8000cb4:	08007c2c 	.word	0x08007c2c
 8000cb8:	2000063c 	.word	0x2000063c
 8000cbc:	20000664 	.word	0x20000664
 8000cc0:	08007c30 	.word	0x08007c30
 8000cc4:	20000000 	.word	0x20000000

08000cc8 <shell_uart_receive_irq_cb>:
	}
	return 0;
}

void shell_uart_receive_irq_cb(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
	//on oublie pas qu'on est dans un contexte d'interruption
	//FromISR + YIELD
	BaseType_t xHigher = pdFALSE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	607b      	str	r3, [r7, #4]
	xSemaphoreGiveFromISR(sem_uart_rx, &xHigher);
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <shell_uart_receive_irq_cb+0x38>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	1d3a      	adds	r2, r7, #4
 8000cd8:	4611      	mov	r1, r2
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fe97 	bl	8004a0e <xQueueGiveFromISR>
	portYIELD_FROM_ISR(xHigher);
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d007      	beq.n	8000cf6 <shell_uart_receive_irq_cb+0x2e>
 8000ce6:	4b07      	ldr	r3, [pc, #28]	; (8000d04 <shell_uart_receive_irq_cb+0x3c>)
 8000ce8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	f3bf 8f4f 	dsb	sy
 8000cf2:	f3bf 8f6f 	isb	sy

}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	20000334 	.word	0x20000334
 8000d04:	e000ed04 	.word	0xe000ed04

08000d08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d0e:	4b11      	ldr	r3, [pc, #68]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	4a10      	ldr	r2, [pc, #64]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d18:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1a:	4b0e      	ldr	r3, [pc, #56]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d30:	6453      	str	r3, [r2, #68]	; 0x44
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x4c>)
 8000d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f000 fb29 	bl	800139c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d60:	2300      	movs	r3, #0
 8000d62:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d68:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <HAL_InitTick+0xe0>)
 8000d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6c:	4a32      	ldr	r2, [pc, #200]	; (8000e38 <HAL_InitTick+0xe0>)
 8000d6e:	f043 0310 	orr.w	r3, r3, #16
 8000d72:	6413      	str	r3, [r2, #64]	; 0x40
 8000d74:	4b30      	ldr	r3, [pc, #192]	; (8000e38 <HAL_InitTick+0xe0>)
 8000d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	60fb      	str	r3, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d80:	f107 0210 	add.w	r2, r7, #16
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4611      	mov	r1, r2
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f001 fa62 	bl	8002254 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d103      	bne.n	8000da2 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d9a:	f001 fa33 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8000d9e:	6378      	str	r0, [r7, #52]	; 0x34
 8000da0:	e004      	b.n	8000dac <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000da2:	f001 fa2f 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8000da6:	4603      	mov	r3, r0
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <HAL_InitTick+0xe4>)
 8000db0:	fba2 2303 	umull	r2, r3, r2, r3
 8000db4:	0c9b      	lsrs	r3, r3, #18
 8000db6:	3b01      	subs	r3, #1
 8000db8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dba:	4b21      	ldr	r3, [pc, #132]	; (8000e40 <HAL_InitTick+0xe8>)
 8000dbc:	4a21      	ldr	r2, [pc, #132]	; (8000e44 <HAL_InitTick+0xec>)
 8000dbe:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000dc0:	4b1f      	ldr	r3, [pc, #124]	; (8000e40 <HAL_InitTick+0xe8>)
 8000dc2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000dc6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dc8:	4a1d      	ldr	r2, [pc, #116]	; (8000e40 <HAL_InitTick+0xe8>)
 8000dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dcc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dce:	4b1c      	ldr	r3, [pc, #112]	; (8000e40 <HAL_InitTick+0xe8>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd4:	4b1a      	ldr	r3, [pc, #104]	; (8000e40 <HAL_InitTick+0xe8>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_InitTick+0xe8>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000de0:	4817      	ldr	r0, [pc, #92]	; (8000e40 <HAL_InitTick+0xe8>)
 8000de2:	f001 fe59 	bl	8002a98 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000dec:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d11b      	bne.n	8000e2c <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000df4:	4812      	ldr	r0, [pc, #72]	; (8000e40 <HAL_InitTick+0xe8>)
 8000df6:	f001 feb1 	bl	8002b5c <HAL_TIM_Base_Start_IT>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e00:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d111      	bne.n	8000e2c <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e08:	2036      	movs	r0, #54	; 0x36
 8000e0a:	f000 fae3 	bl	80013d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2b0f      	cmp	r3, #15
 8000e12:	d808      	bhi.n	8000e26 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000e14:	2200      	movs	r2, #0
 8000e16:	6879      	ldr	r1, [r7, #4]
 8000e18:	2036      	movs	r0, #54	; 0x36
 8000e1a:	f000 fabf 	bl	800139c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	; (8000e48 <HAL_InitTick+0xf0>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6013      	str	r3, [r2, #0]
 8000e24:	e002      	b.n	8000e2c <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e2c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e30:	4618      	mov	r0, r3
 8000e32:	3738      	adds	r7, #56	; 0x38
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}
 8000e38:	40023800 	.word	0x40023800
 8000e3c:	431bde83 	.word	0x431bde83
 8000e40:	2000068c 	.word	0x2000068c
 8000e44:	40001000 	.word	0x40001000
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e50:	e7fe      	b.n	8000e50 <NMI_Handler+0x4>

08000e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e52:	b480      	push	{r7}
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <HardFault_Handler+0x4>

08000e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <MemManage_Handler+0x4>

08000e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <BusFault_Handler+0x4>

08000e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <UsageFault_Handler+0x4>

08000e6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <USART1_IRQHandler+0x10>)
 8000e7e:	f002 fa01 	bl	8003284 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	200006dc 	.word	0x200006dc

08000e8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e90:	4802      	ldr	r0, [pc, #8]	; (8000e9c <TIM6_DAC_IRQHandler+0x10>)
 8000e92:	f001 fedb 	bl	8002c4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	2000068c 	.word	0x2000068c

08000ea0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b086      	sub	sp, #24
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	60f8      	str	r0, [r7, #12]
 8000ea8:	60b9      	str	r1, [r7, #8]
 8000eaa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
 8000eb0:	e00a      	b.n	8000ec8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000eb2:	f3af 8000 	nop.w
 8000eb6:	4601      	mov	r1, r0
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	b2ca      	uxtb	r2, r1
 8000ec0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	617b      	str	r3, [r7, #20]
 8000ec8:	697a      	ldr	r2, [r7, #20]
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	429a      	cmp	r2, r3
 8000ece:	dbf0      	blt.n	8000eb2 <_read+0x12>
  }

  return len;
 8000ed0:	687b      	ldr	r3, [r7, #4]
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3718      	adds	r7, #24
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}

08000eda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b086      	sub	sp, #24
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	60f8      	str	r0, [r7, #12]
 8000ee2:	60b9      	str	r1, [r7, #8]
 8000ee4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	617b      	str	r3, [r7, #20]
 8000eea:	e009      	b.n	8000f00 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	1c5a      	adds	r2, r3, #1
 8000ef0:	60ba      	str	r2, [r7, #8]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff fbed 	bl	80006d4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000efa:	697b      	ldr	r3, [r7, #20]
 8000efc:	3301      	adds	r3, #1
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	697a      	ldr	r2, [r7, #20]
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	dbf1      	blt.n	8000eec <_write+0x12>
  }
  return len;
 8000f08:	687b      	ldr	r3, [r7, #4]
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	3718      	adds	r7, #24
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}

08000f12 <_close>:

int _close(int file)
{
 8000f12:	b480      	push	{r7}
 8000f14:	b083      	sub	sp, #12
 8000f16:	af00      	add	r7, sp, #0
 8000f18:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f1a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
 8000f32:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f3a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f3c:	2300      	movs	r3, #0
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	370c      	adds	r7, #12
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr

08000f4a <_isatty>:

int _isatty(int file)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b083      	sub	sp, #12
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f52:	2301      	movs	r3, #1
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5e:	4770      	bx	lr

08000f60 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f6c:	2300      	movs	r3, #0
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f84:	4a14      	ldr	r2, [pc, #80]	; (8000fd8 <_sbrk+0x5c>)
 8000f86:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <_sbrk+0x60>)
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f90:	4b13      	ldr	r3, [pc, #76]	; (8000fe0 <_sbrk+0x64>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d102      	bne.n	8000f9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f98:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <_sbrk+0x64>)
 8000f9a:	4a12      	ldr	r2, [pc, #72]	; (8000fe4 <_sbrk+0x68>)
 8000f9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f9e:	4b10      	ldr	r3, [pc, #64]	; (8000fe0 <_sbrk+0x64>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	4413      	add	r3, r2
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	429a      	cmp	r2, r3
 8000faa:	d207      	bcs.n	8000fbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fac:	f005 fe94 	bl	8006cd8 <__errno>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	220c      	movs	r2, #12
 8000fb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fb6:	f04f 33ff 	mov.w	r3, #4294967295
 8000fba:	e009      	b.n	8000fd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fbc:	4b08      	ldr	r3, [pc, #32]	; (8000fe0 <_sbrk+0x64>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fc2:	4b07      	ldr	r3, [pc, #28]	; (8000fe0 <_sbrk+0x64>)
 8000fc4:	681a      	ldr	r2, [r3, #0]
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4413      	add	r3, r2
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <_sbrk+0x64>)
 8000fcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fce:	68fb      	ldr	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3718      	adds	r7, #24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	20050000 	.word	0x20050000
 8000fdc:	00000400 	.word	0x00000400
 8000fe0:	200006d8 	.word	0x200006d8
 8000fe4:	20005820 	.word	0x20005820

08000fe8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fec:	4b06      	ldr	r3, [pc, #24]	; (8001008 <SystemInit+0x20>)
 8000fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <SystemInit+0x20>)
 8000ff4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	e000ed00 	.word	0xe000ed00

0800100c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001010:	4b14      	ldr	r3, [pc, #80]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001012:	4a15      	ldr	r2, [pc, #84]	; (8001068 <MX_USART1_UART_Init+0x5c>)
 8001014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001018:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800101c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0f      	ldr	r3, [pc, #60]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0e      	ldr	r3, [pc, #56]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b09      	ldr	r3, [pc, #36]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001042:	4b08      	ldr	r3, [pc, #32]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001044:	2200      	movs	r2, #0
 8001046:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <MX_USART1_UART_Init+0x58>)
 800104a:	2200      	movs	r2, #0
 800104c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	; (8001064 <MX_USART1_UART_Init+0x58>)
 8001050:	f002 f802 	bl	8003058 <HAL_UART_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800105a:	f7ff fc73 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	200006dc 	.word	0x200006dc
 8001068:	40011000 	.word	0x40011000

0800106c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b0ac      	sub	sp, #176	; 0xb0
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001074:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
 800107c:	605a      	str	r2, [r3, #4]
 800107e:	609a      	str	r2, [r3, #8]
 8001080:	60da      	str	r2, [r3, #12]
 8001082:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001084:	f107 0318 	add.w	r3, r7, #24
 8001088:	2284      	movs	r2, #132	; 0x84
 800108a:	2100      	movs	r1, #0
 800108c:	4618      	mov	r0, r3
 800108e:	f005 fd7f 	bl	8006b90 <memset>
  if(uartHandle->Instance==USART1)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	4a36      	ldr	r2, [pc, #216]	; (8001170 <HAL_UART_MspInit+0x104>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d164      	bne.n	8001166 <HAL_UART_MspInit+0xfa>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800109c:	2340      	movs	r3, #64	; 0x40
 800109e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80010a0:	2300      	movs	r3, #0
 80010a2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a4:	f107 0318 	add.w	r3, r7, #24
 80010a8:	4618      	mov	r0, r3
 80010aa:	f001 f905 	bl	80022b8 <HAL_RCCEx_PeriphCLKConfig>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010b4:	f7ff fc46 	bl	8000944 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80010b8:	4b2e      	ldr	r3, [pc, #184]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010bc:	4a2d      	ldr	r2, [pc, #180]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010be:	f043 0310 	orr.w	r3, r3, #16
 80010c2:	6453      	str	r3, [r2, #68]	; 0x44
 80010c4:	4b2b      	ldr	r3, [pc, #172]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	617b      	str	r3, [r7, #20]
 80010ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d0:	4b28      	ldr	r3, [pc, #160]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a27      	ldr	r2, [pc, #156]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010d6:	f043 0302 	orr.w	r3, r3, #2
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b25      	ldr	r3, [pc, #148]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0302 	and.w	r3, r3, #2
 80010e4:	613b      	str	r3, [r7, #16]
 80010e6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b22      	ldr	r3, [pc, #136]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <HAL_UART_MspInit+0x108>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60fb      	str	r3, [r7, #12]
 80010fe:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001100:	2380      	movs	r3, #128	; 0x80
 8001102:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001106:	2302      	movs	r3, #2
 8001108:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001112:	2303      	movs	r3, #3
 8001114:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001118:	2307      	movs	r3, #7
 800111a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800111e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001122:	4619      	mov	r1, r3
 8001124:	4814      	ldr	r0, [pc, #80]	; (8001178 <HAL_UART_MspInit+0x10c>)
 8001126:	f000 f9f5 	bl	8001514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800112a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800112e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113e:	2303      	movs	r3, #3
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001144:	2307      	movs	r3, #7
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800114e:	4619      	mov	r1, r3
 8001150:	480a      	ldr	r0, [pc, #40]	; (800117c <HAL_UART_MspInit+0x110>)
 8001152:	f000 f9df 	bl	8001514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2105      	movs	r1, #5
 800115a:	2025      	movs	r0, #37	; 0x25
 800115c:	f000 f91e 	bl	800139c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001160:	2025      	movs	r0, #37	; 0x25
 8001162:	f000 f937 	bl	80013d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001166:	bf00      	nop
 8001168:	37b0      	adds	r7, #176	; 0xb0
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40011000 	.word	0x40011000
 8001174:	40023800 	.word	0x40023800
 8001178:	40020400 	.word	0x40020400
 800117c:	40020000 	.word	0x40020000

08001180 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001180:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001184:	480d      	ldr	r0, [pc, #52]	; (80011bc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001186:	490e      	ldr	r1, [pc, #56]	; (80011c0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001188:	4a0e      	ldr	r2, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800118c:	e002      	b.n	8001194 <LoopCopyDataInit>

0800118e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800118e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001190:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001192:	3304      	adds	r3, #4

08001194 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001194:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001196:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001198:	d3f9      	bcc.n	800118e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119a:	4a0b      	ldr	r2, [pc, #44]	; (80011c8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800119c:	4c0b      	ldr	r4, [pc, #44]	; (80011cc <LoopFillZerobss+0x26>)
  movs r3, #0
 800119e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a0:	e001      	b.n	80011a6 <LoopFillZerobss>

080011a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a4:	3204      	adds	r2, #4

080011a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a8:	d3fb      	bcc.n	80011a2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011aa:	f7ff ff1d 	bl	8000fe8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011ae:	f005 fd99 	bl	8006ce4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b2:	f7ff fb1b 	bl	80007ec <main>
  bx  lr    
 80011b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80011bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80011c4:	08007d9c 	.word	0x08007d9c
  ldr r2, =_sbss
 80011c8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80011cc:	20005820 	.word	0x20005820

080011d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d0:	e7fe      	b.n	80011d0 <ADC_IRQHandler>

080011d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d6:	2003      	movs	r0, #3
 80011d8:	f000 f8d5 	bl	8001386 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011dc:	200f      	movs	r0, #15
 80011de:	f7ff fdbb 	bl	8000d58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011e2:	f7ff fd91 	bl	8000d08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011e6:	2300      	movs	r3, #0
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	bd80      	pop	{r7, pc}

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000010 	.word	0x20000010
 8001210:	20000764 	.word	0x20000764

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	20000764 	.word	0x20000764

0800122c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001242:	68ba      	ldr	r2, [r7, #8]
 8001244:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001248:	4013      	ands	r3, r2
 800124a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001254:	4b06      	ldr	r3, [pc, #24]	; (8001270 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	4313      	orrs	r3, r2
 8001258:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800125a:	4a04      	ldr	r2, [pc, #16]	; (800126c <__NVIC_SetPriorityGrouping+0x40>)
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	60d3      	str	r3, [r2, #12]
}
 8001260:	bf00      	nop
 8001262:	3714      	adds	r7, #20
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr
 800126c:	e000ed00 	.word	0xe000ed00
 8001270:	05fa0000 	.word	0x05fa0000

08001274 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001278:	4b04      	ldr	r3, [pc, #16]	; (800128c <__NVIC_GetPriorityGrouping+0x18>)
 800127a:	68db      	ldr	r3, [r3, #12]
 800127c:	0a1b      	lsrs	r3, r3, #8
 800127e:	f003 0307 	and.w	r3, r3, #7
}
 8001282:	4618      	mov	r0, r3
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr
 800128c:	e000ed00 	.word	0xe000ed00

08001290 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	db0b      	blt.n	80012ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a2:	79fb      	ldrb	r3, [r7, #7]
 80012a4:	f003 021f 	and.w	r2, r3, #31
 80012a8:	4907      	ldr	r1, [pc, #28]	; (80012c8 <__NVIC_EnableIRQ+0x38>)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	095b      	lsrs	r3, r3, #5
 80012b0:	2001      	movs	r0, #1
 80012b2:	fa00 f202 	lsl.w	r2, r0, r2
 80012b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012ba:	bf00      	nop
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	e000e100 	.word	0xe000e100

080012cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	6039      	str	r1, [r7, #0]
 80012d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	db0a      	blt.n	80012f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	b2da      	uxtb	r2, r3
 80012e4:	490c      	ldr	r1, [pc, #48]	; (8001318 <__NVIC_SetPriority+0x4c>)
 80012e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ea:	0112      	lsls	r2, r2, #4
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	440b      	add	r3, r1
 80012f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f4:	e00a      	b.n	800130c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4908      	ldr	r1, [pc, #32]	; (800131c <__NVIC_SetPriority+0x50>)
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	3b04      	subs	r3, #4
 8001304:	0112      	lsls	r2, r2, #4
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	440b      	add	r3, r1
 800130a:	761a      	strb	r2, [r3, #24]
}
 800130c:	bf00      	nop
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001320:	b480      	push	{r7}
 8001322:	b089      	sub	sp, #36	; 0x24
 8001324:	af00      	add	r7, sp, #0
 8001326:	60f8      	str	r0, [r7, #12]
 8001328:	60b9      	str	r1, [r7, #8]
 800132a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	f1c3 0307 	rsb	r3, r3, #7
 800133a:	2b04      	cmp	r3, #4
 800133c:	bf28      	it	cs
 800133e:	2304      	movcs	r3, #4
 8001340:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	3304      	adds	r3, #4
 8001346:	2b06      	cmp	r3, #6
 8001348:	d902      	bls.n	8001350 <NVIC_EncodePriority+0x30>
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	3b03      	subs	r3, #3
 800134e:	e000      	b.n	8001352 <NVIC_EncodePriority+0x32>
 8001350:	2300      	movs	r3, #0
 8001352:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001354:	f04f 32ff 	mov.w	r2, #4294967295
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	401a      	ands	r2, r3
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001368:	f04f 31ff 	mov.w	r1, #4294967295
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	fa01 f303 	lsl.w	r3, r1, r3
 8001372:	43d9      	mvns	r1, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001378:	4313      	orrs	r3, r2
         );
}
 800137a:	4618      	mov	r0, r3
 800137c:	3724      	adds	r7, #36	; 0x24
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001386:	b580      	push	{r7, lr}
 8001388:	b082      	sub	sp, #8
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f7ff ff4c 	bl	800122c <__NVIC_SetPriorityGrouping>
}
 8001394:	bf00      	nop
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}

0800139c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800139c:	b580      	push	{r7, lr}
 800139e:	b086      	sub	sp, #24
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	60b9      	str	r1, [r7, #8]
 80013a6:	607a      	str	r2, [r7, #4]
 80013a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013aa:	2300      	movs	r3, #0
 80013ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013ae:	f7ff ff61 	bl	8001274 <__NVIC_GetPriorityGrouping>
 80013b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	68b9      	ldr	r1, [r7, #8]
 80013b8:	6978      	ldr	r0, [r7, #20]
 80013ba:	f7ff ffb1 	bl	8001320 <NVIC_EncodePriority>
 80013be:	4602      	mov	r2, r0
 80013c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013c4:	4611      	mov	r1, r2
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff80 	bl	80012cc <__NVIC_SetPriority>
}
 80013cc:	bf00      	nop
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff ff54 	bl	8001290 <__NVIC_EnableIRQ>
}
 80013e8:	bf00      	nop
 80013ea:	3708      	adds	r7, #8
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}

080013f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013fe:	f7ff ff09 	bl	8001214 <HAL_GetTick>
 8001402:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800140a:	b2db      	uxtb	r3, r3
 800140c:	2b02      	cmp	r3, #2
 800140e:	d008      	beq.n	8001422 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	2200      	movs	r2, #0
 800141a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e052      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	f022 0216 	bic.w	r2, r2, #22
 8001430:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	695a      	ldr	r2, [r3, #20]
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001440:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001446:	2b00      	cmp	r3, #0
 8001448:	d103      	bne.n	8001452 <HAL_DMA_Abort+0x62>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800144e:	2b00      	cmp	r3, #0
 8001450:	d007      	beq.n	8001462 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	681a      	ldr	r2, [r3, #0]
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f022 0208 	bic.w	r2, r2, #8
 8001460:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001472:	e013      	b.n	800149c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001474:	f7ff fece 	bl	8001214 <HAL_GetTick>
 8001478:	4602      	mov	r2, r0
 800147a:	68bb      	ldr	r3, [r7, #8]
 800147c:	1ad3      	subs	r3, r2, r3
 800147e:	2b05      	cmp	r3, #5
 8001480:	d90c      	bls.n	800149c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2220      	movs	r2, #32
 8001486:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2203      	movs	r2, #3
 800148c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	2200      	movs	r2, #0
 8001494:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001498:	2303      	movs	r3, #3
 800149a:	e015      	b.n	80014c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1e4      	bne.n	8001474 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014ae:	223f      	movs	r2, #63	; 0x3f
 80014b0:	409a      	lsls	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2201      	movs	r2, #1
 80014ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80014c6:	2300      	movs	r3, #0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d004      	beq.n	80014ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2280      	movs	r2, #128	; 0x80
 80014e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80014ea:	2301      	movs	r3, #1
 80014ec:	e00c      	b.n	8001508 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	2205      	movs	r2, #5
 80014f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	681a      	ldr	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f022 0201 	bic.w	r2, r2, #1
 8001504:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	b480      	push	{r7}
 8001516:	b089      	sub	sp, #36	; 0x24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001522:	2300      	movs	r3, #0
 8001524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001526:	2300      	movs	r3, #0
 8001528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800152a:	2300      	movs	r3, #0
 800152c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800152e:	2300      	movs	r3, #0
 8001530:	61fb      	str	r3, [r7, #28]
 8001532:	e175      	b.n	8001820 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001534:	2201      	movs	r2, #1
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	fa02 f303 	lsl.w	r3, r2, r3
 800153c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	697a      	ldr	r2, [r7, #20]
 8001544:	4013      	ands	r3, r2
 8001546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	429a      	cmp	r2, r3
 800154e:	f040 8164 	bne.w	800181a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	f003 0303 	and.w	r3, r3, #3
 800155a:	2b01      	cmp	r3, #1
 800155c:	d005      	beq.n	800156a <HAL_GPIO_Init+0x56>
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d130      	bne.n	80015cc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	005b      	lsls	r3, r3, #1
 8001574:	2203      	movs	r2, #3
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	43db      	mvns	r3, r3
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	4013      	ands	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001582:	683b      	ldr	r3, [r7, #0]
 8001584:	68da      	ldr	r2, [r3, #12]
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	69ba      	ldr	r2, [r7, #24]
 8001598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015a0:	2201      	movs	r2, #1
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	091b      	lsrs	r3, r3, #4
 80015b6:	f003 0201 	and.w	r2, r3, #1
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0303 	and.w	r3, r3, #3
 80015d4:	2b03      	cmp	r3, #3
 80015d6:	d017      	beq.n	8001608 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	689a      	ldr	r2, [r3, #8]
 80015f4:	69fb      	ldr	r3, [r7, #28]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	fa02 f303 	lsl.w	r3, r2, r3
 80015fc:	69ba      	ldr	r2, [r7, #24]
 80015fe:	4313      	orrs	r3, r2
 8001600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	f003 0303 	and.w	r3, r3, #3
 8001610:	2b02      	cmp	r3, #2
 8001612:	d123      	bne.n	800165c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	08da      	lsrs	r2, r3, #3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	3208      	adds	r2, #8
 800161c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f003 0307 	and.w	r3, r3, #7
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	220f      	movs	r2, #15
 800162c:	fa02 f303 	lsl.w	r3, r2, r3
 8001630:	43db      	mvns	r3, r3
 8001632:	69ba      	ldr	r2, [r7, #24]
 8001634:	4013      	ands	r3, r2
 8001636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	691a      	ldr	r2, [r3, #16]
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	f003 0307 	and.w	r3, r3, #7
 8001642:	009b      	lsls	r3, r3, #2
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	69ba      	ldr	r2, [r7, #24]
 800164a:	4313      	orrs	r3, r2
 800164c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	08da      	lsrs	r2, r3, #3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	3208      	adds	r2, #8
 8001656:	69b9      	ldr	r1, [r7, #24]
 8001658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	2203      	movs	r2, #3
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	43db      	mvns	r3, r3
 800166e:	69ba      	ldr	r2, [r7, #24]
 8001670:	4013      	ands	r3, r2
 8001672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685b      	ldr	r3, [r3, #4]
 8001678:	f003 0203 	and.w	r2, r3, #3
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	005b      	lsls	r3, r3, #1
 8001680:	fa02 f303 	lsl.w	r3, r2, r3
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001698:	2b00      	cmp	r3, #0
 800169a:	f000 80be 	beq.w	800181a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800169e:	4b66      	ldr	r3, [pc, #408]	; (8001838 <HAL_GPIO_Init+0x324>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	4a65      	ldr	r2, [pc, #404]	; (8001838 <HAL_GPIO_Init+0x324>)
 80016a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a8:	6453      	str	r3, [r2, #68]	; 0x44
 80016aa:	4b63      	ldr	r3, [pc, #396]	; (8001838 <HAL_GPIO_Init+0x324>)
 80016ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016b2:	60fb      	str	r3, [r7, #12]
 80016b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80016b6:	4a61      	ldr	r2, [pc, #388]	; (800183c <HAL_GPIO_Init+0x328>)
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	089b      	lsrs	r3, r3, #2
 80016bc:	3302      	adds	r3, #2
 80016be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f003 0303 	and.w	r3, r3, #3
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	220f      	movs	r2, #15
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a58      	ldr	r2, [pc, #352]	; (8001840 <HAL_GPIO_Init+0x32c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d037      	beq.n	8001752 <HAL_GPIO_Init+0x23e>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a57      	ldr	r2, [pc, #348]	; (8001844 <HAL_GPIO_Init+0x330>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d031      	beq.n	800174e <HAL_GPIO_Init+0x23a>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a56      	ldr	r2, [pc, #344]	; (8001848 <HAL_GPIO_Init+0x334>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d02b      	beq.n	800174a <HAL_GPIO_Init+0x236>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a55      	ldr	r2, [pc, #340]	; (800184c <HAL_GPIO_Init+0x338>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d025      	beq.n	8001746 <HAL_GPIO_Init+0x232>
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	4a54      	ldr	r2, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x33c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d01f      	beq.n	8001742 <HAL_GPIO_Init+0x22e>
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4a53      	ldr	r2, [pc, #332]	; (8001854 <HAL_GPIO_Init+0x340>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d019      	beq.n	800173e <HAL_GPIO_Init+0x22a>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4a52      	ldr	r2, [pc, #328]	; (8001858 <HAL_GPIO_Init+0x344>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d013      	beq.n	800173a <HAL_GPIO_Init+0x226>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4a51      	ldr	r2, [pc, #324]	; (800185c <HAL_GPIO_Init+0x348>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d00d      	beq.n	8001736 <HAL_GPIO_Init+0x222>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a50      	ldr	r2, [pc, #320]	; (8001860 <HAL_GPIO_Init+0x34c>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d007      	beq.n	8001732 <HAL_GPIO_Init+0x21e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_GPIO_Init+0x350>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d101      	bne.n	800172e <HAL_GPIO_Init+0x21a>
 800172a:	2309      	movs	r3, #9
 800172c:	e012      	b.n	8001754 <HAL_GPIO_Init+0x240>
 800172e:	230a      	movs	r3, #10
 8001730:	e010      	b.n	8001754 <HAL_GPIO_Init+0x240>
 8001732:	2308      	movs	r3, #8
 8001734:	e00e      	b.n	8001754 <HAL_GPIO_Init+0x240>
 8001736:	2307      	movs	r3, #7
 8001738:	e00c      	b.n	8001754 <HAL_GPIO_Init+0x240>
 800173a:	2306      	movs	r3, #6
 800173c:	e00a      	b.n	8001754 <HAL_GPIO_Init+0x240>
 800173e:	2305      	movs	r3, #5
 8001740:	e008      	b.n	8001754 <HAL_GPIO_Init+0x240>
 8001742:	2304      	movs	r3, #4
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x240>
 8001746:	2303      	movs	r3, #3
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x240>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x240>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x240>
 8001752:	2300      	movs	r3, #0
 8001754:	69fa      	ldr	r2, [r7, #28]
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	69ba      	ldr	r2, [r7, #24]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001764:	4935      	ldr	r1, [pc, #212]	; (800183c <HAL_GPIO_Init+0x328>)
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001772:	4b3d      	ldr	r3, [pc, #244]	; (8001868 <HAL_GPIO_Init+0x354>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	43db      	mvns	r3, r3
 800177c:	69ba      	ldr	r2, [r7, #24]
 800177e:	4013      	ands	r3, r2
 8001780:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800178e:	69ba      	ldr	r2, [r7, #24]
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	4313      	orrs	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001796:	4a34      	ldr	r2, [pc, #208]	; (8001868 <HAL_GPIO_Init+0x354>)
 8001798:	69bb      	ldr	r3, [r7, #24]
 800179a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800179c:	4b32      	ldr	r3, [pc, #200]	; (8001868 <HAL_GPIO_Init+0x354>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	43db      	mvns	r3, r3
 80017a6:	69ba      	ldr	r2, [r7, #24]
 80017a8:	4013      	ands	r3, r2
 80017aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d003      	beq.n	80017c0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017c0:	4a29      	ldr	r2, [pc, #164]	; (8001868 <HAL_GPIO_Init+0x354>)
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017c6:	4b28      	ldr	r3, [pc, #160]	; (8001868 <HAL_GPIO_Init+0x354>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	43db      	mvns	r3, r3
 80017d0:	69ba      	ldr	r2, [r7, #24]
 80017d2:	4013      	ands	r3, r2
 80017d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017d6:	683b      	ldr	r3, [r7, #0]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d003      	beq.n	80017ea <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80017e2:	69ba      	ldr	r2, [r7, #24]
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017ea:	4a1f      	ldr	r2, [pc, #124]	; (8001868 <HAL_GPIO_Init+0x354>)
 80017ec:	69bb      	ldr	r3, [r7, #24]
 80017ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017f0:	4b1d      	ldr	r3, [pc, #116]	; (8001868 <HAL_GPIO_Init+0x354>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	43db      	mvns	r3, r3
 80017fa:	69ba      	ldr	r2, [r7, #24]
 80017fc:	4013      	ands	r3, r2
 80017fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001800:	683b      	ldr	r3, [r7, #0]
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001808:	2b00      	cmp	r3, #0
 800180a:	d003      	beq.n	8001814 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	4313      	orrs	r3, r2
 8001812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001814:	4a14      	ldr	r2, [pc, #80]	; (8001868 <HAL_GPIO_Init+0x354>)
 8001816:	69bb      	ldr	r3, [r7, #24]
 8001818:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800181a:	69fb      	ldr	r3, [r7, #28]
 800181c:	3301      	adds	r3, #1
 800181e:	61fb      	str	r3, [r7, #28]
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	2b0f      	cmp	r3, #15
 8001824:	f67f ae86 	bls.w	8001534 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3724      	adds	r7, #36	; 0x24
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	40013800 	.word	0x40013800
 8001840:	40020000 	.word	0x40020000
 8001844:	40020400 	.word	0x40020400
 8001848:	40020800 	.word	0x40020800
 800184c:	40020c00 	.word	0x40020c00
 8001850:	40021000 	.word	0x40021000
 8001854:	40021400 	.word	0x40021400
 8001858:	40021800 	.word	0x40021800
 800185c:	40021c00 	.word	0x40021c00
 8001860:	40022000 	.word	0x40022000
 8001864:	40022400 	.word	0x40022400
 8001868:	40013c00 	.word	0x40013c00

0800186c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	460b      	mov	r3, r1
 8001876:	807b      	strh	r3, [r7, #2]
 8001878:	4613      	mov	r3, r2
 800187a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800187c:	787b      	ldrb	r3, [r7, #1]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001882:	887a      	ldrh	r2, [r7, #2]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001888:	e003      	b.n	8001892 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800188a:	887b      	ldrh	r3, [r7, #2]
 800188c:	041a      	lsls	r2, r3, #16
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	619a      	str	r2, [r3, #24]
}
 8001892:	bf00      	nop
 8001894:	370c      	adds	r7, #12
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80018aa:	4b23      	ldr	r3, [pc, #140]	; (8001938 <HAL_PWREx_EnableOverDrive+0x98>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	4a22      	ldr	r2, [pc, #136]	; (8001938 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018b4:	6413      	str	r3, [r2, #64]	; 0x40
 80018b6:	4b20      	ldr	r3, [pc, #128]	; (8001938 <HAL_PWREx_EnableOverDrive+0x98>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018be:	603b      	str	r3, [r7, #0]
 80018c0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80018c2:	4b1e      	ldr	r3, [pc, #120]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a1d      	ldr	r2, [pc, #116]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018cc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80018ce:	f7ff fca1 	bl	8001214 <HAL_GetTick>
 80018d2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018d4:	e009      	b.n	80018ea <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80018d6:	f7ff fc9d 	bl	8001214 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018e4:	d901      	bls.n	80018ea <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80018e6:	2303      	movs	r3, #3
 80018e8:	e022      	b.n	8001930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80018ea:	4b14      	ldr	r3, [pc, #80]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018f6:	d1ee      	bne.n	80018d6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a0f      	ldr	r2, [pc, #60]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 80018fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001902:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001904:	f7ff fc86 	bl	8001214 <HAL_GetTick>
 8001908:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800190a:	e009      	b.n	8001920 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800190c:	f7ff fc82 	bl	8001214 <HAL_GetTick>
 8001910:	4602      	mov	r2, r0
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	1ad3      	subs	r3, r2, r3
 8001916:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800191a:	d901      	bls.n	8001920 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800191c:	2303      	movs	r3, #3
 800191e:	e007      	b.n	8001930 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001920:	4b06      	ldr	r3, [pc, #24]	; (800193c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001928:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800192c:	d1ee      	bne.n	800190c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800192e:	2300      	movs	r3, #0
}
 8001930:	4618      	mov	r0, r3
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}
 8001938:	40023800 	.word	0x40023800
 800193c:	40007000 	.word	0x40007000

08001940 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d101      	bne.n	8001956 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e291      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 8087 	beq.w	8001a72 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001964:	4b96      	ldr	r3, [pc, #600]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b04      	cmp	r3, #4
 800196e:	d00c      	beq.n	800198a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001970:	4b93      	ldr	r3, [pc, #588]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	f003 030c 	and.w	r3, r3, #12
 8001978:	2b08      	cmp	r3, #8
 800197a:	d112      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62>
 800197c:	4b90      	ldr	r3, [pc, #576]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001984:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001988:	d10b      	bne.n	80019a2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800198a:	4b8d      	ldr	r3, [pc, #564]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d06c      	beq.n	8001a70 <HAL_RCC_OscConfig+0x130>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d168      	bne.n	8001a70 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800199e:	2301      	movs	r3, #1
 80019a0:	e26b      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019aa:	d106      	bne.n	80019ba <HAL_RCC_OscConfig+0x7a>
 80019ac:	4b84      	ldr	r3, [pc, #528]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a83      	ldr	r2, [pc, #524]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b6:	6013      	str	r3, [r2, #0]
 80019b8:	e02e      	b.n	8001a18 <HAL_RCC_OscConfig+0xd8>
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d10c      	bne.n	80019dc <HAL_RCC_OscConfig+0x9c>
 80019c2:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a7e      	ldr	r2, [pc, #504]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019cc:	6013      	str	r3, [r2, #0]
 80019ce:	4b7c      	ldr	r3, [pc, #496]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a7b      	ldr	r2, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019d4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019d8:	6013      	str	r3, [r2, #0]
 80019da:	e01d      	b.n	8001a18 <HAL_RCC_OscConfig+0xd8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0xc0>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 80019f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e00b      	b.n	8001a18 <HAL_RCC_OscConfig+0xd8>
 8001a00:	4b6f      	ldr	r3, [pc, #444]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a6e      	ldr	r2, [pc, #440]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a0a:	6013      	str	r3, [r2, #0]
 8001a0c:	4b6c      	ldr	r3, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a6b      	ldr	r2, [pc, #428]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d013      	beq.n	8001a48 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a20:	f7ff fbf8 	bl	8001214 <HAL_GetTick>
 8001a24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a28:	f7ff fbf4 	bl	8001214 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e21f      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b61      	ldr	r3, [pc, #388]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0xe8>
 8001a46:	e014      	b.n	8001a72 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a48:	f7ff fbe4 	bl	8001214 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a4e:	e008      	b.n	8001a62 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a50:	f7ff fbe0 	bl	8001214 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	2b64      	cmp	r3, #100	; 0x64
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e20b      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d1f0      	bne.n	8001a50 <HAL_RCC_OscConfig+0x110>
 8001a6e:	e000      	b.n	8001a72 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d069      	beq.n	8001b52 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	f003 030c 	and.w	r3, r3, #12
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d00b      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a8a:	4b4d      	ldr	r3, [pc, #308]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	f003 030c 	and.w	r3, r3, #12
 8001a92:	2b08      	cmp	r3, #8
 8001a94:	d11c      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x190>
 8001a96:	4b4a      	ldr	r3, [pc, #296]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001a98:	685b      	ldr	r3, [r3, #4]
 8001a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d116      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0302 	and.w	r3, r3, #2
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d005      	beq.n	8001aba <HAL_RCC_OscConfig+0x17a>
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d001      	beq.n	8001aba <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	e1df      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	00db      	lsls	r3, r3, #3
 8001ac8:	493d      	ldr	r1, [pc, #244]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001aca:	4313      	orrs	r3, r2
 8001acc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ace:	e040      	b.n	8001b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d023      	beq.n	8001b20 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ad8:	4b39      	ldr	r3, [pc, #228]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a38      	ldr	r2, [pc, #224]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001ade:	f043 0301 	orr.w	r3, r3, #1
 8001ae2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae4:	f7ff fb96 	bl	8001214 <HAL_GetTick>
 8001ae8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001aea:	e008      	b.n	8001afe <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aec:	f7ff fb92 	bl	8001214 <HAL_GetTick>
 8001af0:	4602      	mov	r2, r0
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	1ad3      	subs	r3, r2, r3
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e1bd      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0302 	and.w	r3, r3, #2
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d0f0      	beq.n	8001aec <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0a:	4b2d      	ldr	r3, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	691b      	ldr	r3, [r3, #16]
 8001b16:	00db      	lsls	r3, r3, #3
 8001b18:	4929      	ldr	r1, [pc, #164]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b1a:	4313      	orrs	r3, r2
 8001b1c:	600b      	str	r3, [r1, #0]
 8001b1e:	e018      	b.n	8001b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b20:	4b27      	ldr	r3, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a26      	ldr	r2, [pc, #152]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b2c:	f7ff fb72 	bl	8001214 <HAL_GetTick>
 8001b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b32:	e008      	b.n	8001b46 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b34:	f7ff fb6e 	bl	8001214 <HAL_GetTick>
 8001b38:	4602      	mov	r2, r0
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	1ad3      	subs	r3, r2, r3
 8001b3e:	2b02      	cmp	r3, #2
 8001b40:	d901      	bls.n	8001b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001b42:	2303      	movs	r3, #3
 8001b44:	e199      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b46:	4b1e      	ldr	r3, [pc, #120]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d1f0      	bne.n	8001b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d038      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	695b      	ldr	r3, [r3, #20]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d019      	beq.n	8001b9a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b66:	4b16      	ldr	r3, [pc, #88]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b6a:	4a15      	ldr	r2, [pc, #84]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b72:	f7ff fb4f 	bl	8001214 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b7a:	f7ff fb4b 	bl	8001214 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e176      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b8c:	4b0c      	ldr	r3, [pc, #48]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x23a>
 8001b98:	e01a      	b.n	8001bd0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001b9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b9e:	4a08      	ldr	r2, [pc, #32]	; (8001bc0 <HAL_RCC_OscConfig+0x280>)
 8001ba0:	f023 0301 	bic.w	r3, r3, #1
 8001ba4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb35 	bl	8001214 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bac:	e00a      	b.n	8001bc4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bae:	f7ff fb31 	bl	8001214 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d903      	bls.n	8001bc4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e15c      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
 8001bc0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bc4:	4b91      	ldr	r3, [pc, #580]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bc8:	f003 0302 	and.w	r3, r3, #2
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d1ee      	bne.n	8001bae <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f003 0304 	and.w	r3, r3, #4
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	f000 80a4 	beq.w	8001d26 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001bde:	4b8b      	ldr	r3, [pc, #556]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d10d      	bne.n	8001c06 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b88      	ldr	r3, [pc, #544]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a87      	ldr	r2, [pc, #540]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	60bb      	str	r3, [r7, #8]
 8001c00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c02:	2301      	movs	r3, #1
 8001c04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c06:	4b82      	ldr	r3, [pc, #520]	; (8001e10 <HAL_RCC_OscConfig+0x4d0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d118      	bne.n	8001c44 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001c12:	4b7f      	ldr	r3, [pc, #508]	; (8001e10 <HAL_RCC_OscConfig+0x4d0>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a7e      	ldr	r2, [pc, #504]	; (8001e10 <HAL_RCC_OscConfig+0x4d0>)
 8001c18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c1e:	f7ff faf9 	bl	8001214 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c26:	f7ff faf5 	bl	8001214 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b64      	cmp	r3, #100	; 0x64
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e120      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c38:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <HAL_RCC_OscConfig+0x4d0>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d106      	bne.n	8001c5a <HAL_RCC_OscConfig+0x31a>
 8001c4c:	4b6f      	ldr	r3, [pc, #444]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c50:	4a6e      	ldr	r2, [pc, #440]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c52:	f043 0301 	orr.w	r3, r3, #1
 8001c56:	6713      	str	r3, [r2, #112]	; 0x70
 8001c58:	e02d      	b.n	8001cb6 <HAL_RCC_OscConfig+0x376>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d10c      	bne.n	8001c7c <HAL_RCC_OscConfig+0x33c>
 8001c62:	4b6a      	ldr	r3, [pc, #424]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c66:	4a69      	ldr	r2, [pc, #420]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c68:	f023 0301 	bic.w	r3, r3, #1
 8001c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8001c6e:	4b67      	ldr	r3, [pc, #412]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c72:	4a66      	ldr	r2, [pc, #408]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	6713      	str	r3, [r2, #112]	; 0x70
 8001c7a:	e01c      	b.n	8001cb6 <HAL_RCC_OscConfig+0x376>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b05      	cmp	r3, #5
 8001c82:	d10c      	bne.n	8001c9e <HAL_RCC_OscConfig+0x35e>
 8001c84:	4b61      	ldr	r3, [pc, #388]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c88:	4a60      	ldr	r2, [pc, #384]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	6713      	str	r3, [r2, #112]	; 0x70
 8001c90:	4b5e      	ldr	r3, [pc, #376]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c94:	4a5d      	ldr	r2, [pc, #372]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	f043 0301 	orr.w	r3, r3, #1
 8001c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8001c9c:	e00b      	b.n	8001cb6 <HAL_RCC_OscConfig+0x376>
 8001c9e:	4b5b      	ldr	r3, [pc, #364]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca2:	4a5a      	ldr	r2, [pc, #360]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001ca4:	f023 0301 	bic.w	r3, r3, #1
 8001ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8001caa:	4b58      	ldr	r3, [pc, #352]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cae:	4a57      	ldr	r2, [pc, #348]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001cb0:	f023 0304 	bic.w	r3, r3, #4
 8001cb4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d015      	beq.n	8001cea <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cbe:	f7ff faa9 	bl	8001214 <HAL_GetTick>
 8001cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc4:	e00a      	b.n	8001cdc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cc6:	f7ff faa5 	bl	8001214 <HAL_GetTick>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e0ce      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cdc:	4b4b      	ldr	r3, [pc, #300]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce0:	f003 0302 	and.w	r3, r3, #2
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d0ee      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x386>
 8001ce8:	e014      	b.n	8001d14 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cea:	f7ff fa93 	bl	8001214 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cf0:	e00a      	b.n	8001d08 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf2:	f7ff fa8f 	bl	8001214 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d901      	bls.n	8001d08 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001d04:	2303      	movs	r3, #3
 8001d06:	e0b8      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d08:	4b40      	ldr	r3, [pc, #256]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0c:	f003 0302 	and.w	r3, r3, #2
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d1ee      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001d14:	7dfb      	ldrb	r3, [r7, #23]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d105      	bne.n	8001d26 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d1a:	4b3c      	ldr	r3, [pc, #240]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1e:	4a3b      	ldr	r2, [pc, #236]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	699b      	ldr	r3, [r3, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80a4 	beq.w	8001e78 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 030c 	and.w	r3, r3, #12
 8001d38:	2b08      	cmp	r3, #8
 8001d3a:	d06b      	beq.n	8001e14 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	2b02      	cmp	r3, #2
 8001d42:	d149      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d44:	4b31      	ldr	r3, [pc, #196]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a30      	ldr	r2, [pc, #192]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d50:	f7ff fa60 	bl	8001214 <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d58:	f7ff fa5c 	bl	8001214 <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e087      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d6a:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1f0      	bne.n	8001d58 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	69da      	ldr	r2, [r3, #28]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6a1b      	ldr	r3, [r3, #32]
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	019b      	lsls	r3, r3, #6
 8001d86:	431a      	orrs	r2, r3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8c:	085b      	lsrs	r3, r3, #1
 8001d8e:	3b01      	subs	r3, #1
 8001d90:	041b      	lsls	r3, r3, #16
 8001d92:	431a      	orrs	r2, r3
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	061b      	lsls	r3, r3, #24
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	4a1b      	ldr	r2, [pc, #108]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001d9e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001da2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001daa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001dae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db0:	f7ff fa30 	bl	8001214 <HAL_GetTick>
 8001db4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001db6:	e008      	b.n	8001dca <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001db8:	f7ff fa2c 	bl	8001214 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	693b      	ldr	r3, [r7, #16]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	2b02      	cmp	r3, #2
 8001dc4:	d901      	bls.n	8001dca <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e057      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dca:	4b10      	ldr	r3, [pc, #64]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d0f0      	beq.n	8001db8 <HAL_RCC_OscConfig+0x478>
 8001dd6:	e04f      	b.n	8001e78 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a0b      	ldr	r2, [pc, #44]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001de2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001de4:	f7ff fa16 	bl	8001214 <HAL_GetTick>
 8001de8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dea:	e008      	b.n	8001dfe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dec:	f7ff fa12 	bl	8001214 <HAL_GetTick>
 8001df0:	4602      	mov	r2, r0
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	2b02      	cmp	r3, #2
 8001df8:	d901      	bls.n	8001dfe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e03d      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dfe:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <HAL_RCC_OscConfig+0x4cc>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d1f0      	bne.n	8001dec <HAL_RCC_OscConfig+0x4ac>
 8001e0a:	e035      	b.n	8001e78 <HAL_RCC_OscConfig+0x538>
 8001e0c:	40023800 	.word	0x40023800
 8001e10:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001e14:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <HAL_RCC_OscConfig+0x544>)
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	699b      	ldr	r3, [r3, #24]
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d028      	beq.n	8001e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d121      	bne.n	8001e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e3a:	429a      	cmp	r2, r3
 8001e3c:	d11a      	bne.n	8001e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e3e:	68fa      	ldr	r2, [r7, #12]
 8001e40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001e44:	4013      	ands	r3, r2
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001e4a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d111      	bne.n	8001e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5a:	085b      	lsrs	r3, r3, #1
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d107      	bne.n	8001e74 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3718      	adds	r7, #24
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40023800 	.word	0x40023800

08001e88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b084      	sub	sp, #16
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
 8001e90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0d0      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b6a      	ldr	r3, [pc, #424]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 030f 	and.w	r3, r3, #15
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b67      	ldr	r3, [pc, #412]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 020f 	bic.w	r2, r3, #15
 8001eb6:	4965      	ldr	r1, [pc, #404]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b63      	ldr	r3, [pc, #396]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 030f 	and.w	r3, r3, #15
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b8      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d020      	beq.n	8001f1e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d005      	beq.n	8001ef4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee8:	4b59      	ldr	r3, [pc, #356]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a58      	ldr	r2, [pc, #352]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001eee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ef2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f00:	4b53      	ldr	r3, [pc, #332]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	4a52      	ldr	r2, [pc, #328]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f06:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001f0a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f0c:	4b50      	ldr	r3, [pc, #320]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	494d      	ldr	r1, [pc, #308]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0301 	and.w	r3, r3, #1
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d040      	beq.n	8001fac <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b01      	cmp	r3, #1
 8001f30:	d107      	bne.n	8001f42 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f32:	4b47      	ldr	r3, [pc, #284]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d115      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e07f      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	2b02      	cmp	r3, #2
 8001f48:	d107      	bne.n	8001f5a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f4a:	4b41      	ldr	r3, [pc, #260]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d109      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e073      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5a:	4b3d      	ldr	r3, [pc, #244]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d101      	bne.n	8001f6a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e06b      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f6a:	4b39      	ldr	r3, [pc, #228]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f023 0203 	bic.w	r2, r3, #3
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4936      	ldr	r1, [pc, #216]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f7c:	f7ff f94a 	bl	8001214 <HAL_GetTick>
 8001f80:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f82:	e00a      	b.n	8001f9a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f84:	f7ff f946 	bl	8001214 <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e053      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f9a:	4b2d      	ldr	r3, [pc, #180]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	f003 020c 	and.w	r2, r3, #12
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	429a      	cmp	r2, r3
 8001faa:	d1eb      	bne.n	8001f84 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fac:	4b27      	ldr	r3, [pc, #156]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d210      	bcs.n	8001fdc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fba:	4b24      	ldr	r3, [pc, #144]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f023 020f 	bic.w	r2, r3, #15
 8001fc2:	4922      	ldr	r1, [pc, #136]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fca:	4b20      	ldr	r3, [pc, #128]	; (800204c <HAL_RCC_ClockConfig+0x1c4>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f003 030f 	and.w	r3, r3, #15
 8001fd2:	683a      	ldr	r2, [r7, #0]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d001      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e032      	b.n	8002042 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f003 0304 	and.w	r3, r3, #4
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d008      	beq.n	8001ffa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4916      	ldr	r1, [pc, #88]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0308 	and.w	r3, r3, #8
 8002002:	2b00      	cmp	r3, #0
 8002004:	d009      	beq.n	800201a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002006:	4b12      	ldr	r3, [pc, #72]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002008:	689b      	ldr	r3, [r3, #8]
 800200a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	691b      	ldr	r3, [r3, #16]
 8002012:	00db      	lsls	r3, r3, #3
 8002014:	490e      	ldr	r1, [pc, #56]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002016:	4313      	orrs	r3, r2
 8002018:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800201a:	f000 f821 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 800201e:	4602      	mov	r2, r0
 8002020:	4b0b      	ldr	r3, [pc, #44]	; (8002050 <HAL_RCC_ClockConfig+0x1c8>)
 8002022:	689b      	ldr	r3, [r3, #8]
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	f003 030f 	and.w	r3, r3, #15
 800202a:	490a      	ldr	r1, [pc, #40]	; (8002054 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	5ccb      	ldrb	r3, [r1, r3]
 800202e:	fa22 f303 	lsr.w	r3, r2, r3
 8002032:	4a09      	ldr	r2, [pc, #36]	; (8002058 <HAL_RCC_ClockConfig+0x1d0>)
 8002034:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002036:	4b09      	ldr	r3, [pc, #36]	; (800205c <HAL_RCC_ClockConfig+0x1d4>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fe8c 	bl	8000d58 <HAL_InitTick>

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	4618      	mov	r0, r3
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40023c00 	.word	0x40023c00
 8002050:	40023800 	.word	0x40023800
 8002054:	08007c40 	.word	0x08007c40
 8002058:	20000008 	.word	0x20000008
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002060:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002064:	b090      	sub	sp, #64	; 0x40
 8002066:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002068:	2300      	movs	r3, #0
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
 800206c:	2300      	movs	r3, #0
 800206e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002070:	2300      	movs	r3, #0
 8002072:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002078:	4b59      	ldr	r3, [pc, #356]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 030c 	and.w	r3, r3, #12
 8002080:	2b08      	cmp	r3, #8
 8002082:	d00d      	beq.n	80020a0 <HAL_RCC_GetSysClockFreq+0x40>
 8002084:	2b08      	cmp	r3, #8
 8002086:	f200 80a1 	bhi.w	80021cc <HAL_RCC_GetSysClockFreq+0x16c>
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_RCC_GetSysClockFreq+0x34>
 800208e:	2b04      	cmp	r3, #4
 8002090:	d003      	beq.n	800209a <HAL_RCC_GetSysClockFreq+0x3a>
 8002092:	e09b      	b.n	80021cc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002094:	4b53      	ldr	r3, [pc, #332]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x184>)
 8002096:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002098:	e09b      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800209a:	4b53      	ldr	r3, [pc, #332]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x188>)
 800209c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800209e:	e098      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80020a0:	4b4f      	ldr	r3, [pc, #316]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80020a8:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80020aa:	4b4d      	ldr	r3, [pc, #308]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d028      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020b6:	4b4a      	ldr	r3, [pc, #296]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	099b      	lsrs	r3, r3, #6
 80020bc:	2200      	movs	r2, #0
 80020be:	623b      	str	r3, [r7, #32]
 80020c0:	627a      	str	r2, [r7, #36]	; 0x24
 80020c2:	6a3b      	ldr	r3, [r7, #32]
 80020c4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80020c8:	2100      	movs	r1, #0
 80020ca:	4b47      	ldr	r3, [pc, #284]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020cc:	fb03 f201 	mul.w	r2, r3, r1
 80020d0:	2300      	movs	r3, #0
 80020d2:	fb00 f303 	mul.w	r3, r0, r3
 80020d6:	4413      	add	r3, r2
 80020d8:	4a43      	ldr	r2, [pc, #268]	; (80021e8 <HAL_RCC_GetSysClockFreq+0x188>)
 80020da:	fba0 1202 	umull	r1, r2, r0, r2
 80020de:	62fa      	str	r2, [r7, #44]	; 0x2c
 80020e0:	460a      	mov	r2, r1
 80020e2:	62ba      	str	r2, [r7, #40]	; 0x28
 80020e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020e6:	4413      	add	r3, r2
 80020e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ec:	2200      	movs	r2, #0
 80020ee:	61bb      	str	r3, [r7, #24]
 80020f0:	61fa      	str	r2, [r7, #28]
 80020f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80020f6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80020fa:	f7fe f8d9 	bl	80002b0 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4613      	mov	r3, r2
 8002104:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002106:	e053      	b.n	80021b0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002108:	4b35      	ldr	r3, [pc, #212]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	099b      	lsrs	r3, r3, #6
 800210e:	2200      	movs	r2, #0
 8002110:	613b      	str	r3, [r7, #16]
 8002112:	617a      	str	r2, [r7, #20]
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800211a:	f04f 0b00 	mov.w	fp, #0
 800211e:	4652      	mov	r2, sl
 8002120:	465b      	mov	r3, fp
 8002122:	f04f 0000 	mov.w	r0, #0
 8002126:	f04f 0100 	mov.w	r1, #0
 800212a:	0159      	lsls	r1, r3, #5
 800212c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002130:	0150      	lsls	r0, r2, #5
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	ebb2 080a 	subs.w	r8, r2, sl
 800213a:	eb63 090b 	sbc.w	r9, r3, fp
 800213e:	f04f 0200 	mov.w	r2, #0
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800214a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800214e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002152:	ebb2 0408 	subs.w	r4, r2, r8
 8002156:	eb63 0509 	sbc.w	r5, r3, r9
 800215a:	f04f 0200 	mov.w	r2, #0
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	00eb      	lsls	r3, r5, #3
 8002164:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002168:	00e2      	lsls	r2, r4, #3
 800216a:	4614      	mov	r4, r2
 800216c:	461d      	mov	r5, r3
 800216e:	eb14 030a 	adds.w	r3, r4, sl
 8002172:	603b      	str	r3, [r7, #0]
 8002174:	eb45 030b 	adc.w	r3, r5, fp
 8002178:	607b      	str	r3, [r7, #4]
 800217a:	f04f 0200 	mov.w	r2, #0
 800217e:	f04f 0300 	mov.w	r3, #0
 8002182:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002186:	4629      	mov	r1, r5
 8002188:	028b      	lsls	r3, r1, #10
 800218a:	4621      	mov	r1, r4
 800218c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002190:	4621      	mov	r1, r4
 8002192:	028a      	lsls	r2, r1, #10
 8002194:	4610      	mov	r0, r2
 8002196:	4619      	mov	r1, r3
 8002198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219a:	2200      	movs	r2, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	60fa      	str	r2, [r7, #12]
 80021a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021a4:	f7fe f884 	bl	80002b0 <__aeabi_uldivmod>
 80021a8:	4602      	mov	r2, r0
 80021aa:	460b      	mov	r3, r1
 80021ac:	4613      	mov	r3, r2
 80021ae:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80021b0:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <HAL_RCC_GetSysClockFreq+0x180>)
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	0c1b      	lsrs	r3, r3, #16
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	3301      	adds	r3, #1
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80021c0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021c8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021ca:	e002      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021cc:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetSysClockFreq+0x184>)
 80021ce:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80021d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3740      	adds	r7, #64	; 0x40
 80021d8:	46bd      	mov	sp, r7
 80021da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021de:	bf00      	nop
 80021e0:	40023800 	.word	0x40023800
 80021e4:	00f42400 	.word	0x00f42400
 80021e8:	017d7840 	.word	0x017d7840

080021ec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021f0:	4b03      	ldr	r3, [pc, #12]	; (8002200 <HAL_RCC_GetHCLKFreq+0x14>)
 80021f2:	681b      	ldr	r3, [r3, #0]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008

08002204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002208:	f7ff fff0 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 800220c:	4602      	mov	r2, r0
 800220e:	4b05      	ldr	r3, [pc, #20]	; (8002224 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	0a9b      	lsrs	r3, r3, #10
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	4903      	ldr	r1, [pc, #12]	; (8002228 <HAL_RCC_GetPCLK1Freq+0x24>)
 800221a:	5ccb      	ldrb	r3, [r1, r3]
 800221c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002220:	4618      	mov	r0, r3
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40023800 	.word	0x40023800
 8002228:	08007c50 	.word	0x08007c50

0800222c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002230:	f7ff ffdc 	bl	80021ec <HAL_RCC_GetHCLKFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b05      	ldr	r3, [pc, #20]	; (800224c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	0b5b      	lsrs	r3, r3, #13
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	4903      	ldr	r1, [pc, #12]	; (8002250 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002248:	4618      	mov	r0, r3
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	08007c50 	.word	0x08007c50

08002254 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	220f      	movs	r2, #15
 8002262:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002264:	4b12      	ldr	r3, [pc, #72]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	f003 0203 	and.w	r2, r3, #3
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800227c:	4b0c      	ldr	r3, [pc, #48]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002288:	4b09      	ldr	r3, [pc, #36]	; (80022b0 <HAL_RCC_GetClockConfig+0x5c>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	08db      	lsrs	r3, r3, #3
 800228e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002296:	4b07      	ldr	r3, [pc, #28]	; (80022b4 <HAL_RCC_GetClockConfig+0x60>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f003 020f 	and.w	r2, r3, #15
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	601a      	str	r2, [r3, #0]
}
 80022a2:	bf00      	nop
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	40023800 	.word	0x40023800
 80022b4:	40023c00 	.word	0x40023c00

080022b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b088      	sub	sp, #32
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80022c8:	2300      	movs	r3, #0
 80022ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80022cc:	2300      	movs	r3, #0
 80022ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0301 	and.w	r3, r3, #1
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80022e0:	4b69      	ldr	r3, [pc, #420]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	4a68      	ldr	r2, [pc, #416]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80022ea:	6093      	str	r3, [r2, #8]
 80022ec:	4b66      	ldr	r3, [pc, #408]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022f4:	4964      	ldr	r1, [pc, #400]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d101      	bne.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002302:	2301      	movs	r3, #1
 8002304:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d017      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002312:	4b5d      	ldr	r3, [pc, #372]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002318:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002320:	4959      	ldr	r1, [pc, #356]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800232c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002330:	d101      	bne.n	8002336 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002332:	2301      	movs	r3, #1
 8002334:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800233a:	2b00      	cmp	r3, #0
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800233e:	2301      	movs	r3, #1
 8002340:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d017      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800234e:	4b4e      	ldr	r3, [pc, #312]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002350:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002354:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	494a      	ldr	r1, [pc, #296]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800235e:	4313      	orrs	r3, r2
 8002360:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002368:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800236c:	d101      	bne.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800236e:	2301      	movs	r3, #1
 8002370:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800237a:	2301      	movs	r3, #1
 800237c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d001      	beq.n	800238e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800238a:	2301      	movs	r3, #1
 800238c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0320 	and.w	r3, r3, #32
 8002396:	2b00      	cmp	r3, #0
 8002398:	f000 808b 	beq.w	80024b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800239c:	4b3a      	ldr	r3, [pc, #232]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800239e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a0:	4a39      	ldr	r2, [pc, #228]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023a6:	6413      	str	r3, [r2, #64]	; 0x40
 80023a8:	4b37      	ldr	r3, [pc, #220]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023b0:	60bb      	str	r3, [r7, #8]
 80023b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80023b4:	4b35      	ldr	r3, [pc, #212]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a34      	ldr	r2, [pc, #208]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023c0:	f7fe ff28 	bl	8001214 <HAL_GetTick>
 80023c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023c6:	e008      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023c8:	f7fe ff24 	bl	8001214 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	2b64      	cmp	r3, #100	; 0x64
 80023d4:	d901      	bls.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e357      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80023da:	4b2c      	ldr	r3, [pc, #176]	; (800248c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d0f0      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80023e6:	4b28      	ldr	r3, [pc, #160]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d035      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023fe:	693a      	ldr	r2, [r7, #16]
 8002400:	429a      	cmp	r2, r3
 8002402:	d02e      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002404:	4b20      	ldr	r3, [pc, #128]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800240c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800240e:	4b1e      	ldr	r3, [pc, #120]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002412:	4a1d      	ldr	r2, [pc, #116]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002414:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002418:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800241a:	4b1b      	ldr	r3, [pc, #108]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	4a1a      	ldr	r2, [pc, #104]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002420:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002424:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002426:	4a18      	ldr	r2, [pc, #96]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800242c:	4b16      	ldr	r3, [pc, #88]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800242e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b01      	cmp	r3, #1
 8002436:	d114      	bne.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe feec 	bl	8001214 <HAL_GetTick>
 800243c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800243e:	e00a      	b.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe fee8 	bl	8001214 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e319      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002456:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0ee      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800246a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800246e:	d111      	bne.n	8002494 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002470:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800247e:	400b      	ands	r3, r1
 8002480:	4901      	ldr	r1, [pc, #4]	; (8002488 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	4313      	orrs	r3, r2
 8002484:	608b      	str	r3, [r1, #8]
 8002486:	e00b      	b.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002488:	40023800 	.word	0x40023800
 800248c:	40007000 	.word	0x40007000
 8002490:	0ffffcff 	.word	0x0ffffcff
 8002494:	4baa      	ldr	r3, [pc, #680]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4aa9      	ldr	r2, [pc, #676]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800249a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800249e:	6093      	str	r3, [r2, #8]
 80024a0:	4ba7      	ldr	r3, [pc, #668]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ac:	49a4      	ldr	r1, [pc, #656]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0310 	and.w	r3, r3, #16
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d010      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80024be:	4ba0      	ldr	r3, [pc, #640]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80024c4:	4a9e      	ldr	r2, [pc, #632]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80024ce:	4b9c      	ldr	r3, [pc, #624]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	4999      	ldr	r1, [pc, #612]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ec:	4b94      	ldr	r3, [pc, #592]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80024fa:	4991      	ldr	r1, [pc, #580]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250e:	4b8c      	ldr	r3, [pc, #560]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002514:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800251c:	4988      	ldr	r1, [pc, #544]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d00a      	beq.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002530:	4b83      	ldr	r3, [pc, #524]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002536:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800253e:	4980      	ldr	r1, [pc, #512]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002552:	4b7b      	ldr	r3, [pc, #492]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002558:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4977      	ldr	r1, [pc, #476]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002562:	4313      	orrs	r3, r2
 8002564:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00a      	beq.n	800258a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002574:	4b72      	ldr	r3, [pc, #456]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	f023 0203 	bic.w	r2, r3, #3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002582:	496f      	ldr	r1, [pc, #444]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002584:	4313      	orrs	r3, r2
 8002586:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00a      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002596:	4b6a      	ldr	r3, [pc, #424]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800259c:	f023 020c 	bic.w	r2, r3, #12
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a4:	4966      	ldr	r1, [pc, #408]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d00a      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80025b8:	4b61      	ldr	r3, [pc, #388]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c6:	495e      	ldr	r1, [pc, #376]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025c8:	4313      	orrs	r3, r2
 80025ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d00a      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80025da:	4b59      	ldr	r3, [pc, #356]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025e8:	4955      	ldr	r1, [pc, #340]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d00a      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80025fc:	4b50      	ldr	r3, [pc, #320]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800260a:	494d      	ldr	r1, [pc, #308]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800260c:	4313      	orrs	r3, r2
 800260e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00a      	beq.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800261e:	4b48      	ldr	r3, [pc, #288]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002624:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262c:	4944      	ldr	r1, [pc, #272]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800262e:	4313      	orrs	r3, r2
 8002630:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00a      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002640:	4b3f      	ldr	r3, [pc, #252]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002646:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800264e:	493c      	ldr	r1, [pc, #240]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00a      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002662:	4b37      	ldr	r3, [pc, #220]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002664:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002668:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002670:	4933      	ldr	r1, [pc, #204]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002672:	4313      	orrs	r3, r2
 8002674:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d00a      	beq.n	800269a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002684:	4b2e      	ldr	r3, [pc, #184]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002692:	492b      	ldr	r1, [pc, #172]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002694:	4313      	orrs	r3, r2
 8002696:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d011      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026a6:	4b26      	ldr	r3, [pc, #152]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	4922      	ldr	r1, [pc, #136]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026c4:	d101      	bne.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80026c6:	2301      	movs	r3, #1
 80026c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80026d6:	2301      	movs	r3, #1
 80026d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d00a      	beq.n	80026fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80026e6:	4b16      	ldr	r3, [pc, #88]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026f4:	4912      	ldr	r1, [pc, #72]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00b      	beq.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002708:	4b0d      	ldr	r3, [pc, #52]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800270a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002718:	4909      	ldr	r1, [pc, #36]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800271a:	4313      	orrs	r3, r2
 800271c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d006      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 80d9 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	4b02      	ldr	r3, [pc, #8]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a01      	ldr	r2, [pc, #4]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800273a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800273e:	e001      	b.n	8002744 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002740:	40023800 	.word	0x40023800
 8002744:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002746:	f7fe fd65 	bl	8001214 <HAL_GetTick>
 800274a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800274c:	e008      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800274e:	f7fe fd61 	bl	8001214 <HAL_GetTick>
 8002752:	4602      	mov	r2, r0
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	1ad3      	subs	r3, r2, r3
 8002758:	2b64      	cmp	r3, #100	; 0x64
 800275a:	d901      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800275c:	2303      	movs	r3, #3
 800275e:	e194      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002760:	4b6c      	ldr	r3, [pc, #432]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1f0      	bne.n	800274e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d021      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277c:	2b00      	cmp	r3, #0
 800277e:	d11d      	bne.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002780:	4b64      	ldr	r3, [pc, #400]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002786:	0c1b      	lsrs	r3, r3, #16
 8002788:	f003 0303 	and.w	r3, r3, #3
 800278c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800278e:	4b61      	ldr	r3, [pc, #388]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002790:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002794:	0e1b      	lsrs	r3, r3, #24
 8002796:	f003 030f 	and.w	r3, r3, #15
 800279a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	019a      	lsls	r2, r3, #6
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	041b      	lsls	r3, r3, #16
 80027a6:	431a      	orrs	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	061b      	lsls	r3, r3, #24
 80027ac:	431a      	orrs	r2, r3
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	071b      	lsls	r3, r3, #28
 80027b4:	4957      	ldr	r1, [pc, #348]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d004      	beq.n	80027d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027d0:	d00a      	beq.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d02e      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e6:	d129      	bne.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80027e8:	4b4a      	ldr	r3, [pc, #296]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ee:	0c1b      	lsrs	r3, r3, #16
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80027f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027fc:	0f1b      	lsrs	r3, r3, #28
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	019a      	lsls	r2, r3, #6
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	041b      	lsls	r3, r3, #16
 800280e:	431a      	orrs	r2, r3
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	061b      	lsls	r3, r3, #24
 8002816:	431a      	orrs	r2, r3
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	071b      	lsls	r3, r3, #28
 800281c:	493d      	ldr	r1, [pc, #244]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002824:	4b3b      	ldr	r3, [pc, #236]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002826:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800282a:	f023 021f 	bic.w	r2, r3, #31
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002832:	3b01      	subs	r3, #1
 8002834:	4937      	ldr	r1, [pc, #220]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002836:	4313      	orrs	r3, r2
 8002838:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002844:	2b00      	cmp	r3, #0
 8002846:	d01d      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002848:	4b32      	ldr	r3, [pc, #200]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800284a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800284e:	0e1b      	lsrs	r3, r3, #24
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002856:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002858:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800285c:	0f1b      	lsrs	r3, r3, #28
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	019a      	lsls	r2, r3, #6
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	041b      	lsls	r3, r3, #16
 8002870:	431a      	orrs	r2, r3
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	071b      	lsls	r3, r3, #28
 800287c:	4925      	ldr	r1, [pc, #148]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800287e:	4313      	orrs	r3, r2
 8002880:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800288c:	2b00      	cmp	r3, #0
 800288e:	d011      	beq.n	80028b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	019a      	lsls	r2, r3, #6
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	691b      	ldr	r3, [r3, #16]
 800289a:	041b      	lsls	r3, r3, #16
 800289c:	431a      	orrs	r2, r3
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68db      	ldr	r3, [r3, #12]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	431a      	orrs	r2, r3
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	071b      	lsls	r3, r3, #28
 80028ac:	4919      	ldr	r1, [pc, #100]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ae:	4313      	orrs	r3, r2
 80028b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80028b4:	4b17      	ldr	r3, [pc, #92]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a16      	ldr	r2, [pc, #88]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028c0:	f7fe fca8 	bl	8001214 <HAL_GetTick>
 80028c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028c6:	e008      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80028c8:	f7fe fca4 	bl	8001214 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b64      	cmp	r3, #100	; 0x64
 80028d4:	d901      	bls.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e0d7      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80028da:	4b0e      	ldr	r3, [pc, #56]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80028e6:	69bb      	ldr	r3, [r7, #24]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	f040 80cd 	bne.w	8002a88 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80028ee:	4b09      	ldr	r3, [pc, #36]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a08      	ldr	r2, [pc, #32]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028fa:	f7fe fc8b 	bl	8001214 <HAL_GetTick>
 80028fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002900:	e00a      	b.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002902:	f7fe fc87 	bl	8001214 <HAL_GetTick>
 8002906:	4602      	mov	r2, r0
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b64      	cmp	r3, #100	; 0x64
 800290e:	d903      	bls.n	8002918 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002910:	2303      	movs	r3, #3
 8002912:	e0ba      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002914:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002918:	4b5e      	ldr	r3, [pc, #376]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002920:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002924:	d0ed      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002936:	2b00      	cmp	r3, #0
 8002938:	d009      	beq.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002942:	2b00      	cmp	r3, #0
 8002944:	d02e      	beq.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294a:	2b00      	cmp	r3, #0
 800294c:	d12a      	bne.n	80029a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800294e:	4b51      	ldr	r3, [pc, #324]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002950:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002954:	0c1b      	lsrs	r3, r3, #16
 8002956:	f003 0303 	and.w	r3, r3, #3
 800295a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800295e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002962:	0f1b      	lsrs	r3, r3, #28
 8002964:	f003 0307 	and.w	r3, r3, #7
 8002968:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	695b      	ldr	r3, [r3, #20]
 800296e:	019a      	lsls	r2, r3, #6
 8002970:	693b      	ldr	r3, [r7, #16]
 8002972:	041b      	lsls	r3, r3, #16
 8002974:	431a      	orrs	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	699b      	ldr	r3, [r3, #24]
 800297a:	061b      	lsls	r3, r3, #24
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	071b      	lsls	r3, r3, #28
 8002982:	4944      	ldr	r1, [pc, #272]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800298a:	4b42      	ldr	r3, [pc, #264]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800298c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002990:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002998:	3b01      	subs	r3, #1
 800299a:	021b      	lsls	r3, r3, #8
 800299c:	493d      	ldr	r1, [pc, #244]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d022      	beq.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029b8:	d11d      	bne.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80029ba:	4b36      	ldr	r3, [pc, #216]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c0:	0e1b      	lsrs	r3, r3, #24
 80029c2:	f003 030f 	and.w	r3, r3, #15
 80029c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80029c8:	4b32      	ldr	r3, [pc, #200]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ce:	0f1b      	lsrs	r3, r3, #28
 80029d0:	f003 0307 	and.w	r3, r3, #7
 80029d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	019a      	lsls	r2, r3, #6
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6a1b      	ldr	r3, [r3, #32]
 80029e0:	041b      	lsls	r3, r3, #16
 80029e2:	431a      	orrs	r2, r3
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	061b      	lsls	r3, r3, #24
 80029e8:	431a      	orrs	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	071b      	lsls	r3, r3, #28
 80029ee:	4929      	ldr	r1, [pc, #164]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80029f0:	4313      	orrs	r3, r2
 80029f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 0308 	and.w	r3, r3, #8
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d028      	beq.n	8002a54 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a08:	0e1b      	lsrs	r3, r3, #24
 8002a0a:	f003 030f 	and.w	r3, r3, #15
 8002a0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a10:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	0c1b      	lsrs	r3, r3, #16
 8002a18:	f003 0303 	and.w	r3, r3, #3
 8002a1c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	019a      	lsls	r2, r3, #6
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	69db      	ldr	r3, [r3, #28]
 8002a34:	071b      	lsls	r3, r3, #28
 8002a36:	4917      	ldr	r1, [pc, #92]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002a3e:	4b15      	ldr	r3, [pc, #84]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	4911      	ldr	r1, [pc, #68]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a54:	4b0f      	ldr	r3, [pc, #60]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a0e      	ldr	r2, [pc, #56]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a60:	f7fe fbd8 	bl	8001214 <HAL_GetTick>
 8002a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a66:	e008      	b.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a68:	f7fe fbd4 	bl	8001214 <HAL_GetTick>
 8002a6c:	4602      	mov	r2, r0
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	1ad3      	subs	r3, r2, r3
 8002a72:	2b64      	cmp	r3, #100	; 0x64
 8002a74:	d901      	bls.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a76:	2303      	movs	r3, #3
 8002a78:	e007      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a86:	d1ef      	bne.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800

08002a98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b082      	sub	sp, #8
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d101      	bne.n	8002aaa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e049      	b.n	8002b3e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ab0:	b2db      	uxtb	r3, r3
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d106      	bne.n	8002ac4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002abe:	6878      	ldr	r0, [r7, #4]
 8002ac0:	f000 f841 	bl	8002b46 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681a      	ldr	r2, [r3, #0]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	3304      	adds	r3, #4
 8002ad4:	4619      	mov	r1, r3
 8002ad6:	4610      	mov	r0, r2
 8002ad8:	f000 fa00 	bl	8002edc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2201      	movs	r2, #1
 8002ae0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2201      	movs	r2, #1
 8002af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2201      	movs	r2, #1
 8002af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3708      	adds	r7, #8
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd80      	pop	{r7, pc}

08002b46 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002b46:	b480      	push	{r7}
 8002b48:	b083      	sub	sp, #12
 8002b4a:	af00      	add	r7, sp, #0
 8002b4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002b4e:	bf00      	nop
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d001      	beq.n	8002b74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e054      	b.n	8002c1e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2202      	movs	r2, #2
 8002b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68da      	ldr	r2, [r3, #12]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a26      	ldr	r2, [pc, #152]	; (8002c2c <HAL_TIM_Base_Start_IT+0xd0>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d022      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b9e:	d01d      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	; (8002c30 <HAL_TIM_Base_Start_IT+0xd4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d018      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	; (8002c34 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d013      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00e      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_TIM_Base_Start_IT+0xe0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	; (8002c40 <HAL_TIM_Base_Start_IT+0xe4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d004      	beq.n	8002bdc <HAL_TIM_Base_Start_IT+0x80>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <HAL_TIM_Base_Start_IT+0xe8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d115      	bne.n	8002c08 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	689a      	ldr	r2, [r3, #8]
 8002be2:	4b19      	ldr	r3, [pc, #100]	; (8002c48 <HAL_TIM_Base_Start_IT+0xec>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2b06      	cmp	r3, #6
 8002bec:	d015      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xbe>
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bf4:	d011      	beq.n	8002c1a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 0201 	orr.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c06:	e008      	b.n	8002c1a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	e000      	b.n	8002c1c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	40010000 	.word	0x40010000
 8002c30:	40000400 	.word	0x40000400
 8002c34:	40000800 	.word	0x40000800
 8002c38:	40000c00 	.word	0x40000c00
 8002c3c:	40010400 	.word	0x40010400
 8002c40:	40014000 	.word	0x40014000
 8002c44:	40001800 	.word	0x40001800
 8002c48:	00010007 	.word	0x00010007

08002c4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0302 	and.w	r3, r3, #2
 8002c5e:	2b02      	cmp	r3, #2
 8002c60:	d122      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d11b      	bne.n	8002ca8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0202 	mvn.w	r2, #2
 8002c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	699b      	ldr	r3, [r3, #24]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d003      	beq.n	8002c96 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f905 	bl	8002e9e <HAL_TIM_IC_CaptureCallback>
 8002c94:	e005      	b.n	8002ca2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f8f7 	bl	8002e8a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 f908 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	f003 0304 	and.w	r3, r3, #4
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d122      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f003 0304 	and.w	r3, r3, #4
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d11b      	bne.n	8002cfc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f06f 0204 	mvn.w	r2, #4
 8002ccc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f000 f8db 	bl	8002e9e <HAL_TIM_IC_CaptureCallback>
 8002ce8:	e005      	b.n	8002cf6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cea:	6878      	ldr	r0, [r7, #4]
 8002cec:	f000 f8cd 	bl	8002e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cf0:	6878      	ldr	r0, [r7, #4]
 8002cf2:	f000 f8de 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	691b      	ldr	r3, [r3, #16]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d122      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	68db      	ldr	r3, [r3, #12]
 8002d10:	f003 0308 	and.w	r3, r3, #8
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d11b      	bne.n	8002d50 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0208 	mvn.w	r2, #8
 8002d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2204      	movs	r2, #4
 8002d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69db      	ldr	r3, [r3, #28]
 8002d2e:	f003 0303 	and.w	r3, r3, #3
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d003      	beq.n	8002d3e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f000 f8b1 	bl	8002e9e <HAL_TIM_IC_CaptureCallback>
 8002d3c:	e005      	b.n	8002d4a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8a3 	bl	8002e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f8b4 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	691b      	ldr	r3, [r3, #16]
 8002d56:	f003 0310 	and.w	r3, r3, #16
 8002d5a:	2b10      	cmp	r3, #16
 8002d5c:	d122      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	f003 0310 	and.w	r3, r3, #16
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d11b      	bne.n	8002da4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 0210 	mvn.w	r2, #16
 8002d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2208      	movs	r2, #8
 8002d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f887 	bl	8002e9e <HAL_TIM_IC_CaptureCallback>
 8002d90:	e005      	b.n	8002d9e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f000 f879 	bl	8002e8a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f000 f88a 	bl	8002eb2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	691b      	ldr	r3, [r3, #16]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d10e      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d107      	bne.n	8002dd0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f06f 0201 	mvn.w	r2, #1
 8002dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fd fda8 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dda:	2b80      	cmp	r3, #128	; 0x80
 8002ddc:	d10e      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de8:	2b80      	cmp	r3, #128	; 0x80
 8002dea:	d107      	bne.n	8002dfc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f000 f91a 	bl	8003030 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e0a:	d10e      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e16:	2b80      	cmp	r3, #128	; 0x80
 8002e18:	d107      	bne.n	8002e2a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f000 f90d 	bl	8003044 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	d10e      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e42:	2b40      	cmp	r3, #64	; 0x40
 8002e44:	d107      	bne.n	8002e56 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e50:	6878      	ldr	r0, [r7, #4]
 8002e52:	f000 f838 	bl	8002ec6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	f003 0320 	and.w	r3, r3, #32
 8002e60:	2b20      	cmp	r3, #32
 8002e62:	d10e      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d107      	bne.n	8002e82 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f06f 0220 	mvn.w	r2, #32
 8002e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e7c:	6878      	ldr	r0, [r7, #4]
 8002e7e:	f000 f8cd 	bl	800301c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e82:	bf00      	nop
 8002e84:	3708      	adds	r7, #8
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9c:	4770      	bx	lr

08002e9e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr

08002eb2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002eb2:	b480      	push	{r7}
 8002eb4:	b083      	sub	sp, #12
 8002eb6:	af00      	add	r7, sp, #0
 8002eb8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eba:	bf00      	nop
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
 8002ee4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	4a40      	ldr	r2, [pc, #256]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d013      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002efa:	d00f      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	4a3d      	ldr	r2, [pc, #244]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d00b      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	4a3c      	ldr	r2, [pc, #240]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d007      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	4a3b      	ldr	r2, [pc, #236]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d003      	beq.n	8002f1c <TIM_Base_SetConfig+0x40>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	4a3a      	ldr	r2, [pc, #232]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d108      	bne.n	8002f2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	68fa      	ldr	r2, [r7, #12]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d02b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f3c:	d027      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a2c      	ldr	r2, [pc, #176]	; (8002ff4 <TIM_Base_SetConfig+0x118>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d023      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a2b      	ldr	r2, [pc, #172]	; (8002ff8 <TIM_Base_SetConfig+0x11c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a2a      	ldr	r2, [pc, #168]	; (8002ffc <TIM_Base_SetConfig+0x120>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d01b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a29      	ldr	r2, [pc, #164]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d017      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <TIM_Base_SetConfig+0x128>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <TIM_Base_SetConfig+0x12c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a26      	ldr	r2, [pc, #152]	; (800300c <TIM_Base_SetConfig+0x130>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a25      	ldr	r2, [pc, #148]	; (8003010 <TIM_Base_SetConfig+0x134>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a24      	ldr	r2, [pc, #144]	; (8003014 <TIM_Base_SetConfig+0x138>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0xb2>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <TIM_Base_SetConfig+0x13c>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a0a      	ldr	r2, [pc, #40]	; (8002ff0 <TIM_Base_SetConfig+0x114>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0xf8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a0c      	ldr	r2, [pc, #48]	; (8003000 <TIM_Base_SetConfig+0x124>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
 8002fee:	bf00      	nop
 8002ff0:	40010000 	.word	0x40010000
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00
 8003000:	40010400 	.word	0x40010400
 8003004:	40014000 	.word	0x40014000
 8003008:	40014400 	.word	0x40014400
 800300c:	40014800 	.word	0x40014800
 8003010:	40001800 	.word	0x40001800
 8003014:	40001c00 	.word	0x40001c00
 8003018:	40002000 	.word	0x40002000

0800301c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800301c:	b480      	push	{r7}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003024:	bf00      	nop
 8003026:	370c      	adds	r7, #12
 8003028:	46bd      	mov	sp, r7
 800302a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302e:	4770      	bx	lr

08003030 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003038:	bf00      	nop
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003044:	b480      	push	{r7}
 8003046:	b083      	sub	sp, #12
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr

08003058 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e040      	b.n	80030ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d106      	bne.n	8003080 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800307a:	6878      	ldr	r0, [r7, #4]
 800307c:	f7fd fff6 	bl	800106c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2224      	movs	r2, #36	; 0x24
 8003084:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f022 0201 	bic.w	r2, r2, #1
 8003094:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 fbe6 	bl	8003868 <UART_SetConfig>
 800309c:	4603      	mov	r3, r0
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d101      	bne.n	80030a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e022      	b.n	80030ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d002      	beq.n	80030b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80030ae:	6878      	ldr	r0, [r7, #4]
 80030b0:	f000 fe3e 	bl	8003d30 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80030c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	689a      	ldr	r2, [r3, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80030d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f042 0201 	orr.w	r2, r2, #1
 80030e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 fec5 	bl	8003e74 <UART_CheckIdleState>
 80030ea:	4603      	mov	r3, r0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b08a      	sub	sp, #40	; 0x28
 80030f8:	af02      	add	r7, sp, #8
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	603b      	str	r3, [r7, #0]
 8003100:	4613      	mov	r3, r2
 8003102:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003108:	2b20      	cmp	r3, #32
 800310a:	d171      	bne.n	80031f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	2b00      	cmp	r3, #0
 8003110:	d002      	beq.n	8003118 <HAL_UART_Transmit+0x24>
 8003112:	88fb      	ldrh	r3, [r7, #6]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e06a      	b.n	80031f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2200      	movs	r2, #0
 8003120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2221      	movs	r2, #33	; 0x21
 8003128:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800312a:	f7fe f873 	bl	8001214 <HAL_GetTick>
 800312e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	88fa      	ldrh	r2, [r7, #6]
 8003134:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	88fa      	ldrh	r2, [r7, #6]
 800313c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003148:	d108      	bne.n	800315c <HAL_UART_Transmit+0x68>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d104      	bne.n	800315c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003152:	2300      	movs	r3, #0
 8003154:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	61bb      	str	r3, [r7, #24]
 800315a:	e003      	b.n	8003164 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003160:	2300      	movs	r3, #0
 8003162:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003164:	e02c      	b.n	80031c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	9300      	str	r3, [sp, #0]
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2200      	movs	r2, #0
 800316e:	2180      	movs	r1, #128	; 0x80
 8003170:	68f8      	ldr	r0, [r7, #12]
 8003172:	f000 feb6 	bl	8003ee2 <UART_WaitOnFlagUntilTimeout>
 8003176:	4603      	mov	r3, r0
 8003178:	2b00      	cmp	r3, #0
 800317a:	d001      	beq.n	8003180 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e038      	b.n	80031f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d10b      	bne.n	800319e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	881b      	ldrh	r3, [r3, #0]
 800318a:	461a      	mov	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003194:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003196:	69bb      	ldr	r3, [r7, #24]
 8003198:	3302      	adds	r3, #2
 800319a:	61bb      	str	r3, [r7, #24]
 800319c:	e007      	b.n	80031ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80031a8:	69fb      	ldr	r3, [r7, #28]
 80031aa:	3301      	adds	r3, #1
 80031ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	3b01      	subs	r3, #1
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d1cc      	bne.n	8003166 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	2200      	movs	r2, #0
 80031d4:	2140      	movs	r1, #64	; 0x40
 80031d6:	68f8      	ldr	r0, [r7, #12]
 80031d8:	f000 fe83 	bl	8003ee2 <UART_WaitOnFlagUntilTimeout>
 80031dc:	4603      	mov	r3, r0
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d001      	beq.n	80031e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80031e2:	2303      	movs	r3, #3
 80031e4:	e005      	b.n	80031f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2220      	movs	r2, #32
 80031ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80031ec:	2300      	movs	r3, #0
 80031ee:	e000      	b.n	80031f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80031f0:	2302      	movs	r3, #2
  }
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08a      	sub	sp, #40	; 0x28
 80031fe:	af00      	add	r7, sp, #0
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	4613      	mov	r3, r2
 8003206:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800320e:	2b20      	cmp	r3, #32
 8003210:	d132      	bne.n	8003278 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d002      	beq.n	800321e <HAL_UART_Receive_IT+0x24>
 8003218:	88fb      	ldrh	r3, [r7, #6]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e02b      	b.n	800327a <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d018      	beq.n	8003268 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	e853 3f00 	ldrex	r3, [r3]
 8003242:	613b      	str	r3, [r7, #16]
   return(result);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800324a:	627b      	str	r3, [r7, #36]	; 0x24
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	461a      	mov	r2, r3
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	623b      	str	r3, [r7, #32]
 8003256:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	69f9      	ldr	r1, [r7, #28]
 800325a:	6a3a      	ldr	r2, [r7, #32]
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	61bb      	str	r3, [r7, #24]
   return(result);
 8003262:	69bb      	ldr	r3, [r7, #24]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e6      	bne.n	8003236 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003268:	88fb      	ldrh	r3, [r7, #6]
 800326a:	461a      	mov	r2, r3
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fefe 	bl	8004070 <UART_Start_Receive_IT>
 8003274:	4603      	mov	r3, r0
 8003276:	e000      	b.n	800327a <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003278:	2302      	movs	r3, #2
  }
}
 800327a:	4618      	mov	r0, r3
 800327c:	3728      	adds	r7, #40	; 0x28
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
	...

08003284 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b0ba      	sub	sp, #232	; 0xe8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	69db      	ldr	r3, [r3, #28]
 8003292:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80032ae:	f640 030f 	movw	r3, #2063	; 0x80f
 80032b2:	4013      	ands	r3, r2
 80032b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d115      	bne.n	80032ec <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c4:	f003 0320 	and.w	r3, r3, #32
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00f      	beq.n	80032ec <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032d0:	f003 0320 	and.w	r3, r3, #32
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d009      	beq.n	80032ec <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032dc:	2b00      	cmp	r3, #0
 80032de:	f000 8297 	beq.w	8003810 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	4798      	blx	r3
      }
      return;
 80032ea:	e291      	b.n	8003810 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80032ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	f000 8117 	beq.w	8003524 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003302:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003306:	4b85      	ldr	r3, [pc, #532]	; (800351c <HAL_UART_IRQHandler+0x298>)
 8003308:	4013      	ands	r3, r2
 800330a:	2b00      	cmp	r3, #0
 800330c:	f000 810a 	beq.w	8003524 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003310:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003314:	f003 0301 	and.w	r3, r3, #1
 8003318:	2b00      	cmp	r3, #0
 800331a:	d011      	beq.n	8003340 <HAL_UART_IRQHandler+0xbc>
 800331c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00b      	beq.n	8003340 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2201      	movs	r2, #1
 800332e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003336:	f043 0201 	orr.w	r2, r3, #1
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d011      	beq.n	8003370 <HAL_UART_IRQHandler+0xec>
 800334c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003350:	f003 0301 	and.w	r3, r3, #1
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00b      	beq.n	8003370 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	2202      	movs	r2, #2
 800335e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003366:	f043 0204 	orr.w	r2, r3, #4
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d011      	beq.n	80033a0 <HAL_UART_IRQHandler+0x11c>
 800337c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003380:	f003 0301 	and.w	r3, r3, #1
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00b      	beq.n	80033a0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	2204      	movs	r2, #4
 800338e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003396:	f043 0202 	orr.w	r2, r3, #2
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80033a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033a4:	f003 0308 	and.w	r3, r3, #8
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d017      	beq.n	80033dc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033b0:	f003 0320 	and.w	r3, r3, #32
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033bc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00b      	beq.n	80033dc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2208      	movs	r2, #8
 80033ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033d2:	f043 0208 	orr.w	r2, r3, #8
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d012      	beq.n	800340e <HAL_UART_IRQHandler+0x18a>
 80033e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d00c      	beq.n	800340e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 81fd 	beq.w	8003814 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800341a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800341e:	f003 0320 	and.w	r3, r3, #32
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003426:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d007      	beq.n	8003442 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003436:	2b00      	cmp	r3, #0
 8003438:	d003      	beq.n	8003442 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003448:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d005      	beq.n	8003466 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800345a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800345e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003462:	2b00      	cmp	r3, #0
 8003464:	d04f      	beq.n	8003506 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 fec8 	bl	80041fc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	689b      	ldr	r3, [r3, #8]
 8003472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003476:	2b40      	cmp	r3, #64	; 0x40
 8003478:	d141      	bne.n	80034fe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	3308      	adds	r3, #8
 8003480:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003484:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003488:	e853 3f00 	ldrex	r3, [r3]
 800348c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003490:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003494:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003498:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	3308      	adds	r3, #8
 80034a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80034a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80034aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80034b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80034b6:	e841 2300 	strex	r3, r2, [r1]
 80034ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d1d9      	bne.n	800347a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d013      	beq.n	80034f6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	4a13      	ldr	r2, [pc, #76]	; (8003520 <HAL_UART_IRQHandler+0x29c>)
 80034d4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034da:	4618      	mov	r0, r3
 80034dc:	f7fd fff8 	bl	80014d0 <HAL_DMA_Abort_IT>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d017      	beq.n	8003516 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80034f0:	4610      	mov	r0, r2
 80034f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034f4:	e00f      	b.n	8003516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f9a0 	bl	800383c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fc:	e00b      	b.n	8003516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f99c 	bl	800383c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003504:	e007      	b.n	8003516 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f998 	bl	800383c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8003514:	e17e      	b.n	8003814 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003516:	bf00      	nop
    return;
 8003518:	e17c      	b.n	8003814 <HAL_UART_IRQHandler+0x590>
 800351a:	bf00      	nop
 800351c:	04000120 	.word	0x04000120
 8003520:	080042c5 	.word	0x080042c5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003528:	2b01      	cmp	r3, #1
 800352a:	f040 814c 	bne.w	80037c6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800352e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	f000 8145 	beq.w	80037c6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800353c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003540:	f003 0310 	and.w	r3, r3, #16
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 813e 	beq.w	80037c6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	2210      	movs	r2, #16
 8003550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	f040 80b6 	bne.w	80036ce <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800356e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 8150 	beq.w	8003818 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800357e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003582:	429a      	cmp	r2, r3
 8003584:	f080 8148 	bcs.w	8003818 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800358e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003596:	69db      	ldr	r3, [r3, #28]
 8003598:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800359c:	f000 8086 	beq.w	80036ac <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80035ac:	e853 3f00 	ldrex	r3, [r3]
 80035b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035ca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035ce:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1da      	bne.n	80035a0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	3308      	adds	r3, #8
 80035f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035f4:	e853 3f00 	ldrex	r3, [r3]
 80035f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fc:	f023 0301 	bic.w	r3, r3, #1
 8003600:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	3308      	adds	r3, #8
 800360a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800360e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003612:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003614:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003616:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800361a:	e841 2300 	strex	r3, r2, [r1]
 800361e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1e1      	bne.n	80035ea <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	3308      	adds	r3, #8
 800362c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003630:	e853 3f00 	ldrex	r3, [r3]
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003636:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003638:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800363c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	3308      	adds	r3, #8
 8003646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800364a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800364c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800364e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003650:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003652:	e841 2300 	strex	r3, r2, [r1]
 8003656:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003658:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800365a:	2b00      	cmp	r3, #0
 800365c:	d1e3      	bne.n	8003626 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2220      	movs	r2, #32
 8003662:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003674:	e853 3f00 	ldrex	r3, [r3]
 8003678:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800367a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800367c:	f023 0310 	bic.w	r3, r3, #16
 8003680:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	461a      	mov	r2, r3
 800368a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800368e:	65bb      	str	r3, [r7, #88]	; 0x58
 8003690:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003692:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003694:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003696:	e841 2300 	strex	r3, r2, [r1]
 800369a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800369c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1e4      	bne.n	800366c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fea2 	bl	80013f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	b29b      	uxth	r3, r3
 80036c4:	4619      	mov	r1, r3
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f8c2 	bl	8003850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036cc:	e0a4      	b.n	8003818 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036da:	b29b      	uxth	r3, r3
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	f000 8096 	beq.w	800381c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 80036f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8091 	beq.w	800381c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003700:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003702:	e853 3f00 	ldrex	r3, [r3]
 8003706:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800370a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800370e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800371c:	647b      	str	r3, [r7, #68]	; 0x44
 800371e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003720:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003722:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003724:	e841 2300 	strex	r3, r2, [r1]
 8003728:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800372a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1e4      	bne.n	80036fa <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	3308      	adds	r3, #8
 8003736:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003738:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800373a:	e853 3f00 	ldrex	r3, [r3]
 800373e:	623b      	str	r3, [r7, #32]
   return(result);
 8003740:	6a3b      	ldr	r3, [r7, #32]
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	3308      	adds	r3, #8
 8003750:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003754:	633a      	str	r2, [r7, #48]	; 0x30
 8003756:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800375a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375c:	e841 2300 	strex	r3, r2, [r1]
 8003760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1e3      	bne.n	8003730 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2220      	movs	r2, #32
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2200      	movs	r2, #0
 8003774:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	60fb      	str	r3, [r7, #12]
   return(result);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f023 0310 	bic.w	r3, r3, #16
 8003790:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a2:	69b9      	ldr	r1, [r7, #24]
 80037a4:	69fa      	ldr	r2, [r7, #28]
 80037a6:	e841 2300 	strex	r3, r2, [r1]
 80037aa:	617b      	str	r3, [r7, #20]
   return(result);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1e4      	bne.n	800377c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2202      	movs	r2, #2
 80037b6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80037b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f846 	bl	8003850 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037c4:	e02a      	b.n	800381c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00e      	beq.n	80037f0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d008      	beq.n	80037f0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d01c      	beq.n	8003820 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	4798      	blx	r3
    }
    return;
 80037ee:	e017      	b.n	8003820 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_UART_IRQHandler+0x59e>
 80037fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003800:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00c      	beq.n	8003822 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fd71 	bl	80042f0 <UART_EndTransmit_IT>
    return;
 800380e:	e008      	b.n	8003822 <HAL_UART_IRQHandler+0x59e>
      return;
 8003810:	bf00      	nop
 8003812:	e006      	b.n	8003822 <HAL_UART_IRQHandler+0x59e>
    return;
 8003814:	bf00      	nop
 8003816:	e004      	b.n	8003822 <HAL_UART_IRQHandler+0x59e>
      return;
 8003818:	bf00      	nop
 800381a:	e002      	b.n	8003822 <HAL_UART_IRQHandler+0x59e>
      return;
 800381c:	bf00      	nop
 800381e:	e000      	b.n	8003822 <HAL_UART_IRQHandler+0x59e>
    return;
 8003820:	bf00      	nop
  }

}
 8003822:	37e8      	adds	r7, #232	; 0xe8
 8003824:	46bd      	mov	sp, r7
 8003826:	bd80      	pop	{r7, pc}

08003828 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr

0800383c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800383c:	b480      	push	{r7}
 800383e:	b083      	sub	sp, #12
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003844:	bf00      	nop
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b088      	sub	sp, #32
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003870:	2300      	movs	r3, #0
 8003872:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689a      	ldr	r2, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	431a      	orrs	r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	695b      	ldr	r3, [r3, #20]
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	4313      	orrs	r3, r2
 800388a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	4ba6      	ldr	r3, [pc, #664]	; (8003b2c <UART_SetConfig+0x2c4>)
 8003894:	4013      	ands	r3, r2
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	6812      	ldr	r2, [r2, #0]
 800389a:	6979      	ldr	r1, [r7, #20]
 800389c:	430b      	orrs	r3, r1
 800389e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	430a      	orrs	r2, r1
 80038b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	699b      	ldr	r3, [r3, #24]
 80038ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	697a      	ldr	r2, [r7, #20]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a94      	ldr	r2, [pc, #592]	; (8003b30 <UART_SetConfig+0x2c8>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d120      	bne.n	8003926 <UART_SetConfig+0xbe>
 80038e4:	4b93      	ldr	r3, [pc, #588]	; (8003b34 <UART_SetConfig+0x2cc>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ea:	f003 0303 	and.w	r3, r3, #3
 80038ee:	2b03      	cmp	r3, #3
 80038f0:	d816      	bhi.n	8003920 <UART_SetConfig+0xb8>
 80038f2:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <UART_SetConfig+0x90>)
 80038f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f8:	08003909 	.word	0x08003909
 80038fc:	08003915 	.word	0x08003915
 8003900:	0800390f 	.word	0x0800390f
 8003904:	0800391b 	.word	0x0800391b
 8003908:	2301      	movs	r3, #1
 800390a:	77fb      	strb	r3, [r7, #31]
 800390c:	e150      	b.n	8003bb0 <UART_SetConfig+0x348>
 800390e:	2302      	movs	r3, #2
 8003910:	77fb      	strb	r3, [r7, #31]
 8003912:	e14d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003914:	2304      	movs	r3, #4
 8003916:	77fb      	strb	r3, [r7, #31]
 8003918:	e14a      	b.n	8003bb0 <UART_SetConfig+0x348>
 800391a:	2308      	movs	r3, #8
 800391c:	77fb      	strb	r3, [r7, #31]
 800391e:	e147      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003920:	2310      	movs	r3, #16
 8003922:	77fb      	strb	r3, [r7, #31]
 8003924:	e144      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a83      	ldr	r2, [pc, #524]	; (8003b38 <UART_SetConfig+0x2d0>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d132      	bne.n	8003996 <UART_SetConfig+0x12e>
 8003930:	4b80      	ldr	r3, [pc, #512]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003936:	f003 030c 	and.w	r3, r3, #12
 800393a:	2b0c      	cmp	r3, #12
 800393c:	d828      	bhi.n	8003990 <UART_SetConfig+0x128>
 800393e:	a201      	add	r2, pc, #4	; (adr r2, 8003944 <UART_SetConfig+0xdc>)
 8003940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003944:	08003979 	.word	0x08003979
 8003948:	08003991 	.word	0x08003991
 800394c:	08003991 	.word	0x08003991
 8003950:	08003991 	.word	0x08003991
 8003954:	08003985 	.word	0x08003985
 8003958:	08003991 	.word	0x08003991
 800395c:	08003991 	.word	0x08003991
 8003960:	08003991 	.word	0x08003991
 8003964:	0800397f 	.word	0x0800397f
 8003968:	08003991 	.word	0x08003991
 800396c:	08003991 	.word	0x08003991
 8003970:	08003991 	.word	0x08003991
 8003974:	0800398b 	.word	0x0800398b
 8003978:	2300      	movs	r3, #0
 800397a:	77fb      	strb	r3, [r7, #31]
 800397c:	e118      	b.n	8003bb0 <UART_SetConfig+0x348>
 800397e:	2302      	movs	r3, #2
 8003980:	77fb      	strb	r3, [r7, #31]
 8003982:	e115      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003984:	2304      	movs	r3, #4
 8003986:	77fb      	strb	r3, [r7, #31]
 8003988:	e112      	b.n	8003bb0 <UART_SetConfig+0x348>
 800398a:	2308      	movs	r3, #8
 800398c:	77fb      	strb	r3, [r7, #31]
 800398e:	e10f      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003990:	2310      	movs	r3, #16
 8003992:	77fb      	strb	r3, [r7, #31]
 8003994:	e10c      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a68      	ldr	r2, [pc, #416]	; (8003b3c <UART_SetConfig+0x2d4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d120      	bne.n	80039e2 <UART_SetConfig+0x17a>
 80039a0:	4b64      	ldr	r3, [pc, #400]	; (8003b34 <UART_SetConfig+0x2cc>)
 80039a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039aa:	2b30      	cmp	r3, #48	; 0x30
 80039ac:	d013      	beq.n	80039d6 <UART_SetConfig+0x16e>
 80039ae:	2b30      	cmp	r3, #48	; 0x30
 80039b0:	d814      	bhi.n	80039dc <UART_SetConfig+0x174>
 80039b2:	2b20      	cmp	r3, #32
 80039b4:	d009      	beq.n	80039ca <UART_SetConfig+0x162>
 80039b6:	2b20      	cmp	r3, #32
 80039b8:	d810      	bhi.n	80039dc <UART_SetConfig+0x174>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <UART_SetConfig+0x15c>
 80039be:	2b10      	cmp	r3, #16
 80039c0:	d006      	beq.n	80039d0 <UART_SetConfig+0x168>
 80039c2:	e00b      	b.n	80039dc <UART_SetConfig+0x174>
 80039c4:	2300      	movs	r3, #0
 80039c6:	77fb      	strb	r3, [r7, #31]
 80039c8:	e0f2      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039ca:	2302      	movs	r3, #2
 80039cc:	77fb      	strb	r3, [r7, #31]
 80039ce:	e0ef      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039d0:	2304      	movs	r3, #4
 80039d2:	77fb      	strb	r3, [r7, #31]
 80039d4:	e0ec      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039d6:	2308      	movs	r3, #8
 80039d8:	77fb      	strb	r3, [r7, #31]
 80039da:	e0e9      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039dc:	2310      	movs	r3, #16
 80039de:	77fb      	strb	r3, [r7, #31]
 80039e0:	e0e6      	b.n	8003bb0 <UART_SetConfig+0x348>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a56      	ldr	r2, [pc, #344]	; (8003b40 <UART_SetConfig+0x2d8>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d120      	bne.n	8003a2e <UART_SetConfig+0x1c6>
 80039ec:	4b51      	ldr	r3, [pc, #324]	; (8003b34 <UART_SetConfig+0x2cc>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80039f6:	2bc0      	cmp	r3, #192	; 0xc0
 80039f8:	d013      	beq.n	8003a22 <UART_SetConfig+0x1ba>
 80039fa:	2bc0      	cmp	r3, #192	; 0xc0
 80039fc:	d814      	bhi.n	8003a28 <UART_SetConfig+0x1c0>
 80039fe:	2b80      	cmp	r3, #128	; 0x80
 8003a00:	d009      	beq.n	8003a16 <UART_SetConfig+0x1ae>
 8003a02:	2b80      	cmp	r3, #128	; 0x80
 8003a04:	d810      	bhi.n	8003a28 <UART_SetConfig+0x1c0>
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d002      	beq.n	8003a10 <UART_SetConfig+0x1a8>
 8003a0a:	2b40      	cmp	r3, #64	; 0x40
 8003a0c:	d006      	beq.n	8003a1c <UART_SetConfig+0x1b4>
 8003a0e:	e00b      	b.n	8003a28 <UART_SetConfig+0x1c0>
 8003a10:	2300      	movs	r3, #0
 8003a12:	77fb      	strb	r3, [r7, #31]
 8003a14:	e0cc      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a16:	2302      	movs	r3, #2
 8003a18:	77fb      	strb	r3, [r7, #31]
 8003a1a:	e0c9      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	77fb      	strb	r3, [r7, #31]
 8003a20:	e0c6      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a22:	2308      	movs	r3, #8
 8003a24:	77fb      	strb	r3, [r7, #31]
 8003a26:	e0c3      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e0c0      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a44      	ldr	r2, [pc, #272]	; (8003b44 <UART_SetConfig+0x2dc>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d125      	bne.n	8003a84 <UART_SetConfig+0x21c>
 8003a38:	4b3e      	ldr	r3, [pc, #248]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a46:	d017      	beq.n	8003a78 <UART_SetConfig+0x210>
 8003a48:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a4c:	d817      	bhi.n	8003a7e <UART_SetConfig+0x216>
 8003a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a52:	d00b      	beq.n	8003a6c <UART_SetConfig+0x204>
 8003a54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a58:	d811      	bhi.n	8003a7e <UART_SetConfig+0x216>
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <UART_SetConfig+0x1fe>
 8003a5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a62:	d006      	beq.n	8003a72 <UART_SetConfig+0x20a>
 8003a64:	e00b      	b.n	8003a7e <UART_SetConfig+0x216>
 8003a66:	2300      	movs	r3, #0
 8003a68:	77fb      	strb	r3, [r7, #31]
 8003a6a:	e0a1      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	77fb      	strb	r3, [r7, #31]
 8003a70:	e09e      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a72:	2304      	movs	r3, #4
 8003a74:	77fb      	strb	r3, [r7, #31]
 8003a76:	e09b      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a78:	2308      	movs	r3, #8
 8003a7a:	77fb      	strb	r3, [r7, #31]
 8003a7c:	e098      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e095      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	; (8003b48 <UART_SetConfig+0x2e0>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d125      	bne.n	8003ada <UART_SetConfig+0x272>
 8003a8e:	4b29      	ldr	r3, [pc, #164]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a94:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a98:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a9c:	d017      	beq.n	8003ace <UART_SetConfig+0x266>
 8003a9e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003aa2:	d817      	bhi.n	8003ad4 <UART_SetConfig+0x26c>
 8003aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aa8:	d00b      	beq.n	8003ac2 <UART_SetConfig+0x25a>
 8003aaa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003aae:	d811      	bhi.n	8003ad4 <UART_SetConfig+0x26c>
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <UART_SetConfig+0x254>
 8003ab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab8:	d006      	beq.n	8003ac8 <UART_SetConfig+0x260>
 8003aba:	e00b      	b.n	8003ad4 <UART_SetConfig+0x26c>
 8003abc:	2301      	movs	r3, #1
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e076      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ac2:	2302      	movs	r3, #2
 8003ac4:	77fb      	strb	r3, [r7, #31]
 8003ac6:	e073      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ac8:	2304      	movs	r3, #4
 8003aca:	77fb      	strb	r3, [r7, #31]
 8003acc:	e070      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ace:	2308      	movs	r3, #8
 8003ad0:	77fb      	strb	r3, [r7, #31]
 8003ad2:	e06d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	77fb      	strb	r3, [r7, #31]
 8003ad8:	e06a      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1b      	ldr	r2, [pc, #108]	; (8003b4c <UART_SetConfig+0x2e4>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d138      	bne.n	8003b56 <UART_SetConfig+0x2ee>
 8003ae4:	4b13      	ldr	r3, [pc, #76]	; (8003b34 <UART_SetConfig+0x2cc>)
 8003ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003aee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af2:	d017      	beq.n	8003b24 <UART_SetConfig+0x2bc>
 8003af4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003af8:	d82a      	bhi.n	8003b50 <UART_SetConfig+0x2e8>
 8003afa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003afe:	d00b      	beq.n	8003b18 <UART_SetConfig+0x2b0>
 8003b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b04:	d824      	bhi.n	8003b50 <UART_SetConfig+0x2e8>
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d003      	beq.n	8003b12 <UART_SetConfig+0x2aa>
 8003b0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b0e:	d006      	beq.n	8003b1e <UART_SetConfig+0x2b6>
 8003b10:	e01e      	b.n	8003b50 <UART_SetConfig+0x2e8>
 8003b12:	2300      	movs	r3, #0
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e04b      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b18:	2302      	movs	r3, #2
 8003b1a:	77fb      	strb	r3, [r7, #31]
 8003b1c:	e048      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b1e:	2304      	movs	r3, #4
 8003b20:	77fb      	strb	r3, [r7, #31]
 8003b22:	e045      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b24:	2308      	movs	r3, #8
 8003b26:	77fb      	strb	r3, [r7, #31]
 8003b28:	e042      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b2a:	bf00      	nop
 8003b2c:	efff69f3 	.word	0xefff69f3
 8003b30:	40011000 	.word	0x40011000
 8003b34:	40023800 	.word	0x40023800
 8003b38:	40004400 	.word	0x40004400
 8003b3c:	40004800 	.word	0x40004800
 8003b40:	40004c00 	.word	0x40004c00
 8003b44:	40005000 	.word	0x40005000
 8003b48:	40011400 	.word	0x40011400
 8003b4c:	40007800 	.word	0x40007800
 8003b50:	2310      	movs	r3, #16
 8003b52:	77fb      	strb	r3, [r7, #31]
 8003b54:	e02c      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a72      	ldr	r2, [pc, #456]	; (8003d24 <UART_SetConfig+0x4bc>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d125      	bne.n	8003bac <UART_SetConfig+0x344>
 8003b60:	4b71      	ldr	r3, [pc, #452]	; (8003d28 <UART_SetConfig+0x4c0>)
 8003b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003b6a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b6e:	d017      	beq.n	8003ba0 <UART_SetConfig+0x338>
 8003b70:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003b74:	d817      	bhi.n	8003ba6 <UART_SetConfig+0x33e>
 8003b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b7a:	d00b      	beq.n	8003b94 <UART_SetConfig+0x32c>
 8003b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b80:	d811      	bhi.n	8003ba6 <UART_SetConfig+0x33e>
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d003      	beq.n	8003b8e <UART_SetConfig+0x326>
 8003b86:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003b8a:	d006      	beq.n	8003b9a <UART_SetConfig+0x332>
 8003b8c:	e00b      	b.n	8003ba6 <UART_SetConfig+0x33e>
 8003b8e:	2300      	movs	r3, #0
 8003b90:	77fb      	strb	r3, [r7, #31]
 8003b92:	e00d      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b94:	2302      	movs	r3, #2
 8003b96:	77fb      	strb	r3, [r7, #31]
 8003b98:	e00a      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003b9a:	2304      	movs	r3, #4
 8003b9c:	77fb      	strb	r3, [r7, #31]
 8003b9e:	e007      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ba0:	2308      	movs	r3, #8
 8003ba2:	77fb      	strb	r3, [r7, #31]
 8003ba4:	e004      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003ba6:	2310      	movs	r3, #16
 8003ba8:	77fb      	strb	r3, [r7, #31]
 8003baa:	e001      	b.n	8003bb0 <UART_SetConfig+0x348>
 8003bac:	2310      	movs	r3, #16
 8003bae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	69db      	ldr	r3, [r3, #28]
 8003bb4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb8:	d15b      	bne.n	8003c72 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003bba:	7ffb      	ldrb	r3, [r7, #31]
 8003bbc:	2b08      	cmp	r3, #8
 8003bbe:	d828      	bhi.n	8003c12 <UART_SetConfig+0x3aa>
 8003bc0:	a201      	add	r2, pc, #4	; (adr r2, 8003bc8 <UART_SetConfig+0x360>)
 8003bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc6:	bf00      	nop
 8003bc8:	08003bed 	.word	0x08003bed
 8003bcc:	08003bf5 	.word	0x08003bf5
 8003bd0:	08003bfd 	.word	0x08003bfd
 8003bd4:	08003c13 	.word	0x08003c13
 8003bd8:	08003c03 	.word	0x08003c03
 8003bdc:	08003c13 	.word	0x08003c13
 8003be0:	08003c13 	.word	0x08003c13
 8003be4:	08003c13 	.word	0x08003c13
 8003be8:	08003c0b 	.word	0x08003c0b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bec:	f7fe fb0a 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003bf0:	61b8      	str	r0, [r7, #24]
        break;
 8003bf2:	e013      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bf4:	f7fe fb1a 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 8003bf8:	61b8      	str	r0, [r7, #24]
        break;
 8003bfa:	e00f      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	; (8003d2c <UART_SetConfig+0x4c4>)
 8003bfe:	61bb      	str	r3, [r7, #24]
        break;
 8003c00:	e00c      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c02:	f7fe fa2d 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003c06:	61b8      	str	r0, [r7, #24]
        break;
 8003c08:	e008      	b.n	8003c1c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c0e:	61bb      	str	r3, [r7, #24]
        break;
 8003c10:	e004      	b.n	8003c1c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	77bb      	strb	r3, [r7, #30]
        break;
 8003c1a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c1c:	69bb      	ldr	r3, [r7, #24]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d074      	beq.n	8003d0c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	005a      	lsls	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	085b      	lsrs	r3, r3, #1
 8003c2c:	441a      	add	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c36:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	2b0f      	cmp	r3, #15
 8003c3c:	d916      	bls.n	8003c6c <UART_SetConfig+0x404>
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c44:	d212      	bcs.n	8003c6c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	f023 030f 	bic.w	r3, r3, #15
 8003c4e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	085b      	lsrs	r3, r3, #1
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	f003 0307 	and.w	r3, r3, #7
 8003c5a:	b29a      	uxth	r2, r3
 8003c5c:	89fb      	ldrh	r3, [r7, #14]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	89fa      	ldrh	r2, [r7, #14]
 8003c68:	60da      	str	r2, [r3, #12]
 8003c6a:	e04f      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c6c:	2301      	movs	r3, #1
 8003c6e:	77bb      	strb	r3, [r7, #30]
 8003c70:	e04c      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c72:	7ffb      	ldrb	r3, [r7, #31]
 8003c74:	2b08      	cmp	r3, #8
 8003c76:	d828      	bhi.n	8003cca <UART_SetConfig+0x462>
 8003c78:	a201      	add	r2, pc, #4	; (adr r2, 8003c80 <UART_SetConfig+0x418>)
 8003c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c7e:	bf00      	nop
 8003c80:	08003ca5 	.word	0x08003ca5
 8003c84:	08003cad 	.word	0x08003cad
 8003c88:	08003cb5 	.word	0x08003cb5
 8003c8c:	08003ccb 	.word	0x08003ccb
 8003c90:	08003cbb 	.word	0x08003cbb
 8003c94:	08003ccb 	.word	0x08003ccb
 8003c98:	08003ccb 	.word	0x08003ccb
 8003c9c:	08003ccb 	.word	0x08003ccb
 8003ca0:	08003cc3 	.word	0x08003cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ca4:	f7fe faae 	bl	8002204 <HAL_RCC_GetPCLK1Freq>
 8003ca8:	61b8      	str	r0, [r7, #24]
        break;
 8003caa:	e013      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cac:	f7fe fabe 	bl	800222c <HAL_RCC_GetPCLK2Freq>
 8003cb0:	61b8      	str	r0, [r7, #24]
        break;
 8003cb2:	e00f      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cb4:	4b1d      	ldr	r3, [pc, #116]	; (8003d2c <UART_SetConfig+0x4c4>)
 8003cb6:	61bb      	str	r3, [r7, #24]
        break;
 8003cb8:	e00c      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cba:	f7fe f9d1 	bl	8002060 <HAL_RCC_GetSysClockFreq>
 8003cbe:	61b8      	str	r0, [r7, #24]
        break;
 8003cc0:	e008      	b.n	8003cd4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cc6:	61bb      	str	r3, [r7, #24]
        break;
 8003cc8:	e004      	b.n	8003cd4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	77bb      	strb	r3, [r7, #30]
        break;
 8003cd2:	bf00      	nop
    }

    if (pclk != 0U)
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d018      	beq.n	8003d0c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	085a      	lsrs	r2, r3, #1
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	441a      	add	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	2b0f      	cmp	r3, #15
 8003cf2:	d909      	bls.n	8003d08 <UART_SetConfig+0x4a0>
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cfa:	d205      	bcs.n	8003d08 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cfc:	693b      	ldr	r3, [r7, #16]
 8003cfe:	b29a      	uxth	r2, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	60da      	str	r2, [r3, #12]
 8003d06:	e001      	b.n	8003d0c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2200      	movs	r2, #0
 8003d10:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2200      	movs	r2, #0
 8003d16:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d18:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3720      	adds	r7, #32
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	bf00      	nop
 8003d24:	40007c00 	.word	0x40007c00
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	00f42400 	.word	0x00f42400

08003d30 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	f003 0301 	and.w	r3, r3, #1
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00a      	beq.n	8003d5a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5e:	f003 0302 	and.w	r3, r3, #2
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d00a      	beq.n	8003d7c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d80:	f003 0304 	and.w	r3, r3, #4
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00a      	beq.n	8003d9e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da2:	f003 0308 	and.w	r3, r3, #8
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00a      	beq.n	8003dc0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d01a      	beq.n	8003e46 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e2e:	d10a      	bne.n	8003e46 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	430a      	orrs	r2, r1
 8003e44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00a      	beq.n	8003e68 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	685b      	ldr	r3, [r3, #4]
 8003e58:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	430a      	orrs	r2, r1
 8003e66:	605a      	str	r2, [r3, #4]
  }
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af02      	add	r7, sp, #8
 8003e7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e84:	f7fd f9c6 	bl	8001214 <HAL_GetTick>
 8003e88:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0308 	and.w	r3, r3, #8
 8003e94:	2b08      	cmp	r3, #8
 8003e96:	d10e      	bne.n	8003eb6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e98:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e9c:	9300      	str	r3, [sp, #0]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ea6:	6878      	ldr	r0, [r7, #4]
 8003ea8:	f000 f81b 	bl	8003ee2 <UART_WaitOnFlagUntilTimeout>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d001      	beq.n	8003eb6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eb2:	2303      	movs	r3, #3
 8003eb4:	e011      	b.n	8003eda <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2220      	movs	r2, #32
 8003ec0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3710      	adds	r7, #16
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b09c      	sub	sp, #112	; 0x70
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	603b      	str	r3, [r7, #0]
 8003eee:	4613      	mov	r3, r2
 8003ef0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ef2:	e0a7      	b.n	8004044 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ef4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	f000 80a3 	beq.w	8004044 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003efe:	f7fd f989 	bl	8001214 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003f0a:	429a      	cmp	r2, r3
 8003f0c:	d302      	bcc.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x32>
 8003f0e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d13f      	bne.n	8003f94 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f1c:	e853 3f00 	ldrex	r3, [r3]
 8003f20:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003f22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f24:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f28:	667b      	str	r3, [r7, #100]	; 0x64
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	461a      	mov	r2, r3
 8003f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003f32:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f34:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f36:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003f38:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003f3a:	e841 2300 	strex	r3, r2, [r1]
 8003f3e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003f40:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e6      	bne.n	8003f14 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	3308      	adds	r3, #8
 8003f4c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f58:	f023 0301 	bic.w	r3, r3, #1
 8003f5c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f66:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f68:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e5      	bne.n	8003f46 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e068      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	f003 0304 	and.w	r3, r3, #4
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d050      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69db      	ldr	r3, [r3, #28]
 8003fa8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003fb0:	d148      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003fba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc4:	e853 3f00 	ldrex	r3, [r3]
 8003fc8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fcc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
 8003fdc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fde:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe2:	e841 2300 	strex	r3, r2, [r1]
 8003fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1e6      	bne.n	8003fbc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	3308      	adds	r3, #8
 8003ff4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	e853 3f00 	ldrex	r3, [r3]
 8003ffc:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f023 0301 	bic.w	r3, r3, #1
 8004004:	66bb      	str	r3, [r7, #104]	; 0x68
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3308      	adds	r3, #8
 800400c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800400e:	623a      	str	r2, [r7, #32]
 8004010:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	69f9      	ldr	r1, [r7, #28]
 8004014:	6a3a      	ldr	r2, [r7, #32]
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	61bb      	str	r3, [r7, #24]
   return(result);
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e5      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	2220      	movs	r2, #32
 8004026:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e010      	b.n	8004066 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69da      	ldr	r2, [r3, #28]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	f43f af48 	beq.w	8003ef4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3770      	adds	r7, #112	; 0x70
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
	...

08004070 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004070:	b480      	push	{r7}
 8004072:	b097      	sub	sp, #92	; 0x5c
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	4613      	mov	r3, r2
 800407c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	88fa      	ldrh	r2, [r7, #6]
 8004088:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	88fa      	ldrh	r2, [r7, #6]
 8004090:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	689b      	ldr	r3, [r3, #8]
 800409e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040a2:	d10e      	bne.n	80040c2 <UART_Start_Receive_IT+0x52>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <UART_Start_Receive_IT+0x48>
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	f240 12ff 	movw	r2, #511	; 0x1ff
 80040b2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b6:	e02d      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	22ff      	movs	r2, #255	; 0xff
 80040bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c0:	e028      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10d      	bne.n	80040e6 <UART_Start_Receive_IT+0x76>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	691b      	ldr	r3, [r3, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <UART_Start_Receive_IT+0x6c>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040da:	e01b      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	227f      	movs	r2, #127	; 0x7f
 80040e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040e4:	e016      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040ee:	d10d      	bne.n	800410c <UART_Start_Receive_IT+0x9c>
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d104      	bne.n	8004102 <UART_Start_Receive_IT+0x92>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	227f      	movs	r2, #127	; 0x7f
 80040fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004100:	e008      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	223f      	movs	r2, #63	; 0x3f
 8004106:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800410a:	e003      	b.n	8004114 <UART_Start_Receive_IT+0xa4>
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	2200      	movs	r2, #0
 8004110:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2200      	movs	r2, #0
 8004118:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2222      	movs	r2, #34	; 0x22
 8004120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	3308      	adds	r3, #8
 800412a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800412c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800412e:	e853 3f00 	ldrex	r3, [r3]
 8004132:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004136:	f043 0301 	orr.w	r3, r3, #1
 800413a:	657b      	str	r3, [r7, #84]	; 0x54
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	3308      	adds	r3, #8
 8004142:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004144:	64ba      	str	r2, [r7, #72]	; 0x48
 8004146:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004148:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800414a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800414c:	e841 2300 	strex	r3, r2, [r1]
 8004150:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004152:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004154:	2b00      	cmp	r3, #0
 8004156:	d1e5      	bne.n	8004124 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004160:	d107      	bne.n	8004172 <UART_Start_Receive_IT+0x102>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d103      	bne.n	8004172 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a21      	ldr	r2, [pc, #132]	; (80041f4 <UART_Start_Receive_IT+0x184>)
 800416e:	669a      	str	r2, [r3, #104]	; 0x68
 8004170:	e002      	b.n	8004178 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	4a20      	ldr	r2, [pc, #128]	; (80041f8 <UART_Start_Receive_IT+0x188>)
 8004176:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	691b      	ldr	r3, [r3, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d019      	beq.n	80041b4 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800418e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004190:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004194:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	461a      	mov	r2, r3
 800419c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80041a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80041a6:	e841 2300 	strex	r3, r2, [r1]
 80041aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80041ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d1e6      	bne.n	8004180 <UART_Start_Receive_IT+0x110>
 80041b2:	e018      	b.n	80041e6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	697b      	ldr	r3, [r7, #20]
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	613b      	str	r3, [r7, #16]
   return(result);
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f043 0320 	orr.w	r3, r3, #32
 80041c8:	653b      	str	r3, [r7, #80]	; 0x50
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	461a      	mov	r2, r3
 80041d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041d2:	623b      	str	r3, [r7, #32]
 80041d4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	69f9      	ldr	r1, [r7, #28]
 80041d8:	6a3a      	ldr	r2, [r7, #32]
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	61bb      	str	r3, [r7, #24]
   return(result);
 80041e0:	69bb      	ldr	r3, [r7, #24]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e6      	bne.n	80041b4 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	375c      	adds	r7, #92	; 0x5c
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	080044ab 	.word	0x080044ab
 80041f8:	08004345 	.word	0x08004345

080041fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b095      	sub	sp, #84	; 0x54
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800420c:	e853 3f00 	ldrex	r3, [r3]
 8004210:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004214:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004218:	64fb      	str	r3, [r7, #76]	; 0x4c
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004222:	643b      	str	r3, [r7, #64]	; 0x40
 8004224:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004226:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004228:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800422a:	e841 2300 	strex	r3, r2, [r1]
 800422e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1e6      	bne.n	8004204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3308      	adds	r3, #8
 800423c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800423e:	6a3b      	ldr	r3, [r7, #32]
 8004240:	e853 3f00 	ldrex	r3, [r3]
 8004244:	61fb      	str	r3, [r7, #28]
   return(result);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	f023 0301 	bic.w	r3, r3, #1
 800424c:	64bb      	str	r3, [r7, #72]	; 0x48
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004256:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004258:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800425a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800425c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800425e:	e841 2300 	strex	r3, r2, [r1]
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1e5      	bne.n	8004236 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800426e:	2b01      	cmp	r3, #1
 8004270:	d118      	bne.n	80042a4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	e853 3f00 	ldrex	r3, [r3]
 800427e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0310 	bic.w	r3, r3, #16
 8004286:	647b      	str	r3, [r7, #68]	; 0x44
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	461a      	mov	r2, r3
 800428e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004290:	61bb      	str	r3, [r7, #24]
 8004292:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004294:	6979      	ldr	r1, [r7, #20]
 8004296:	69ba      	ldr	r2, [r7, #24]
 8004298:	e841 2300 	strex	r3, r2, [r1]
 800429c:	613b      	str	r3, [r7, #16]
   return(result);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d1e6      	bne.n	8004272 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2220      	movs	r2, #32
 80042a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2200      	movs	r2, #0
 80042b0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2200      	movs	r2, #0
 80042b6:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042b8:	bf00      	nop
 80042ba:	3754      	adds	r7, #84	; 0x54
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b084      	sub	sp, #16
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	2200      	movs	r2, #0
 80042de:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff faaa 	bl	800383c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042e8:	bf00      	nop
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b088      	sub	sp, #32
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	e853 3f00 	ldrex	r3, [r3]
 8004304:	60bb      	str	r3, [r7, #8]
   return(result);
 8004306:	68bb      	ldr	r3, [r7, #8]
 8004308:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800430c:	61fb      	str	r3, [r7, #28]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	69fb      	ldr	r3, [r7, #28]
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431a:	6979      	ldr	r1, [r7, #20]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	e841 2300 	strex	r3, r2, [r1]
 8004322:	613b      	str	r3, [r7, #16]
   return(result);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d1e6      	bne.n	80042f8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2220      	movs	r2, #32
 800432e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2200      	movs	r2, #0
 8004334:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f7ff fa76 	bl	8003828 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800433c:	bf00      	nop
 800433e:	3720      	adds	r7, #32
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b096      	sub	sp, #88	; 0x58
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004352:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800435c:	2b22      	cmp	r3, #34	; 0x22
 800435e:	f040 8098 	bne.w	8004492 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004368:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800436c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004370:	b2d9      	uxtb	r1, r3
 8004372:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004376:	b2da      	uxtb	r2, r3
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800437c:	400a      	ands	r2, r1
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004386:	1c5a      	adds	r2, r3, #1
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004392:	b29b      	uxth	r3, r3
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043a4:	b29b      	uxth	r3, r3
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d17b      	bne.n	80044a2 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	e853 3f00 	ldrex	r3, [r3]
 80043b6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80043b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043be:	653b      	str	r3, [r7, #80]	; 0x50
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	461a      	mov	r2, r3
 80043c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043c8:	647b      	str	r3, [r7, #68]	; 0x44
 80043ca:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043cc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80043ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80043d0:	e841 2300 	strex	r3, r2, [r1]
 80043d4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80043d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d1e6      	bne.n	80043aa <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	3308      	adds	r3, #8
 80043e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	623b      	str	r3, [r7, #32]
   return(result);
 80043ec:	6a3b      	ldr	r3, [r7, #32]
 80043ee:	f023 0301 	bic.w	r3, r3, #1
 80043f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	3308      	adds	r3, #8
 80043fa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043fc:	633a      	str	r2, [r7, #48]	; 0x30
 80043fe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004402:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800440a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2220      	movs	r2, #32
 8004414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2200      	movs	r2, #0
 8004422:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004428:	2b01      	cmp	r3, #1
 800442a:	d12e      	bne.n	800448a <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	e853 3f00 	ldrex	r3, [r3]
 800443e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0310 	bic.w	r3, r3, #16
 8004446:	64bb      	str	r3, [r7, #72]	; 0x48
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	461a      	mov	r2, r3
 800444e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004454:	69b9      	ldr	r1, [r7, #24]
 8004456:	69fa      	ldr	r2, [r7, #28]
 8004458:	e841 2300 	strex	r3, r2, [r1]
 800445c:	617b      	str	r3, [r7, #20]
   return(result);
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1e6      	bne.n	8004432 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	69db      	ldr	r3, [r3, #28]
 800446a:	f003 0310 	and.w	r3, r3, #16
 800446e:	2b10      	cmp	r3, #16
 8004470:	d103      	bne.n	800447a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2210      	movs	r2, #16
 8004478:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004480:	4619      	mov	r1, r3
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7ff f9e4 	bl	8003850 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004488:	e00b      	b.n	80044a2 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc f97e 	bl	800078c <HAL_UART_RxCpltCallback>
}
 8004490:	e007      	b.n	80044a2 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	699a      	ldr	r2, [r3, #24]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f042 0208 	orr.w	r2, r2, #8
 80044a0:	619a      	str	r2, [r3, #24]
}
 80044a2:	bf00      	nop
 80044a4:	3758      	adds	r7, #88	; 0x58
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}

080044aa <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044aa:	b580      	push	{r7, lr}
 80044ac:	b096      	sub	sp, #88	; 0x58
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80044b8:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c2:	2b22      	cmp	r3, #34	; 0x22
 80044c4:	f040 8098 	bne.w	80045f8 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d6:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80044d8:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80044dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80044e0:	4013      	ands	r3, r2
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80044e6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ec:	1c9a      	adds	r2, r3, #2
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044f8:	b29b      	uxth	r3, r3
 80044fa:	3b01      	subs	r3, #1
 80044fc:	b29a      	uxth	r2, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800450a:	b29b      	uxth	r3, r3
 800450c:	2b00      	cmp	r3, #0
 800450e:	d17b      	bne.n	8004608 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004516:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004518:	e853 3f00 	ldrex	r3, [r3]
 800451c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004524:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	461a      	mov	r2, r3
 800452c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800452e:	643b      	str	r3, [r7, #64]	; 0x40
 8004530:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004532:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004534:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004536:	e841 2300 	strex	r3, r2, [r1]
 800453a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800453c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453e:	2b00      	cmp	r3, #0
 8004540:	d1e6      	bne.n	8004510 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	3308      	adds	r3, #8
 8004548:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454a:	6a3b      	ldr	r3, [r7, #32]
 800454c:	e853 3f00 	ldrex	r3, [r3]
 8004550:	61fb      	str	r3, [r7, #28]
   return(result);
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	f023 0301 	bic.w	r3, r3, #1
 8004558:	64bb      	str	r3, [r7, #72]	; 0x48
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3308      	adds	r3, #8
 8004560:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004562:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004566:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800456a:	e841 2300 	strex	r3, r2, [r1]
 800456e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	2b00      	cmp	r3, #0
 8004574:	d1e5      	bne.n	8004542 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2220      	movs	r2, #32
 800457a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458e:	2b01      	cmp	r3, #1
 8004590:	d12e      	bne.n	80045f0 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	e853 3f00 	ldrex	r3, [r3]
 80045a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f023 0310 	bic.w	r3, r3, #16
 80045ac:	647b      	str	r3, [r7, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ba:	6979      	ldr	r1, [r7, #20]
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	e841 2300 	strex	r3, r2, [r1]
 80045c2:	613b      	str	r3, [r7, #16]
   return(result);
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1e6      	bne.n	8004598 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69db      	ldr	r3, [r3, #28]
 80045d0:	f003 0310 	and.w	r3, r3, #16
 80045d4:	2b10      	cmp	r3, #16
 80045d6:	d103      	bne.n	80045e0 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	2210      	movs	r2, #16
 80045de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80045e6:	4619      	mov	r1, r3
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff f931 	bl	8003850 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ee:	e00b      	b.n	8004608 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7fc f8cb 	bl	800078c <HAL_UART_RxCpltCallback>
}
 80045f6:	e007      	b.n	8004608 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	699a      	ldr	r2, [r3, #24]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0208 	orr.w	r2, r2, #8
 8004606:	619a      	str	r2, [r3, #24]
}
 8004608:	bf00      	nop
 800460a:	3758      	adds	r7, #88	; 0x58
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}

08004610 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
 8004616:	4603      	mov	r3, r0
 8004618:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800461a:	2300      	movs	r3, #0
 800461c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800461e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004622:	2b84      	cmp	r3, #132	; 0x84
 8004624:	d005      	beq.n	8004632 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8004626:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	4413      	add	r3, r2
 800462e:	3303      	adds	r3, #3
 8004630:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004632:	68fb      	ldr	r3, [r7, #12]
}
 8004634:	4618      	mov	r0, r3
 8004636:	3714      	adds	r7, #20
 8004638:	46bd      	mov	sp, r7
 800463a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463e:	4770      	bx	lr

08004640 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8004644:	f000 fdf4 	bl	8005230 <vTaskStartScheduler>
  
  return osOK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	bd80      	pop	{r7, pc}

0800464e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800464e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004650:	b089      	sub	sp, #36	; 0x24
 8004652:	af04      	add	r7, sp, #16
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <osThreadCreate+0x54>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01c      	beq.n	80046a2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685c      	ldr	r4, [r3, #4]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	691e      	ldr	r6, [r3, #16]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800467a:	4618      	mov	r0, r3
 800467c:	f7ff ffc8 	bl	8004610 <makeFreeRtosPriority>
 8004680:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800468a:	9202      	str	r2, [sp, #8]
 800468c:	9301      	str	r3, [sp, #4]
 800468e:	9100      	str	r1, [sp, #0]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	4632      	mov	r2, r6
 8004694:	4629      	mov	r1, r5
 8004696:	4620      	mov	r0, r4
 8004698:	f000 fbe2 	bl	8004e60 <xTaskCreateStatic>
 800469c:	4603      	mov	r3, r0
 800469e:	60fb      	str	r3, [r7, #12]
 80046a0:	e01c      	b.n	80046dc <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	685c      	ldr	r4, [r3, #4]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046ae:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7ff ffaa 	bl	8004610 <makeFreeRtosPriority>
 80046bc:	4602      	mov	r2, r0
 80046be:	f107 030c 	add.w	r3, r7, #12
 80046c2:	9301      	str	r3, [sp, #4]
 80046c4:	9200      	str	r2, [sp, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	4632      	mov	r2, r6
 80046ca:	4629      	mov	r1, r5
 80046cc:	4620      	mov	r0, r4
 80046ce:	f000 fc2a 	bl	8004f26 <xTaskCreate>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d001      	beq.n	80046dc <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	e000      	b.n	80046de <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80046dc:	68fb      	ldr	r3, [r7, #12]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3714      	adds	r7, #20
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080046e6 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b084      	sub	sp, #16
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d001      	beq.n	80046fc <osDelay+0x16>
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	e000      	b.n	80046fe <osDelay+0x18>
 80046fc:	2301      	movs	r3, #1
 80046fe:	4618      	mov	r0, r3
 8004700:	f000 fd60 	bl	80051c4 <vTaskDelay>
  
  return osOK;
 8004704:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004706:	4618      	mov	r0, r3
 8004708:	3710      	adds	r7, #16
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f103 0208 	add.w	r2, r3, #8
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	f103 0208 	add.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	f103 0208 	add.w	r2, r3, #8
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2200      	movs	r2, #0
 8004740:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004742:	bf00      	nop
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
 8004770:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	1c5a      	adds	r2, r3, #1
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	601a      	str	r2, [r3, #0]
}
 80047a4:	bf00      	nop
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80047b0:	b480      	push	{r7}
 80047b2:	b085      	sub	sp, #20
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c6:	d103      	bne.n	80047d0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	60fb      	str	r3, [r7, #12]
 80047ce:	e00c      	b.n	80047ea <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	3308      	adds	r3, #8
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e002      	b.n	80047de <vListInsert+0x2e>
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d2f6      	bcs.n	80047d8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	685a      	ldr	r2, [r3, #4]
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	687a      	ldr	r2, [r7, #4]
 800480a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	1c5a      	adds	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	601a      	str	r2, [r3, #0]
}
 8004816:	bf00      	nop
 8004818:	3714      	adds	r7, #20
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr

08004822 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004822:	b480      	push	{r7}
 8004824:	b085      	sub	sp, #20
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	6892      	ldr	r2, [r2, #8]
 8004838:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	6852      	ldr	r2, [r2, #4]
 8004842:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	429a      	cmp	r2, r3
 800484c:	d103      	bne.n	8004856 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689a      	ldr	r2, [r3, #8]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2200      	movs	r2, #0
 800485a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	1e5a      	subs	r2, r3, #1
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3714      	adds	r7, #20
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
	...

08004878 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b084      	sub	sp, #16
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d10c      	bne.n	80048a6 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800488c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004890:	b672      	cpsid	i
 8004892:	f383 8811 	msr	BASEPRI, r3
 8004896:	f3bf 8f6f 	isb	sy
 800489a:	f3bf 8f4f 	dsb	sy
 800489e:	b662      	cpsie	i
 80048a0:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048a2:	bf00      	nop
 80048a4:	e7fe      	b.n	80048a4 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80048a6:	f001 fba9 	bl	8005ffc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681a      	ldr	r2, [r3, #0]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048b2:	68f9      	ldr	r1, [r7, #12]
 80048b4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048b6:	fb01 f303 	mul.w	r3, r1, r3
 80048ba:	441a      	add	r2, r3
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2200      	movs	r2, #0
 80048c4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048d6:	3b01      	subs	r3, #1
 80048d8:	68f9      	ldr	r1, [r7, #12]
 80048da:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80048dc:	fb01 f303 	mul.w	r3, r1, r3
 80048e0:	441a      	add	r2, r3
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	22ff      	movs	r2, #255	; 0xff
 80048ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	22ff      	movs	r2, #255	; 0xff
 80048f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d114      	bne.n	8004926 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d01a      	beq.n	800493a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	3310      	adds	r3, #16
 8004908:	4618      	mov	r0, r3
 800490a:	f000 feef 	bl	80056ec <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d012      	beq.n	800493a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <xQueueGenericReset+0xd0>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	e009      	b.n	800493a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	3310      	adds	r3, #16
 800492a:	4618      	mov	r0, r3
 800492c:	f7ff feef 	bl	800470e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	3324      	adds	r3, #36	; 0x24
 8004934:	4618      	mov	r0, r3
 8004936:	f7ff feea 	bl	800470e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800493a:	f001 fb93 	bl	8006064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800493e:	2301      	movs	r3, #1
}
 8004940:	4618      	mov	r0, r3
 8004942:	3710      	adds	r7, #16
 8004944:	46bd      	mov	sp, r7
 8004946:	bd80      	pop	{r7, pc}
 8004948:	e000ed04 	.word	0xe000ed04

0800494c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800494c:	b580      	push	{r7, lr}
 800494e:	b08a      	sub	sp, #40	; 0x28
 8004950:	af02      	add	r7, sp, #8
 8004952:	60f8      	str	r0, [r7, #12]
 8004954:	60b9      	str	r1, [r7, #8]
 8004956:	4613      	mov	r3, r2
 8004958:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <xQueueGenericCreate+0x2e>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	613b      	str	r3, [r7, #16]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004980:	2300      	movs	r3, #0
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e004      	b.n	8004990 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	68ba      	ldr	r2, [r7, #8]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	3348      	adds	r3, #72	; 0x48
 8004994:	4618      	mov	r0, r3
 8004996:	f001 fc5d 	bl	8006254 <pvPortMalloc>
 800499a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800499c:	69bb      	ldr	r3, [r7, #24]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d011      	beq.n	80049c6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	3348      	adds	r3, #72	; 0x48
 80049aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2200      	movs	r2, #0
 80049b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80049b4:	79fa      	ldrb	r2, [r7, #7]
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	9300      	str	r3, [sp, #0]
 80049ba:	4613      	mov	r3, r2
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	68b9      	ldr	r1, [r7, #8]
 80049c0:	68f8      	ldr	r0, [r7, #12]
 80049c2:	f000 f805 	bl	80049d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80049c6:	69bb      	ldr	r3, [r7, #24]
	}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3720      	adds	r7, #32
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}

080049d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b084      	sub	sp, #16
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d103      	bne.n	80049ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	69ba      	ldr	r2, [r7, #24]
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e002      	b.n	80049f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80049fe:	2101      	movs	r1, #1
 8004a00:	69b8      	ldr	r0, [r7, #24]
 8004a02:	f7ff ff39 	bl	8004878 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b08e      	sub	sp, #56	; 0x38
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10c      	bne.n	8004a3c <xQueueGiveFromISR+0x2e>
	__asm volatile
 8004a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a26:	b672      	cpsid	i
 8004a28:	f383 8811 	msr	BASEPRI, r3
 8004a2c:	f3bf 8f6f 	isb	sy
 8004a30:	f3bf 8f4f 	dsb	sy
 8004a34:	b662      	cpsie	i
 8004a36:	623b      	str	r3, [r7, #32]
}
 8004a38:	bf00      	nop
 8004a3a:	e7fe      	b.n	8004a3a <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00c      	beq.n	8004a5e <xQueueGiveFromISR+0x50>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	b672      	cpsid	i
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
 8004a56:	b662      	cpsie	i
 8004a58:	61fb      	str	r3, [r7, #28]
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d103      	bne.n	8004a6e <xQueueGiveFromISR+0x60>
 8004a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d101      	bne.n	8004a72 <xQueueGiveFromISR+0x64>
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e000      	b.n	8004a74 <xQueueGiveFromISR+0x66>
 8004a72:	2300      	movs	r3, #0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d10c      	bne.n	8004a92 <xQueueGiveFromISR+0x84>
	__asm volatile
 8004a78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7c:	b672      	cpsid	i
 8004a7e:	f383 8811 	msr	BASEPRI, r3
 8004a82:	f3bf 8f6f 	isb	sy
 8004a86:	f3bf 8f4f 	dsb	sy
 8004a8a:	b662      	cpsie	i
 8004a8c:	61bb      	str	r3, [r7, #24]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a92:	f001 fb9b 	bl	80061cc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a96:	f3ef 8211 	mrs	r2, BASEPRI
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	b672      	cpsid	i
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	b662      	cpsie	i
 8004aae:	617a      	str	r2, [r7, #20]
 8004ab0:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004ab2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ab4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d22b      	bcs.n	8004b1e <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004acc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad2:	1c5a      	adds	r2, r3, #1
 8004ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004ad8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ae0:	d112      	bne.n	8004b08 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d016      	beq.n	8004b18 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aec:	3324      	adds	r3, #36	; 0x24
 8004aee:	4618      	mov	r0, r3
 8004af0:	f000 fdfc 	bl	80056ec <xTaskRemoveFromEventList>
 8004af4:	4603      	mov	r3, r0
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00e      	beq.n	8004b18 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d00b      	beq.n	8004b18 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	e007      	b.n	8004b18 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b08:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	b25a      	sxtb	r2, r3
 8004b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	637b      	str	r3, [r7, #52]	; 0x34
 8004b1c:	e001      	b.n	8004b22 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	637b      	str	r3, [r7, #52]	; 0x34
 8004b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b24:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b2c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004b30:	4618      	mov	r0, r3
 8004b32:	3738      	adds	r7, #56	; 0x38
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
 8004b40:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d10c      	bne.n	8004b6e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	b672      	cpsid	i
 8004b5a:	f383 8811 	msr	BASEPRI, r3
 8004b5e:	f3bf 8f6f 	isb	sy
 8004b62:	f3bf 8f4f 	dsb	sy
 8004b66:	b662      	cpsie	i
 8004b68:	623b      	str	r3, [r7, #32]
}
 8004b6a:	bf00      	nop
 8004b6c:	e7fe      	b.n	8004b6c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00c      	beq.n	8004b90 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8004b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b7a:	b672      	cpsid	i
 8004b7c:	f383 8811 	msr	BASEPRI, r3
 8004b80:	f3bf 8f6f 	isb	sy
 8004b84:	f3bf 8f4f 	dsb	sy
 8004b88:	b662      	cpsie	i
 8004b8a:	61fb      	str	r3, [r7, #28]
}
 8004b8c:	bf00      	nop
 8004b8e:	e7fe      	b.n	8004b8e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b90:	f000 ff74 	bl	8005a7c <xTaskGetSchedulerState>
 8004b94:	4603      	mov	r3, r0
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d102      	bne.n	8004ba0 <xQueueSemaphoreTake+0x68>
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <xQueueSemaphoreTake+0x6c>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <xQueueSemaphoreTake+0x6e>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d10c      	bne.n	8004bc4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8004baa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bae:	b672      	cpsid	i
 8004bb0:	f383 8811 	msr	BASEPRI, r3
 8004bb4:	f3bf 8f6f 	isb	sy
 8004bb8:	f3bf 8f4f 	dsb	sy
 8004bbc:	b662      	cpsie	i
 8004bbe:	61bb      	str	r3, [r7, #24]
}
 8004bc0:	bf00      	nop
 8004bc2:	e7fe      	b.n	8004bc2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bc4:	f001 fa1a 	bl	8005ffc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d024      	beq.n	8004c1e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd6:	1e5a      	subs	r2, r3, #1
 8004bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bda:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d104      	bne.n	8004bee <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004be4:	f001 f886 	bl	8005cf4 <pvTaskIncrementMutexHeldCount>
 8004be8:	4602      	mov	r2, r0
 8004bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf0:	691b      	ldr	r3, [r3, #16]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00f      	beq.n	8004c16 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	3310      	adds	r3, #16
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f000 fd76 	bl	80056ec <xTaskRemoveFromEventList>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d007      	beq.n	8004c16 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c06:	4b55      	ldr	r3, [pc, #340]	; (8004d5c <xQueueSemaphoreTake+0x224>)
 8004c08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c0c:	601a      	str	r2, [r3, #0]
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c16:	f001 fa25 	bl	8006064 <vPortExitCritical>
				return pdPASS;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e099      	b.n	8004d52 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d113      	bne.n	8004c4c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d00c      	beq.n	8004c44 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8004c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2e:	b672      	cpsid	i
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	b662      	cpsie	i
 8004c3e:	617b      	str	r3, [r7, #20]
}
 8004c40:	bf00      	nop
 8004c42:	e7fe      	b.n	8004c42 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004c44:	f001 fa0e 	bl	8006064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e082      	b.n	8004d52 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d106      	bne.n	8004c60 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c52:	f107 030c 	add.w	r3, r7, #12
 8004c56:	4618      	mov	r0, r3
 8004c58:	f000 fdac 	bl	80057b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c60:	f001 fa00 	bl	8006064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c64:	f000 fb52 	bl	800530c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c68:	f001 f9c8 	bl	8005ffc <vPortEnterCritical>
 8004c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c6e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c72:	b25b      	sxtb	r3, r3
 8004c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c78:	d103      	bne.n	8004c82 <xQueueSemaphoreTake+0x14a>
 8004c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c88:	b25b      	sxtb	r3, r3
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d103      	bne.n	8004c98 <xQueueSemaphoreTake+0x160>
 8004c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c98:	f001 f9e4 	bl	8006064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c9c:	463a      	mov	r2, r7
 8004c9e:	f107 030c 	add.w	r3, r7, #12
 8004ca2:	4611      	mov	r1, r2
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	f000 fd9b 	bl	80057e0 <xTaskCheckForTimeOut>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d132      	bne.n	8004d16 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cb0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004cb2:	f000 f8bf 	bl	8004e34 <prvIsQueueEmpty>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d026      	beq.n	8004d0a <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d109      	bne.n	8004cd8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8004cc4:	f001 f99a 	bl	8005ffc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cca:	689b      	ldr	r3, [r3, #8]
 8004ccc:	4618      	mov	r0, r3
 8004cce:	f000 fef3 	bl	8005ab8 <xTaskPriorityInherit>
 8004cd2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004cd4:	f001 f9c6 	bl	8006064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cda:	3324      	adds	r3, #36	; 0x24
 8004cdc:	683a      	ldr	r2, [r7, #0]
 8004cde:	4611      	mov	r1, r2
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f000 fcdd 	bl	80056a0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ce6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004ce8:	f000 f852 	bl	8004d90 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cec:	f000 fb1c 	bl	8005328 <xTaskResumeAll>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f47f af66 	bne.w	8004bc4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8004cf8:	4b18      	ldr	r3, [pc, #96]	; (8004d5c <xQueueSemaphoreTake+0x224>)
 8004cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	f3bf 8f6f 	isb	sy
 8004d08:	e75c      	b.n	8004bc4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d0c:	f000 f840 	bl	8004d90 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d10:	f000 fb0a 	bl	8005328 <xTaskResumeAll>
 8004d14:	e756      	b.n	8004bc4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004d16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d18:	f000 f83a 	bl	8004d90 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d1c:	f000 fb04 	bl	8005328 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004d20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d22:	f000 f887 	bl	8004e34 <prvIsQueueEmpty>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f43f af4b 	beq.w	8004bc4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00d      	beq.n	8004d50 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8004d34:	f001 f962 	bl	8005ffc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004d3a:	f000 f811 	bl	8004d60 <prvGetDisinheritPriorityAfterTimeout>
 8004d3e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 ff36 	bl	8005bb8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004d4c:	f001 f98a 	bl	8006064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3738      	adds	r7, #56	; 0x38
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	e000ed04 	.word	0xe000ed04

08004d60 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004d60:	b480      	push	{r7}
 8004d62:	b085      	sub	sp, #20
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d006      	beq.n	8004d7e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f1c3 0307 	rsb	r3, r3, #7
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	e001      	b.n	8004d82 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004d82:	68fb      	ldr	r3, [r7, #12]
	}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3714      	adds	r7, #20
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	b084      	sub	sp, #16
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004d98:	f001 f930 	bl	8005ffc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004da2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004da4:	e011      	b.n	8004dca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d012      	beq.n	8004dd4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	3324      	adds	r3, #36	; 0x24
 8004db2:	4618      	mov	r0, r3
 8004db4:	f000 fc9a 	bl	80056ec <xTaskRemoveFromEventList>
 8004db8:	4603      	mov	r3, r0
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d001      	beq.n	8004dc2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004dbe:	f000 fd75 	bl	80058ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dc2:	7bfb      	ldrb	r3, [r7, #15]
 8004dc4:	3b01      	subs	r3, #1
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	dce9      	bgt.n	8004da6 <prvUnlockQueue+0x16>
 8004dd2:	e000      	b.n	8004dd6 <prvUnlockQueue+0x46>
					break;
 8004dd4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	22ff      	movs	r2, #255	; 0xff
 8004dda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004dde:	f001 f941 	bl	8006064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004de2:	f001 f90b 	bl	8005ffc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004dec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004dee:	e011      	b.n	8004e14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d012      	beq.n	8004e1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fc75 	bl	80056ec <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d001      	beq.n	8004e0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e08:	f000 fd50 	bl	80058ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e0c:	7bbb      	ldrb	r3, [r7, #14]
 8004e0e:	3b01      	subs	r3, #1
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	dce9      	bgt.n	8004df0 <prvUnlockQueue+0x60>
 8004e1c:	e000      	b.n	8004e20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	22ff      	movs	r2, #255	; 0xff
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e28:	f001 f91c 	bl	8006064 <vPortExitCritical>
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}

08004e34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e3c:	f001 f8de 	bl	8005ffc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d102      	bne.n	8004e4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	60fb      	str	r3, [r7, #12]
 8004e4c:	e001      	b.n	8004e52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e52:	f001 f907 	bl	8006064 <vPortExitCritical>

	return xReturn;
 8004e56:	68fb      	ldr	r3, [r7, #12]
}
 8004e58:	4618      	mov	r0, r3
 8004e5a:	3710      	adds	r7, #16
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}

08004e60 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b08e      	sub	sp, #56	; 0x38
 8004e64:	af04      	add	r7, sp, #16
 8004e66:	60f8      	str	r0, [r7, #12]
 8004e68:	60b9      	str	r1, [r7, #8]
 8004e6a:	607a      	str	r2, [r7, #4]
 8004e6c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d10c      	bne.n	8004e8e <xTaskCreateStatic+0x2e>
	__asm volatile
 8004e74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e78:	b672      	cpsid	i
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
 8004e86:	b662      	cpsie	i
 8004e88:	623b      	str	r3, [r7, #32]
}
 8004e8a:	bf00      	nop
 8004e8c:	e7fe      	b.n	8004e8c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8004e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10c      	bne.n	8004eae <xTaskCreateStatic+0x4e>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	b672      	cpsid	i
 8004e9a:	f383 8811 	msr	BASEPRI, r3
 8004e9e:	f3bf 8f6f 	isb	sy
 8004ea2:	f3bf 8f4f 	dsb	sy
 8004ea6:	b662      	cpsie	i
 8004ea8:	61fb      	str	r3, [r7, #28]
}
 8004eaa:	bf00      	nop
 8004eac:	e7fe      	b.n	8004eac <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004eae:	23a0      	movs	r3, #160	; 0xa0
 8004eb0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	2ba0      	cmp	r3, #160	; 0xa0
 8004eb6:	d00c      	beq.n	8004ed2 <xTaskCreateStatic+0x72>
	__asm volatile
 8004eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ebc:	b672      	cpsid	i
 8004ebe:	f383 8811 	msr	BASEPRI, r3
 8004ec2:	f3bf 8f6f 	isb	sy
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	b662      	cpsie	i
 8004ecc:	61bb      	str	r3, [r7, #24]
}
 8004ece:	bf00      	nop
 8004ed0:	e7fe      	b.n	8004ed0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004ed2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004ed4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d01e      	beq.n	8004f18 <xTaskCreateStatic+0xb8>
 8004eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ee6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ee8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eec:	2202      	movs	r2, #2
 8004eee:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	9303      	str	r3, [sp, #12]
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	9302      	str	r3, [sp, #8]
 8004efa:	f107 0314 	add.w	r3, r7, #20
 8004efe:	9301      	str	r3, [sp, #4]
 8004f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f02:	9300      	str	r3, [sp, #0]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	68b9      	ldr	r1, [r7, #8]
 8004f0a:	68f8      	ldr	r0, [r7, #12]
 8004f0c:	f000 f850 	bl	8004fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004f12:	f000 f8ed 	bl	80050f0 <prvAddNewTaskToReadyList>
 8004f16:	e001      	b.n	8004f1c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004f1c:	697b      	ldr	r3, [r7, #20]
	}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3728      	adds	r7, #40	; 0x28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}

08004f26 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004f26:	b580      	push	{r7, lr}
 8004f28:	b08c      	sub	sp, #48	; 0x30
 8004f2a:	af04      	add	r7, sp, #16
 8004f2c:	60f8      	str	r0, [r7, #12]
 8004f2e:	60b9      	str	r1, [r7, #8]
 8004f30:	603b      	str	r3, [r7, #0]
 8004f32:	4613      	mov	r3, r2
 8004f34:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004f36:	88fb      	ldrh	r3, [r7, #6]
 8004f38:	009b      	lsls	r3, r3, #2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 f98a 	bl	8006254 <pvPortMalloc>
 8004f40:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d00e      	beq.n	8004f66 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004f48:	20a0      	movs	r0, #160	; 0xa0
 8004f4a:	f001 f983 	bl	8006254 <pvPortMalloc>
 8004f4e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004f5c:	e005      	b.n	8004f6a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f001 fa42 	bl	80063e8 <vPortFree>
 8004f64:	e001      	b.n	8004f6a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004f6a:	69fb      	ldr	r3, [r7, #28]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d017      	beq.n	8004fa0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	2200      	movs	r2, #0
 8004f74:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004f78:	88fa      	ldrh	r2, [r7, #6]
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	9302      	str	r3, [sp, #8]
 8004f82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f84:	9301      	str	r3, [sp, #4]
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	9300      	str	r3, [sp, #0]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f80e 	bl	8004fb0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004f94:	69f8      	ldr	r0, [r7, #28]
 8004f96:	f000 f8ab 	bl	80050f0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	61bb      	str	r3, [r7, #24]
 8004f9e:	e002      	b.n	8004fa6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8004fa4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
	}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3720      	adds	r7, #32
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b088      	sub	sp, #32
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	60f8      	str	r0, [r7, #12]
 8004fb8:	60b9      	str	r1, [r7, #8]
 8004fba:	607a      	str	r2, [r7, #4]
 8004fbc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004fc2:	6879      	ldr	r1, [r7, #4]
 8004fc4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8004fc8:	440b      	add	r3, r1
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	4413      	add	r3, r2
 8004fce:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	f023 0307 	bic.w	r3, r3, #7
 8004fd6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004fd8:	69bb      	ldr	r3, [r7, #24]
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00c      	beq.n	8004ffc <prvInitialiseNewTask+0x4c>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fe6:	b672      	cpsid	i
 8004fe8:	f383 8811 	msr	BASEPRI, r3
 8004fec:	f3bf 8f6f 	isb	sy
 8004ff0:	f3bf 8f4f 	dsb	sy
 8004ff4:	b662      	cpsie	i
 8004ff6:	617b      	str	r3, [r7, #20]
}
 8004ff8:	bf00      	nop
 8004ffa:	e7fe      	b.n	8004ffa <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d01f      	beq.n	8005042 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
 8005006:	e012      	b.n	800502e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005008:	68ba      	ldr	r2, [r7, #8]
 800500a:	69fb      	ldr	r3, [r7, #28]
 800500c:	4413      	add	r3, r2
 800500e:	7819      	ldrb	r1, [r3, #0]
 8005010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005012:	69fb      	ldr	r3, [r7, #28]
 8005014:	4413      	add	r3, r2
 8005016:	3334      	adds	r3, #52	; 0x34
 8005018:	460a      	mov	r2, r1
 800501a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800501c:	68ba      	ldr	r2, [r7, #8]
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d006      	beq.n	8005036 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	3301      	adds	r3, #1
 800502c:	61fb      	str	r3, [r7, #28]
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	2b0f      	cmp	r3, #15
 8005032:	d9e9      	bls.n	8005008 <prvInitialiseNewTask+0x58>
 8005034:	e000      	b.n	8005038 <prvInitialiseNewTask+0x88>
			{
				break;
 8005036:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2200      	movs	r2, #0
 800503c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005040:	e003      	b.n	800504a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005044:	2200      	movs	r2, #0
 8005046:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800504a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504c:	2b06      	cmp	r3, #6
 800504e:	d901      	bls.n	8005054 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005050:	2306      	movs	r3, #6
 8005052:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005058:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800505a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800505c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800505e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005062:	2200      	movs	r2, #0
 8005064:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	3304      	adds	r3, #4
 800506a:	4618      	mov	r0, r3
 800506c:	f7ff fb6f 	bl	800474e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005072:	3318      	adds	r3, #24
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fb6a 	bl	800474e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800507e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005082:	f1c3 0207 	rsb	r2, r3, #7
 8005086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005088:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800508a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800508c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800508e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005092:	2200      	movs	r2, #0
 8005094:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800509a:	2200      	movs	r2, #0
 800509c:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80050a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a2:	334c      	adds	r3, #76	; 0x4c
 80050a4:	224c      	movs	r2, #76	; 0x4c
 80050a6:	2100      	movs	r1, #0
 80050a8:	4618      	mov	r0, r3
 80050aa:	f001 fd71 	bl	8006b90 <memset>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	4a0c      	ldr	r2, [pc, #48]	; (80050e4 <prvInitialiseNewTask+0x134>)
 80050b2:	651a      	str	r2, [r3, #80]	; 0x50
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	4a0c      	ldr	r2, [pc, #48]	; (80050e8 <prvInitialiseNewTask+0x138>)
 80050b8:	655a      	str	r2, [r3, #84]	; 0x54
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	4a0b      	ldr	r2, [pc, #44]	; (80050ec <prvInitialiseNewTask+0x13c>)
 80050be:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80050c0:	683a      	ldr	r2, [r7, #0]
 80050c2:	68f9      	ldr	r1, [r7, #12]
 80050c4:	69b8      	ldr	r0, [r7, #24]
 80050c6:	f000 fe8f 	bl	8005de8 <pxPortInitialiseStack>
 80050ca:	4602      	mov	r2, r0
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d002      	beq.n	80050dc <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80050d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050da:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050dc:	bf00      	nop
 80050de:	3720      	adds	r7, #32
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bd80      	pop	{r7, pc}
 80050e4:	200056d4 	.word	0x200056d4
 80050e8:	2000573c 	.word	0x2000573c
 80050ec:	200057a4 	.word	0x200057a4

080050f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80050f8:	f000 ff80 	bl	8005ffc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80050fc:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <prvAddNewTaskToReadyList+0xb8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	3301      	adds	r3, #1
 8005102:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <prvAddNewTaskToReadyList+0xb8>)
 8005104:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005106:	4b29      	ldr	r3, [pc, #164]	; (80051ac <prvAddNewTaskToReadyList+0xbc>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d109      	bne.n	8005122 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800510e:	4a27      	ldr	r2, [pc, #156]	; (80051ac <prvAddNewTaskToReadyList+0xbc>)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005114:	4b24      	ldr	r3, [pc, #144]	; (80051a8 <prvAddNewTaskToReadyList+0xb8>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d110      	bne.n	800513e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800511c:	f000 fbea 	bl	80058f4 <prvInitialiseTaskLists>
 8005120:	e00d      	b.n	800513e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005122:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <prvAddNewTaskToReadyList+0xc0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d109      	bne.n	800513e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <prvAddNewTaskToReadyList+0xbc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005134:	429a      	cmp	r2, r3
 8005136:	d802      	bhi.n	800513e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005138:	4a1c      	ldr	r2, [pc, #112]	; (80051ac <prvAddNewTaskToReadyList+0xbc>)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800513e:	4b1d      	ldr	r3, [pc, #116]	; (80051b4 <prvAddNewTaskToReadyList+0xc4>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	3301      	adds	r3, #1
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <prvAddNewTaskToReadyList+0xc4>)
 8005146:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	4b19      	ldr	r3, [pc, #100]	; (80051b8 <prvAddNewTaskToReadyList+0xc8>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	4a18      	ldr	r2, [pc, #96]	; (80051b8 <prvAddNewTaskToReadyList+0xc8>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a15      	ldr	r2, [pc, #84]	; (80051bc <prvAddNewTaskToReadyList+0xcc>)
 8005168:	441a      	add	r2, r3
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7ff faf9 	bl	8004768 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005176:	f000 ff75 	bl	8006064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800517a:	4b0d      	ldr	r3, [pc, #52]	; (80051b0 <prvAddNewTaskToReadyList+0xc0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d00e      	beq.n	80051a0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005182:	4b0a      	ldr	r3, [pc, #40]	; (80051ac <prvAddNewTaskToReadyList+0xbc>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518c:	429a      	cmp	r2, r3
 800518e:	d207      	bcs.n	80051a0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005190:	4b0b      	ldr	r3, [pc, #44]	; (80051c0 <prvAddNewTaskToReadyList+0xd0>)
 8005192:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005196:	601a      	str	r2, [r3, #0]
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80051a0:	bf00      	nop
 80051a2:	3708      	adds	r7, #8
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	20000868 	.word	0x20000868
 80051ac:	20000768 	.word	0x20000768
 80051b0:	20000874 	.word	0x20000874
 80051b4:	20000884 	.word	0x20000884
 80051b8:	20000870 	.word	0x20000870
 80051bc:	2000076c 	.word	0x2000076c
 80051c0:	e000ed04 	.word	0xe000ed04

080051c4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80051cc:	2300      	movs	r3, #0
 80051ce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d019      	beq.n	800520a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80051d6:	4b14      	ldr	r3, [pc, #80]	; (8005228 <vTaskDelay+0x64>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00c      	beq.n	80051f8 <vTaskDelay+0x34>
	__asm volatile
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	b672      	cpsid	i
 80051e4:	f383 8811 	msr	BASEPRI, r3
 80051e8:	f3bf 8f6f 	isb	sy
 80051ec:	f3bf 8f4f 	dsb	sy
 80051f0:	b662      	cpsie	i
 80051f2:	60bb      	str	r3, [r7, #8]
}
 80051f4:	bf00      	nop
 80051f6:	e7fe      	b.n	80051f6 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80051f8:	f000 f888 	bl	800530c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80051fc:	2100      	movs	r1, #0
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fd8c 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005204:	f000 f890 	bl	8005328 <xTaskResumeAll>
 8005208:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d107      	bne.n	8005220 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8005210:	4b06      	ldr	r3, [pc, #24]	; (800522c <vTaskDelay+0x68>)
 8005212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005216:	601a      	str	r2, [r3, #0]
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005220:	bf00      	nop
 8005222:	3710      	adds	r7, #16
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20000890 	.word	0x20000890
 800522c:	e000ed04 	.word	0xe000ed04

08005230 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b08a      	sub	sp, #40	; 0x28
 8005234:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800523a:	2300      	movs	r3, #0
 800523c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800523e:	463a      	mov	r2, r7
 8005240:	1d39      	adds	r1, r7, #4
 8005242:	f107 0308 	add.w	r3, r7, #8
 8005246:	4618      	mov	r0, r3
 8005248:	f7fb f9b0 	bl	80005ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800524c:	6839      	ldr	r1, [r7, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	9202      	str	r2, [sp, #8]
 8005254:	9301      	str	r3, [sp, #4]
 8005256:	2300      	movs	r3, #0
 8005258:	9300      	str	r3, [sp, #0]
 800525a:	2300      	movs	r3, #0
 800525c:	460a      	mov	r2, r1
 800525e:	4923      	ldr	r1, [pc, #140]	; (80052ec <vTaskStartScheduler+0xbc>)
 8005260:	4823      	ldr	r0, [pc, #140]	; (80052f0 <vTaskStartScheduler+0xc0>)
 8005262:	f7ff fdfd 	bl	8004e60 <xTaskCreateStatic>
 8005266:	4603      	mov	r3, r0
 8005268:	4a22      	ldr	r2, [pc, #136]	; (80052f4 <vTaskStartScheduler+0xc4>)
 800526a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800526c:	4b21      	ldr	r3, [pc, #132]	; (80052f4 <vTaskStartScheduler+0xc4>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005274:	2301      	movs	r3, #1
 8005276:	617b      	str	r3, [r7, #20]
 8005278:	e001      	b.n	800527e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d11d      	bne.n	80052c0 <vTaskStartScheduler+0x90>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	b672      	cpsid	i
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	b662      	cpsie	i
 8005298:	613b      	str	r3, [r7, #16]
}
 800529a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800529c:	4b16      	ldr	r3, [pc, #88]	; (80052f8 <vTaskStartScheduler+0xc8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	334c      	adds	r3, #76	; 0x4c
 80052a2:	4a16      	ldr	r2, [pc, #88]	; (80052fc <vTaskStartScheduler+0xcc>)
 80052a4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80052a6:	4b16      	ldr	r3, [pc, #88]	; (8005300 <vTaskStartScheduler+0xd0>)
 80052a8:	f04f 32ff 	mov.w	r2, #4294967295
 80052ac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80052ae:	4b15      	ldr	r3, [pc, #84]	; (8005304 <vTaskStartScheduler+0xd4>)
 80052b0:	2201      	movs	r2, #1
 80052b2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052b4:	4b14      	ldr	r3, [pc, #80]	; (8005308 <vTaskStartScheduler+0xd8>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052ba:	f000 fe21 	bl	8005f00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052be:	e010      	b.n	80052e2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052c0:	697b      	ldr	r3, [r7, #20]
 80052c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052c6:	d10c      	bne.n	80052e2 <vTaskStartScheduler+0xb2>
	__asm volatile
 80052c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052cc:	b672      	cpsid	i
 80052ce:	f383 8811 	msr	BASEPRI, r3
 80052d2:	f3bf 8f6f 	isb	sy
 80052d6:	f3bf 8f4f 	dsb	sy
 80052da:	b662      	cpsie	i
 80052dc:	60fb      	str	r3, [r7, #12]
}
 80052de:	bf00      	nop
 80052e0:	e7fe      	b.n	80052e0 <vTaskStartScheduler+0xb0>
}
 80052e2:	bf00      	nop
 80052e4:	3718      	adds	r7, #24
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	08007c38 	.word	0x08007c38
 80052f0:	080058c5 	.word	0x080058c5
 80052f4:	2000088c 	.word	0x2000088c
 80052f8:	20000768 	.word	0x20000768
 80052fc:	20000070 	.word	0x20000070
 8005300:	20000888 	.word	0x20000888
 8005304:	20000874 	.word	0x20000874
 8005308:	2000086c 	.word	0x2000086c

0800530c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005310:	4b04      	ldr	r3, [pc, #16]	; (8005324 <vTaskSuspendAll+0x18>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3301      	adds	r3, #1
 8005316:	4a03      	ldr	r2, [pc, #12]	; (8005324 <vTaskSuspendAll+0x18>)
 8005318:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800531a:	bf00      	nop
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr
 8005324:	20000890 	.word	0x20000890

08005328 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005328:	b580      	push	{r7, lr}
 800532a:	b084      	sub	sp, #16
 800532c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005332:	2300      	movs	r3, #0
 8005334:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005336:	4b42      	ldr	r3, [pc, #264]	; (8005440 <xTaskResumeAll+0x118>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d10c      	bne.n	8005358 <xTaskResumeAll+0x30>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	b672      	cpsid	i
 8005344:	f383 8811 	msr	BASEPRI, r3
 8005348:	f3bf 8f6f 	isb	sy
 800534c:	f3bf 8f4f 	dsb	sy
 8005350:	b662      	cpsie	i
 8005352:	603b      	str	r3, [r7, #0]
}
 8005354:	bf00      	nop
 8005356:	e7fe      	b.n	8005356 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005358:	f000 fe50 	bl	8005ffc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800535c:	4b38      	ldr	r3, [pc, #224]	; (8005440 <xTaskResumeAll+0x118>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	3b01      	subs	r3, #1
 8005362:	4a37      	ldr	r2, [pc, #220]	; (8005440 <xTaskResumeAll+0x118>)
 8005364:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005366:	4b36      	ldr	r3, [pc, #216]	; (8005440 <xTaskResumeAll+0x118>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d161      	bne.n	8005432 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800536e:	4b35      	ldr	r3, [pc, #212]	; (8005444 <xTaskResumeAll+0x11c>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d05d      	beq.n	8005432 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005376:	e02e      	b.n	80053d6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005378:	4b33      	ldr	r3, [pc, #204]	; (8005448 <xTaskResumeAll+0x120>)
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	3318      	adds	r3, #24
 8005384:	4618      	mov	r0, r3
 8005386:	f7ff fa4c 	bl	8004822 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	3304      	adds	r3, #4
 800538e:	4618      	mov	r0, r3
 8005390:	f7ff fa47 	bl	8004822 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005398:	2201      	movs	r2, #1
 800539a:	409a      	lsls	r2, r3
 800539c:	4b2b      	ldr	r3, [pc, #172]	; (800544c <xTaskResumeAll+0x124>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	4a2a      	ldr	r2, [pc, #168]	; (800544c <xTaskResumeAll+0x124>)
 80053a4:	6013      	str	r3, [r2, #0]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4613      	mov	r3, r2
 80053ac:	009b      	lsls	r3, r3, #2
 80053ae:	4413      	add	r3, r2
 80053b0:	009b      	lsls	r3, r3, #2
 80053b2:	4a27      	ldr	r2, [pc, #156]	; (8005450 <xTaskResumeAll+0x128>)
 80053b4:	441a      	add	r2, r3
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	3304      	adds	r3, #4
 80053ba:	4619      	mov	r1, r3
 80053bc:	4610      	mov	r0, r2
 80053be:	f7ff f9d3 	bl	8004768 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053c6:	4b23      	ldr	r3, [pc, #140]	; (8005454 <xTaskResumeAll+0x12c>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d302      	bcc.n	80053d6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80053d0:	4b21      	ldr	r3, [pc, #132]	; (8005458 <xTaskResumeAll+0x130>)
 80053d2:	2201      	movs	r2, #1
 80053d4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053d6:	4b1c      	ldr	r3, [pc, #112]	; (8005448 <xTaskResumeAll+0x120>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1cc      	bne.n	8005378 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d001      	beq.n	80053e8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053e4:	f000 fb2a 	bl	8005a3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80053e8:	4b1c      	ldr	r3, [pc, #112]	; (800545c <xTaskResumeAll+0x134>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d010      	beq.n	8005416 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053f4:	f000 f836 	bl	8005464 <xTaskIncrementTick>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d002      	beq.n	8005404 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80053fe:	4b16      	ldr	r3, [pc, #88]	; (8005458 <xTaskResumeAll+0x130>)
 8005400:	2201      	movs	r2, #1
 8005402:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	3b01      	subs	r3, #1
 8005408:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d1f1      	bne.n	80053f4 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005410:	4b12      	ldr	r3, [pc, #72]	; (800545c <xTaskResumeAll+0x134>)
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005416:	4b10      	ldr	r3, [pc, #64]	; (8005458 <xTaskResumeAll+0x130>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d009      	beq.n	8005432 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800541e:	2301      	movs	r3, #1
 8005420:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005422:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <xTaskResumeAll+0x138>)
 8005424:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005428:	601a      	str	r2, [r3, #0]
 800542a:	f3bf 8f4f 	dsb	sy
 800542e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005432:	f000 fe17 	bl	8006064 <vPortExitCritical>

	return xAlreadyYielded;
 8005436:	68bb      	ldr	r3, [r7, #8]
}
 8005438:	4618      	mov	r0, r3
 800543a:	3710      	adds	r7, #16
 800543c:	46bd      	mov	sp, r7
 800543e:	bd80      	pop	{r7, pc}
 8005440:	20000890 	.word	0x20000890
 8005444:	20000868 	.word	0x20000868
 8005448:	20000828 	.word	0x20000828
 800544c:	20000870 	.word	0x20000870
 8005450:	2000076c 	.word	0x2000076c
 8005454:	20000768 	.word	0x20000768
 8005458:	2000087c 	.word	0x2000087c
 800545c:	20000878 	.word	0x20000878
 8005460:	e000ed04 	.word	0xe000ed04

08005464 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b086      	sub	sp, #24
 8005468:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800546a:	2300      	movs	r3, #0
 800546c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800546e:	4b4f      	ldr	r3, [pc, #316]	; (80055ac <xTaskIncrementTick+0x148>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	f040 808a 	bne.w	800558c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005478:	4b4d      	ldr	r3, [pc, #308]	; (80055b0 <xTaskIncrementTick+0x14c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	3301      	adds	r3, #1
 800547e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005480:	4a4b      	ldr	r2, [pc, #300]	; (80055b0 <xTaskIncrementTick+0x14c>)
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d122      	bne.n	80054d2 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800548c:	4b49      	ldr	r3, [pc, #292]	; (80055b4 <xTaskIncrementTick+0x150>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <xTaskIncrementTick+0x4c>
	__asm volatile
 8005496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800549a:	b672      	cpsid	i
 800549c:	f383 8811 	msr	BASEPRI, r3
 80054a0:	f3bf 8f6f 	isb	sy
 80054a4:	f3bf 8f4f 	dsb	sy
 80054a8:	b662      	cpsie	i
 80054aa:	603b      	str	r3, [r7, #0]
}
 80054ac:	bf00      	nop
 80054ae:	e7fe      	b.n	80054ae <xTaskIncrementTick+0x4a>
 80054b0:	4b40      	ldr	r3, [pc, #256]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	4b40      	ldr	r3, [pc, #256]	; (80055b8 <xTaskIncrementTick+0x154>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a3e      	ldr	r2, [pc, #248]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054bc:	6013      	str	r3, [r2, #0]
 80054be:	4a3e      	ldr	r2, [pc, #248]	; (80055b8 <xTaskIncrementTick+0x154>)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	6013      	str	r3, [r2, #0]
 80054c4:	4b3d      	ldr	r3, [pc, #244]	; (80055bc <xTaskIncrementTick+0x158>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	4a3c      	ldr	r2, [pc, #240]	; (80055bc <xTaskIncrementTick+0x158>)
 80054cc:	6013      	str	r3, [r2, #0]
 80054ce:	f000 fab5 	bl	8005a3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80054d2:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <xTaskIncrementTick+0x15c>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	693a      	ldr	r2, [r7, #16]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d348      	bcc.n	800556e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80054dc:	4b35      	ldr	r3, [pc, #212]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d104      	bne.n	80054f0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054e6:	4b36      	ldr	r3, [pc, #216]	; (80055c0 <xTaskIncrementTick+0x15c>)
 80054e8:	f04f 32ff 	mov.w	r2, #4294967295
 80054ec:	601a      	str	r2, [r3, #0]
					break;
 80054ee:	e03e      	b.n	800556e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f0:	4b30      	ldr	r3, [pc, #192]	; (80055b4 <xTaskIncrementTick+0x150>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80054fa:	68bb      	ldr	r3, [r7, #8]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005500:	693a      	ldr	r2, [r7, #16]
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	429a      	cmp	r2, r3
 8005506:	d203      	bcs.n	8005510 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005508:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <xTaskIncrementTick+0x15c>)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800550e:	e02e      	b.n	800556e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	3304      	adds	r3, #4
 8005514:	4618      	mov	r0, r3
 8005516:	f7ff f984 	bl	8004822 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800551e:	2b00      	cmp	r3, #0
 8005520:	d004      	beq.n	800552c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	3318      	adds	r3, #24
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff f97b 	bl	8004822 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800552c:	68bb      	ldr	r3, [r7, #8]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	2201      	movs	r2, #1
 8005532:	409a      	lsls	r2, r3
 8005534:	4b23      	ldr	r3, [pc, #140]	; (80055c4 <xTaskIncrementTick+0x160>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4313      	orrs	r3, r2
 800553a:	4a22      	ldr	r2, [pc, #136]	; (80055c4 <xTaskIncrementTick+0x160>)
 800553c:	6013      	str	r3, [r2, #0]
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005542:	4613      	mov	r3, r2
 8005544:	009b      	lsls	r3, r3, #2
 8005546:	4413      	add	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <xTaskIncrementTick+0x164>)
 800554c:	441a      	add	r2, r3
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	3304      	adds	r3, #4
 8005552:	4619      	mov	r1, r3
 8005554:	4610      	mov	r0, r2
 8005556:	f7ff f907 	bl	8004768 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800555e:	4b1b      	ldr	r3, [pc, #108]	; (80055cc <xTaskIncrementTick+0x168>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005564:	429a      	cmp	r2, r3
 8005566:	d3b9      	bcc.n	80054dc <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800556c:	e7b6      	b.n	80054dc <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800556e:	4b17      	ldr	r3, [pc, #92]	; (80055cc <xTaskIncrementTick+0x168>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	4914      	ldr	r1, [pc, #80]	; (80055c8 <xTaskIncrementTick+0x164>)
 8005576:	4613      	mov	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	4413      	add	r3, r2
 800557c:	009b      	lsls	r3, r3, #2
 800557e:	440b      	add	r3, r1
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	2b01      	cmp	r3, #1
 8005584:	d907      	bls.n	8005596 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8005586:	2301      	movs	r3, #1
 8005588:	617b      	str	r3, [r7, #20]
 800558a:	e004      	b.n	8005596 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800558c:	4b10      	ldr	r3, [pc, #64]	; (80055d0 <xTaskIncrementTick+0x16c>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	3301      	adds	r3, #1
 8005592:	4a0f      	ldr	r2, [pc, #60]	; (80055d0 <xTaskIncrementTick+0x16c>)
 8005594:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005596:	4b0f      	ldr	r3, [pc, #60]	; (80055d4 <xTaskIncrementTick+0x170>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d001      	beq.n	80055a2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000890 	.word	0x20000890
 80055b0:	2000086c 	.word	0x2000086c
 80055b4:	20000820 	.word	0x20000820
 80055b8:	20000824 	.word	0x20000824
 80055bc:	20000880 	.word	0x20000880
 80055c0:	20000888 	.word	0x20000888
 80055c4:	20000870 	.word	0x20000870
 80055c8:	2000076c 	.word	0x2000076c
 80055cc:	20000768 	.word	0x20000768
 80055d0:	20000878 	.word	0x20000878
 80055d4:	2000087c 	.word	0x2000087c

080055d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80055de:	4b2a      	ldr	r3, [pc, #168]	; (8005688 <vTaskSwitchContext+0xb0>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80055e6:	4b29      	ldr	r3, [pc, #164]	; (800568c <vTaskSwitchContext+0xb4>)
 80055e8:	2201      	movs	r2, #1
 80055ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80055ec:	e046      	b.n	800567c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80055ee:	4b27      	ldr	r3, [pc, #156]	; (800568c <vTaskSwitchContext+0xb4>)
 80055f0:	2200      	movs	r2, #0
 80055f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055f4:	4b26      	ldr	r3, [pc, #152]	; (8005690 <vTaskSwitchContext+0xb8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	fab3 f383 	clz	r3, r3
 8005600:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	f1c3 031f 	rsb	r3, r3, #31
 8005608:	617b      	str	r3, [r7, #20]
 800560a:	4922      	ldr	r1, [pc, #136]	; (8005694 <vTaskSwitchContext+0xbc>)
 800560c:	697a      	ldr	r2, [r7, #20]
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10c      	bne.n	8005638 <vTaskSwitchContext+0x60>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005622:	b672      	cpsid	i
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	b662      	cpsie	i
 8005632:	607b      	str	r3, [r7, #4]
}
 8005634:	bf00      	nop
 8005636:	e7fe      	b.n	8005636 <vTaskSwitchContext+0x5e>
 8005638:	697a      	ldr	r2, [r7, #20]
 800563a:	4613      	mov	r3, r2
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	4a14      	ldr	r2, [pc, #80]	; (8005694 <vTaskSwitchContext+0xbc>)
 8005644:	4413      	add	r3, r2
 8005646:	613b      	str	r3, [r7, #16]
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	605a      	str	r2, [r3, #4]
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	3308      	adds	r3, #8
 800565a:	429a      	cmp	r2, r3
 800565c:	d104      	bne.n	8005668 <vTaskSwitchContext+0x90>
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	685a      	ldr	r2, [r3, #4]
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	605a      	str	r2, [r3, #4]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	68db      	ldr	r3, [r3, #12]
 800566e:	4a0a      	ldr	r2, [pc, #40]	; (8005698 <vTaskSwitchContext+0xc0>)
 8005670:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005672:	4b09      	ldr	r3, [pc, #36]	; (8005698 <vTaskSwitchContext+0xc0>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	334c      	adds	r3, #76	; 0x4c
 8005678:	4a08      	ldr	r2, [pc, #32]	; (800569c <vTaskSwitchContext+0xc4>)
 800567a:	6013      	str	r3, [r2, #0]
}
 800567c:	bf00      	nop
 800567e:	371c      	adds	r7, #28
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr
 8005688:	20000890 	.word	0x20000890
 800568c:	2000087c 	.word	0x2000087c
 8005690:	20000870 	.word	0x20000870
 8005694:	2000076c 	.word	0x2000076c
 8005698:	20000768 	.word	0x20000768
 800569c:	20000070 	.word	0x20000070

080056a0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b084      	sub	sp, #16
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d10c      	bne.n	80056ca <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80056b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b4:	b672      	cpsid	i
 80056b6:	f383 8811 	msr	BASEPRI, r3
 80056ba:	f3bf 8f6f 	isb	sy
 80056be:	f3bf 8f4f 	dsb	sy
 80056c2:	b662      	cpsie	i
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80056ca:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <vTaskPlaceOnEventList+0x48>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	3318      	adds	r3, #24
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff f86c 	bl	80047b0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80056d8:	2101      	movs	r1, #1
 80056da:	6838      	ldr	r0, [r7, #0]
 80056dc:	f000 fb1e 	bl	8005d1c <prvAddCurrentTaskToDelayedList>
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20000768 	.word	0x20000768

080056ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b086      	sub	sp, #24
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10c      	bne.n	800571c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005706:	b672      	cpsid	i
 8005708:	f383 8811 	msr	BASEPRI, r3
 800570c:	f3bf 8f6f 	isb	sy
 8005710:	f3bf 8f4f 	dsb	sy
 8005714:	b662      	cpsie	i
 8005716:	60fb      	str	r3, [r7, #12]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	3318      	adds	r3, #24
 8005720:	4618      	mov	r0, r3
 8005722:	f7ff f87e 	bl	8004822 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005726:	4b1d      	ldr	r3, [pc, #116]	; (800579c <xTaskRemoveFromEventList+0xb0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d11c      	bne.n	8005768 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	3304      	adds	r3, #4
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff f875 	bl	8004822 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	2201      	movs	r2, #1
 800573e:	409a      	lsls	r2, r3
 8005740:	4b17      	ldr	r3, [pc, #92]	; (80057a0 <xTaskRemoveFromEventList+0xb4>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4313      	orrs	r3, r2
 8005746:	4a16      	ldr	r2, [pc, #88]	; (80057a0 <xTaskRemoveFromEventList+0xb4>)
 8005748:	6013      	str	r3, [r2, #0]
 800574a:	693b      	ldr	r3, [r7, #16]
 800574c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	4a13      	ldr	r2, [pc, #76]	; (80057a4 <xTaskRemoveFromEventList+0xb8>)
 8005758:	441a      	add	r2, r3
 800575a:	693b      	ldr	r3, [r7, #16]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7ff f801 	bl	8004768 <vListInsertEnd>
 8005766:	e005      	b.n	8005774 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005768:	693b      	ldr	r3, [r7, #16]
 800576a:	3318      	adds	r3, #24
 800576c:	4619      	mov	r1, r3
 800576e:	480e      	ldr	r0, [pc, #56]	; (80057a8 <xTaskRemoveFromEventList+0xbc>)
 8005770:	f7fe fffa 	bl	8004768 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4b0c      	ldr	r3, [pc, #48]	; (80057ac <xTaskRemoveFromEventList+0xc0>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577e:	429a      	cmp	r2, r3
 8005780:	d905      	bls.n	800578e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005782:	2301      	movs	r3, #1
 8005784:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005786:	4b0a      	ldr	r3, [pc, #40]	; (80057b0 <xTaskRemoveFromEventList+0xc4>)
 8005788:	2201      	movs	r2, #1
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	e001      	b.n	8005792 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800578e:	2300      	movs	r3, #0
 8005790:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005792:	697b      	ldr	r3, [r7, #20]
}
 8005794:	4618      	mov	r0, r3
 8005796:	3718      	adds	r7, #24
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	20000890 	.word	0x20000890
 80057a0:	20000870 	.word	0x20000870
 80057a4:	2000076c 	.word	0x2000076c
 80057a8:	20000828 	.word	0x20000828
 80057ac:	20000768 	.word	0x20000768
 80057b0:	2000087c 	.word	0x2000087c

080057b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80057bc:	4b06      	ldr	r3, [pc, #24]	; (80057d8 <vTaskInternalSetTimeOutState+0x24>)
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80057c4:	4b05      	ldr	r3, [pc, #20]	; (80057dc <vTaskInternalSetTimeOutState+0x28>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	605a      	str	r2, [r3, #4]
}
 80057cc:	bf00      	nop
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	20000880 	.word	0x20000880
 80057dc:	2000086c 	.word	0x2000086c

080057e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b088      	sub	sp, #32
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10c      	bne.n	800580a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f4:	b672      	cpsid	i
 80057f6:	f383 8811 	msr	BASEPRI, r3
 80057fa:	f3bf 8f6f 	isb	sy
 80057fe:	f3bf 8f4f 	dsb	sy
 8005802:	b662      	cpsie	i
 8005804:	613b      	str	r3, [r7, #16]
}
 8005806:	bf00      	nop
 8005808:	e7fe      	b.n	8005808 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d10c      	bne.n	800582a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8005810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005814:	b672      	cpsid	i
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	b662      	cpsie	i
 8005824:	60fb      	str	r3, [r7, #12]
}
 8005826:	bf00      	nop
 8005828:	e7fe      	b.n	8005828 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800582a:	f000 fbe7 	bl	8005ffc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800582e:	4b1d      	ldr	r3, [pc, #116]	; (80058a4 <xTaskCheckForTimeOut+0xc4>)
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	69ba      	ldr	r2, [r7, #24]
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d102      	bne.n	800584e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005848:	2300      	movs	r3, #0
 800584a:	61fb      	str	r3, [r7, #28]
 800584c:	e023      	b.n	8005896 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <xTaskCheckForTimeOut+0xc8>)
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	429a      	cmp	r2, r3
 8005858:	d007      	beq.n	800586a <xTaskCheckForTimeOut+0x8a>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	69ba      	ldr	r2, [r7, #24]
 8005860:	429a      	cmp	r2, r3
 8005862:	d302      	bcc.n	800586a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005864:	2301      	movs	r3, #1
 8005866:	61fb      	str	r3, [r7, #28]
 8005868:	e015      	b.n	8005896 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	697a      	ldr	r2, [r7, #20]
 8005870:	429a      	cmp	r2, r3
 8005872:	d20b      	bcs.n	800588c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	1ad2      	subs	r2, r2, r3
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f7ff ff97 	bl	80057b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005886:	2300      	movs	r3, #0
 8005888:	61fb      	str	r3, [r7, #28]
 800588a:	e004      	b.n	8005896 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	2200      	movs	r2, #0
 8005890:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005892:	2301      	movs	r3, #1
 8005894:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005896:	f000 fbe5 	bl	8006064 <vPortExitCritical>

	return xReturn;
 800589a:	69fb      	ldr	r3, [r7, #28]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3720      	adds	r7, #32
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}
 80058a4:	2000086c 	.word	0x2000086c
 80058a8:	20000880 	.word	0x20000880

080058ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80058b0:	4b03      	ldr	r3, [pc, #12]	; (80058c0 <vTaskMissedYield+0x14>)
 80058b2:	2201      	movs	r2, #1
 80058b4:	601a      	str	r2, [r3, #0]
}
 80058b6:	bf00      	nop
 80058b8:	46bd      	mov	sp, r7
 80058ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058be:	4770      	bx	lr
 80058c0:	2000087c 	.word	0x2000087c

080058c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80058cc:	f000 f852 	bl	8005974 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80058d0:	4b06      	ldr	r3, [pc, #24]	; (80058ec <prvIdleTask+0x28>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d9f9      	bls.n	80058cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <prvIdleTask+0x2c>)
 80058da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058de:	601a      	str	r2, [r3, #0]
 80058e0:	f3bf 8f4f 	dsb	sy
 80058e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80058e8:	e7f0      	b.n	80058cc <prvIdleTask+0x8>
 80058ea:	bf00      	nop
 80058ec:	2000076c 	.word	0x2000076c
 80058f0:	e000ed04 	.word	0xe000ed04

080058f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80058fa:	2300      	movs	r3, #0
 80058fc:	607b      	str	r3, [r7, #4]
 80058fe:	e00c      	b.n	800591a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4613      	mov	r3, r2
 8005904:	009b      	lsls	r3, r3, #2
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	4a12      	ldr	r2, [pc, #72]	; (8005954 <prvInitialiseTaskLists+0x60>)
 800590c:	4413      	add	r3, r2
 800590e:	4618      	mov	r0, r3
 8005910:	f7fe fefd 	bl	800470e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	3301      	adds	r3, #1
 8005918:	607b      	str	r3, [r7, #4]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2b06      	cmp	r3, #6
 800591e:	d9ef      	bls.n	8005900 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005920:	480d      	ldr	r0, [pc, #52]	; (8005958 <prvInitialiseTaskLists+0x64>)
 8005922:	f7fe fef4 	bl	800470e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005926:	480d      	ldr	r0, [pc, #52]	; (800595c <prvInitialiseTaskLists+0x68>)
 8005928:	f7fe fef1 	bl	800470e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800592c:	480c      	ldr	r0, [pc, #48]	; (8005960 <prvInitialiseTaskLists+0x6c>)
 800592e:	f7fe feee 	bl	800470e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005932:	480c      	ldr	r0, [pc, #48]	; (8005964 <prvInitialiseTaskLists+0x70>)
 8005934:	f7fe feeb 	bl	800470e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005938:	480b      	ldr	r0, [pc, #44]	; (8005968 <prvInitialiseTaskLists+0x74>)
 800593a:	f7fe fee8 	bl	800470e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800593e:	4b0b      	ldr	r3, [pc, #44]	; (800596c <prvInitialiseTaskLists+0x78>)
 8005940:	4a05      	ldr	r2, [pc, #20]	; (8005958 <prvInitialiseTaskLists+0x64>)
 8005942:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005944:	4b0a      	ldr	r3, [pc, #40]	; (8005970 <prvInitialiseTaskLists+0x7c>)
 8005946:	4a05      	ldr	r2, [pc, #20]	; (800595c <prvInitialiseTaskLists+0x68>)
 8005948:	601a      	str	r2, [r3, #0]
}
 800594a:	bf00      	nop
 800594c:	3708      	adds	r7, #8
 800594e:	46bd      	mov	sp, r7
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	2000076c 	.word	0x2000076c
 8005958:	200007f8 	.word	0x200007f8
 800595c:	2000080c 	.word	0x2000080c
 8005960:	20000828 	.word	0x20000828
 8005964:	2000083c 	.word	0x2000083c
 8005968:	20000854 	.word	0x20000854
 800596c:	20000820 	.word	0x20000820
 8005970:	20000824 	.word	0x20000824

08005974 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800597a:	e019      	b.n	80059b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800597c:	f000 fb3e 	bl	8005ffc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005980:	4b10      	ldr	r3, [pc, #64]	; (80059c4 <prvCheckTasksWaitingTermination+0x50>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3304      	adds	r3, #4
 800598c:	4618      	mov	r0, r3
 800598e:	f7fe ff48 	bl	8004822 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005992:	4b0d      	ldr	r3, [pc, #52]	; (80059c8 <prvCheckTasksWaitingTermination+0x54>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3b01      	subs	r3, #1
 8005998:	4a0b      	ldr	r2, [pc, #44]	; (80059c8 <prvCheckTasksWaitingTermination+0x54>)
 800599a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800599c:	4b0b      	ldr	r3, [pc, #44]	; (80059cc <prvCheckTasksWaitingTermination+0x58>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3b01      	subs	r3, #1
 80059a2:	4a0a      	ldr	r2, [pc, #40]	; (80059cc <prvCheckTasksWaitingTermination+0x58>)
 80059a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80059a6:	f000 fb5d 	bl	8006064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f810 	bl	80059d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80059b0:	4b06      	ldr	r3, [pc, #24]	; (80059cc <prvCheckTasksWaitingTermination+0x58>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1e1      	bne.n	800597c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	3708      	adds	r7, #8
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
 80059c2:	bf00      	nop
 80059c4:	2000083c 	.word	0x2000083c
 80059c8:	20000868 	.word	0x20000868
 80059cc:	20000850 	.word	0x20000850

080059d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b084      	sub	sp, #16
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	334c      	adds	r3, #76	; 0x4c
 80059dc:	4618      	mov	r0, r3
 80059de:	f001 f8ef 	bl	8006bc0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d108      	bne.n	80059fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fcf9 	bl	80063e8 <vPortFree>
				vPortFree( pxTCB );
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fcf6 	bl	80063e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80059fc:	e01a      	b.n	8005a34 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a04:	2b01      	cmp	r3, #1
 8005a06:	d103      	bne.n	8005a10 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f000 fced 	bl	80063e8 <vPortFree>
	}
 8005a0e:	e011      	b.n	8005a34 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d00c      	beq.n	8005a34 <prvDeleteTCB+0x64>
	__asm volatile
 8005a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1e:	b672      	cpsid	i
 8005a20:	f383 8811 	msr	BASEPRI, r3
 8005a24:	f3bf 8f6f 	isb	sy
 8005a28:	f3bf 8f4f 	dsb	sy
 8005a2c:	b662      	cpsie	i
 8005a2e:	60fb      	str	r3, [r7, #12]
}
 8005a30:	bf00      	nop
 8005a32:	e7fe      	b.n	8005a32 <prvDeleteTCB+0x62>
	}
 8005a34:	bf00      	nop
 8005a36:	3710      	adds	r7, #16
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}

08005a3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005a42:	4b0c      	ldr	r3, [pc, #48]	; (8005a74 <prvResetNextTaskUnblockTime+0x38>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d104      	bne.n	8005a56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005a4c:	4b0a      	ldr	r3, [pc, #40]	; (8005a78 <prvResetNextTaskUnblockTime+0x3c>)
 8005a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8005a52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005a54:	e008      	b.n	8005a68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a56:	4b07      	ldr	r3, [pc, #28]	; (8005a74 <prvResetNextTaskUnblockTime+0x38>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	68db      	ldr	r3, [r3, #12]
 8005a5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	4a04      	ldr	r2, [pc, #16]	; (8005a78 <prvResetNextTaskUnblockTime+0x3c>)
 8005a66:	6013      	str	r3, [r2, #0]
}
 8005a68:	bf00      	nop
 8005a6a:	370c      	adds	r7, #12
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a72:	4770      	bx	lr
 8005a74:	20000820 	.word	0x20000820
 8005a78:	20000888 	.word	0x20000888

08005a7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005a7c:	b480      	push	{r7}
 8005a7e:	b083      	sub	sp, #12
 8005a80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005a82:	4b0b      	ldr	r3, [pc, #44]	; (8005ab0 <xTaskGetSchedulerState+0x34>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d102      	bne.n	8005a90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	607b      	str	r3, [r7, #4]
 8005a8e:	e008      	b.n	8005aa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a90:	4b08      	ldr	r3, [pc, #32]	; (8005ab4 <xTaskGetSchedulerState+0x38>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d102      	bne.n	8005a9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005a98:	2302      	movs	r3, #2
 8005a9a:	607b      	str	r3, [r7, #4]
 8005a9c:	e001      	b.n	8005aa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005aa2:	687b      	ldr	r3, [r7, #4]
	}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	370c      	adds	r7, #12
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr
 8005ab0:	20000874 	.word	0x20000874
 8005ab4:	20000890 	.word	0x20000890

08005ab8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d069      	beq.n	8005ba2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ad2:	4b36      	ldr	r3, [pc, #216]	; (8005bac <xTaskPriorityInherit+0xf4>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d259      	bcs.n	8005b90 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	699b      	ldr	r3, [r3, #24]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	db06      	blt.n	8005af2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ae4:	4b31      	ldr	r3, [pc, #196]	; (8005bac <xTaskPriorityInherit+0xf4>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	f1c3 0207 	rsb	r2, r3, #7
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	6959      	ldr	r1, [r3, #20]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	009b      	lsls	r3, r3, #2
 8005b02:	4a2b      	ldr	r2, [pc, #172]	; (8005bb0 <xTaskPriorityInherit+0xf8>)
 8005b04:	4413      	add	r3, r2
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d13a      	bne.n	8005b80 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fe fe87 	bl	8004822 <uxListRemove>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d115      	bne.n	8005b46 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1e:	4924      	ldr	r1, [pc, #144]	; (8005bb0 <xTaskPriorityInherit+0xf8>)
 8005b20:	4613      	mov	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	440b      	add	r3, r1
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10a      	bne.n	8005b46 <xTaskPriorityInherit+0x8e>
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	2201      	movs	r2, #1
 8005b36:	fa02 f303 	lsl.w	r3, r2, r3
 8005b3a:	43da      	mvns	r2, r3
 8005b3c:	4b1d      	ldr	r3, [pc, #116]	; (8005bb4 <xTaskPriorityInherit+0xfc>)
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4013      	ands	r3, r2
 8005b42:	4a1c      	ldr	r2, [pc, #112]	; (8005bb4 <xTaskPriorityInherit+0xfc>)
 8005b44:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b46:	4b19      	ldr	r3, [pc, #100]	; (8005bac <xTaskPriorityInherit+0xf4>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b54:	2201      	movs	r2, #1
 8005b56:	409a      	lsls	r2, r3
 8005b58:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <xTaskPriorityInherit+0xfc>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <xTaskPriorityInherit+0xfc>)
 8005b60:	6013      	str	r3, [r2, #0]
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <xTaskPriorityInherit+0xf8>)
 8005b70:	441a      	add	r2, r3
 8005b72:	68bb      	ldr	r3, [r7, #8]
 8005b74:	3304      	adds	r3, #4
 8005b76:	4619      	mov	r1, r3
 8005b78:	4610      	mov	r0, r2
 8005b7a:	f7fe fdf5 	bl	8004768 <vListInsertEnd>
 8005b7e:	e004      	b.n	8005b8a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005b80:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <xTaskPriorityInherit+0xf4>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	60fb      	str	r3, [r7, #12]
 8005b8e:	e008      	b.n	8005ba2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <xTaskPriorityInherit+0xf4>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d201      	bcs.n	8005ba2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
	}
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	3710      	adds	r7, #16
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	bd80      	pop	{r7, pc}
 8005bac:	20000768 	.word	0x20000768
 8005bb0:	2000076c 	.word	0x2000076c
 8005bb4:	20000870 	.word	0x20000870

08005bb8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b088      	sub	sp, #32
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	f000 8087 	beq.w	8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005bd2:	69bb      	ldr	r3, [r7, #24]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10c      	bne.n	8005bf4 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bde:	b672      	cpsid	i
 8005be0:	f383 8811 	msr	BASEPRI, r3
 8005be4:	f3bf 8f6f 	isb	sy
 8005be8:	f3bf 8f4f 	dsb	sy
 8005bec:	b662      	cpsie	i
 8005bee:	60fb      	str	r3, [r7, #12]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bf8:	683a      	ldr	r2, [r7, #0]
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d902      	bls.n	8005c04 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	61fb      	str	r3, [r7, #28]
 8005c02:	e002      	b.n	8005c0a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c08:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005c0a:	69bb      	ldr	r3, [r7, #24]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	69fa      	ldr	r2, [r7, #28]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d065      	beq.n	8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c18:	697a      	ldr	r2, [r7, #20]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d160      	bne.n	8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005c1e:	4b32      	ldr	r3, [pc, #200]	; (8005ce8 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	69ba      	ldr	r2, [r7, #24]
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d10c      	bne.n	8005c42 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8005c28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c2c:	b672      	cpsid	i
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	b662      	cpsie	i
 8005c3c:	60bb      	str	r3, [r7, #8]
}
 8005c3e:	bf00      	nop
 8005c40:	e7fe      	b.n	8005c40 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c46:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	69fa      	ldr	r2, [r7, #28]
 8005c4c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005c4e:	69bb      	ldr	r3, [r7, #24]
 8005c50:	699b      	ldr	r3, [r3, #24]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	db04      	blt.n	8005c60 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c56:	69fb      	ldr	r3, [r7, #28]
 8005c58:	f1c3 0207 	rsb	r2, r3, #7
 8005c5c:	69bb      	ldr	r3, [r7, #24]
 8005c5e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	6959      	ldr	r1, [r3, #20]
 8005c64:	693a      	ldr	r2, [r7, #16]
 8005c66:	4613      	mov	r3, r2
 8005c68:	009b      	lsls	r3, r3, #2
 8005c6a:	4413      	add	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4a1f      	ldr	r2, [pc, #124]	; (8005cec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005c70:	4413      	add	r3, r2
 8005c72:	4299      	cmp	r1, r3
 8005c74:	d134      	bne.n	8005ce0 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	3304      	adds	r3, #4
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe fdd1 	bl	8004822 <uxListRemove>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d115      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005c86:	69bb      	ldr	r3, [r7, #24]
 8005c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c8a:	4918      	ldr	r1, [pc, #96]	; (8005cec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	009b      	lsls	r3, r3, #2
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d10a      	bne.n	8005cb2 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8005c9c:	69bb      	ldr	r3, [r7, #24]
 8005c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca6:	43da      	mvns	r2, r3
 8005ca8:	4b11      	ldr	r3, [pc, #68]	; (8005cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4013      	ands	r3, r2
 8005cae:	4a10      	ldr	r2, [pc, #64]	; (8005cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cb0:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	409a      	lsls	r2, r3
 8005cba:	4b0d      	ldr	r3, [pc, #52]	; (8005cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	4313      	orrs	r3, r2
 8005cc0:	4a0b      	ldr	r2, [pc, #44]	; (8005cf0 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8005cc2:	6013      	str	r3, [r2, #0]
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	4613      	mov	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4a06      	ldr	r2, [pc, #24]	; (8005cec <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8005cd2:	441a      	add	r2, r3
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	3304      	adds	r3, #4
 8005cd8:	4619      	mov	r1, r3
 8005cda:	4610      	mov	r0, r2
 8005cdc:	f7fe fd44 	bl	8004768 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ce0:	bf00      	nop
 8005ce2:	3720      	adds	r7, #32
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	20000768 	.word	0x20000768
 8005cec:	2000076c 	.word	0x2000076c
 8005cf0:	20000870 	.word	0x20000870

08005cf4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005cf4:	b480      	push	{r7}
 8005cf6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005cf8:	4b07      	ldr	r3, [pc, #28]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d004      	beq.n	8005d0a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005d00:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005d06:	3201      	adds	r2, #1
 8005d08:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8005d0a:	4b03      	ldr	r3, [pc, #12]	; (8005d18 <pvTaskIncrementMutexHeldCount+0x24>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
	}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	20000768 	.word	0x20000768

08005d1c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b084      	sub	sp, #16
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
 8005d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d26:	4b29      	ldr	r3, [pc, #164]	; (8005dcc <prvAddCurrentTaskToDelayedList+0xb0>)
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d2c:	4b28      	ldr	r3, [pc, #160]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3304      	adds	r3, #4
 8005d32:	4618      	mov	r0, r3
 8005d34:	f7fe fd75 	bl	8004822 <uxListRemove>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d10b      	bne.n	8005d56 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8005d3e:	4b24      	ldr	r3, [pc, #144]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	2201      	movs	r2, #1
 8005d46:	fa02 f303 	lsl.w	r3, r2, r3
 8005d4a:	43da      	mvns	r2, r3
 8005d4c:	4b21      	ldr	r3, [pc, #132]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4013      	ands	r3, r2
 8005d52:	4a20      	ldr	r2, [pc, #128]	; (8005dd4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005d54:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5c:	d10a      	bne.n	8005d74 <prvAddCurrentTaskToDelayedList+0x58>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d007      	beq.n	8005d74 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d64:	4b1a      	ldr	r3, [pc, #104]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3304      	adds	r3, #4
 8005d6a:	4619      	mov	r1, r3
 8005d6c:	481a      	ldr	r0, [pc, #104]	; (8005dd8 <prvAddCurrentTaskToDelayedList+0xbc>)
 8005d6e:	f7fe fcfb 	bl	8004768 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d72:	e026      	b.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d74:	68fa      	ldr	r2, [r7, #12]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d7c:	4b14      	ldr	r3, [pc, #80]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d209      	bcs.n	8005da0 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d8c:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <prvAddCurrentTaskToDelayedList+0xc0>)
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	4b0f      	ldr	r3, [pc, #60]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f7fe fd09 	bl	80047b0 <vListInsert>
}
 8005d9e:	e010      	b.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	4b0a      	ldr	r3, [pc, #40]	; (8005dd0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	3304      	adds	r3, #4
 8005daa:	4619      	mov	r1, r3
 8005dac:	4610      	mov	r0, r2
 8005dae:	f7fe fcff 	bl	80047b0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005db2:	4b0c      	ldr	r3, [pc, #48]	; (8005de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	68ba      	ldr	r2, [r7, #8]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d202      	bcs.n	8005dc2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005dbc:	4a09      	ldr	r2, [pc, #36]	; (8005de4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	6013      	str	r3, [r2, #0]
}
 8005dc2:	bf00      	nop
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	2000086c 	.word	0x2000086c
 8005dd0:	20000768 	.word	0x20000768
 8005dd4:	20000870 	.word	0x20000870
 8005dd8:	20000854 	.word	0x20000854
 8005ddc:	20000824 	.word	0x20000824
 8005de0:	20000820 	.word	0x20000820
 8005de4:	20000888 	.word	0x20000888

08005de8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	3b04      	subs	r3, #4
 8005df8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005e00:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	3b04      	subs	r3, #4
 8005e06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	f023 0201 	bic.w	r2, r3, #1
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	3b04      	subs	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005e18:	4a0c      	ldr	r2, [pc, #48]	; (8005e4c <pxPortInitialiseStack+0x64>)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	3b14      	subs	r3, #20
 8005e22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3b04      	subs	r3, #4
 8005e2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f06f 0202 	mvn.w	r2, #2
 8005e36:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3b20      	subs	r3, #32
 8005e3c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3714      	adds	r7, #20
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr
 8005e4c:	08005e51 	.word	0x08005e51

08005e50 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005e56:	2300      	movs	r3, #0
 8005e58:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <prvTaskExitError+0x5c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d00c      	beq.n	8005e7e <prvTaskExitError+0x2e>
	__asm volatile
 8005e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e68:	b672      	cpsid	i
 8005e6a:	f383 8811 	msr	BASEPRI, r3
 8005e6e:	f3bf 8f6f 	isb	sy
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	b662      	cpsie	i
 8005e78:	60fb      	str	r3, [r7, #12]
}
 8005e7a:	bf00      	nop
 8005e7c:	e7fe      	b.n	8005e7c <prvTaskExitError+0x2c>
	__asm volatile
 8005e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e82:	b672      	cpsid	i
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	b662      	cpsie	i
 8005e92:	60bb      	str	r3, [r7, #8]
}
 8005e94:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005e96:	bf00      	nop
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d0fc      	beq.n	8005e98 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e9e:	bf00      	nop
 8005ea0:	bf00      	nop
 8005ea2:	3714      	adds	r7, #20
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr
 8005eac:	20000014 	.word	0x20000014

08005eb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005eb0:	4b07      	ldr	r3, [pc, #28]	; (8005ed0 <pxCurrentTCBConst2>)
 8005eb2:	6819      	ldr	r1, [r3, #0]
 8005eb4:	6808      	ldr	r0, [r1, #0]
 8005eb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eba:	f380 8809 	msr	PSP, r0
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f04f 0000 	mov.w	r0, #0
 8005ec6:	f380 8811 	msr	BASEPRI, r0
 8005eca:	4770      	bx	lr
 8005ecc:	f3af 8000 	nop.w

08005ed0 <pxCurrentTCBConst2>:
 8005ed0:	20000768 	.word	0x20000768
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005ed4:	bf00      	nop
 8005ed6:	bf00      	nop

08005ed8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005ed8:	4808      	ldr	r0, [pc, #32]	; (8005efc <prvPortStartFirstTask+0x24>)
 8005eda:	6800      	ldr	r0, [r0, #0]
 8005edc:	6800      	ldr	r0, [r0, #0]
 8005ede:	f380 8808 	msr	MSP, r0
 8005ee2:	f04f 0000 	mov.w	r0, #0
 8005ee6:	f380 8814 	msr	CONTROL, r0
 8005eea:	b662      	cpsie	i
 8005eec:	b661      	cpsie	f
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	f3bf 8f6f 	isb	sy
 8005ef6:	df00      	svc	0
 8005ef8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005efa:	bf00      	nop
 8005efc:	e000ed08 	.word	0xe000ed08

08005f00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b084      	sub	sp, #16
 8005f04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f06:	4b37      	ldr	r3, [pc, #220]	; (8005fe4 <xPortStartScheduler+0xe4>)
 8005f08:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	22ff      	movs	r2, #255	; 0xff
 8005f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f20:	78fb      	ldrb	r3, [r7, #3]
 8005f22:	b2db      	uxtb	r3, r3
 8005f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005f28:	b2da      	uxtb	r2, r3
 8005f2a:	4b2f      	ldr	r3, [pc, #188]	; (8005fe8 <xPortStartScheduler+0xe8>)
 8005f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <xPortStartScheduler+0xec>)
 8005f30:	2207      	movs	r2, #7
 8005f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f34:	e009      	b.n	8005f4a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005f36:	4b2d      	ldr	r3, [pc, #180]	; (8005fec <xPortStartScheduler+0xec>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3b01      	subs	r3, #1
 8005f3c:	4a2b      	ldr	r2, [pc, #172]	; (8005fec <xPortStartScheduler+0xec>)
 8005f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f40:	78fb      	ldrb	r3, [r7, #3]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	005b      	lsls	r3, r3, #1
 8005f46:	b2db      	uxtb	r3, r3
 8005f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f4a:	78fb      	ldrb	r3, [r7, #3]
 8005f4c:	b2db      	uxtb	r3, r3
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	2b80      	cmp	r3, #128	; 0x80
 8005f54:	d0ef      	beq.n	8005f36 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f56:	4b25      	ldr	r3, [pc, #148]	; (8005fec <xPortStartScheduler+0xec>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f1c3 0307 	rsb	r3, r3, #7
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	d00c      	beq.n	8005f7c <xPortStartScheduler+0x7c>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f66:	b672      	cpsid	i
 8005f68:	f383 8811 	msr	BASEPRI, r3
 8005f6c:	f3bf 8f6f 	isb	sy
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	b662      	cpsie	i
 8005f76:	60bb      	str	r3, [r7, #8]
}
 8005f78:	bf00      	nop
 8005f7a:	e7fe      	b.n	8005f7a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <xPortStartScheduler+0xec>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	021b      	lsls	r3, r3, #8
 8005f82:	4a1a      	ldr	r2, [pc, #104]	; (8005fec <xPortStartScheduler+0xec>)
 8005f84:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f86:	4b19      	ldr	r3, [pc, #100]	; (8005fec <xPortStartScheduler+0xec>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005f8e:	4a17      	ldr	r2, [pc, #92]	; (8005fec <xPortStartScheduler+0xec>)
 8005f90:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	b2da      	uxtb	r2, r3
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005f9a:	4b15      	ldr	r3, [pc, #84]	; (8005ff0 <xPortStartScheduler+0xf0>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4a14      	ldr	r2, [pc, #80]	; (8005ff0 <xPortStartScheduler+0xf0>)
 8005fa0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005fa4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005fa6:	4b12      	ldr	r3, [pc, #72]	; (8005ff0 <xPortStartScheduler+0xf0>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a11      	ldr	r2, [pc, #68]	; (8005ff0 <xPortStartScheduler+0xf0>)
 8005fac:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005fb0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005fb2:	f000 f8dd 	bl	8006170 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005fb6:	4b0f      	ldr	r3, [pc, #60]	; (8005ff4 <xPortStartScheduler+0xf4>)
 8005fb8:	2200      	movs	r2, #0
 8005fba:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005fbc:	f000 f8fc 	bl	80061b8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <xPortStartScheduler+0xf8>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a0c      	ldr	r2, [pc, #48]	; (8005ff8 <xPortStartScheduler+0xf8>)
 8005fc6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005fca:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005fcc:	f7ff ff84 	bl	8005ed8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005fd0:	f7ff fb02 	bl	80055d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005fd4:	f7ff ff3c 	bl	8005e50 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005fd8:	2300      	movs	r3, #0
}
 8005fda:	4618      	mov	r0, r3
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	e000e400 	.word	0xe000e400
 8005fe8:	20000894 	.word	0x20000894
 8005fec:	20000898 	.word	0x20000898
 8005ff0:	e000ed20 	.word	0xe000ed20
 8005ff4:	20000014 	.word	0x20000014
 8005ff8:	e000ef34 	.word	0xe000ef34

08005ffc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
	__asm volatile
 8006002:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006006:	b672      	cpsid	i
 8006008:	f383 8811 	msr	BASEPRI, r3
 800600c:	f3bf 8f6f 	isb	sy
 8006010:	f3bf 8f4f 	dsb	sy
 8006014:	b662      	cpsie	i
 8006016:	607b      	str	r3, [r7, #4]
}
 8006018:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800601a:	4b10      	ldr	r3, [pc, #64]	; (800605c <vPortEnterCritical+0x60>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3301      	adds	r3, #1
 8006020:	4a0e      	ldr	r2, [pc, #56]	; (800605c <vPortEnterCritical+0x60>)
 8006022:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006024:	4b0d      	ldr	r3, [pc, #52]	; (800605c <vPortEnterCritical+0x60>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b01      	cmp	r3, #1
 800602a:	d111      	bne.n	8006050 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800602c:	4b0c      	ldr	r3, [pc, #48]	; (8006060 <vPortEnterCritical+0x64>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00c      	beq.n	8006050 <vPortEnterCritical+0x54>
	__asm volatile
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	b672      	cpsid	i
 800603c:	f383 8811 	msr	BASEPRI, r3
 8006040:	f3bf 8f6f 	isb	sy
 8006044:	f3bf 8f4f 	dsb	sy
 8006048:	b662      	cpsie	i
 800604a:	603b      	str	r3, [r7, #0]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <vPortEnterCritical+0x52>
	}
}
 8006050:	bf00      	nop
 8006052:	370c      	adds	r7, #12
 8006054:	46bd      	mov	sp, r7
 8006056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605a:	4770      	bx	lr
 800605c:	20000014 	.word	0x20000014
 8006060:	e000ed04 	.word	0xe000ed04

08006064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006064:	b480      	push	{r7}
 8006066:	b083      	sub	sp, #12
 8006068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800606a:	4b13      	ldr	r3, [pc, #76]	; (80060b8 <vPortExitCritical+0x54>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d10c      	bne.n	800608c <vPortExitCritical+0x28>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	b672      	cpsid	i
 8006078:	f383 8811 	msr	BASEPRI, r3
 800607c:	f3bf 8f6f 	isb	sy
 8006080:	f3bf 8f4f 	dsb	sy
 8006084:	b662      	cpsie	i
 8006086:	607b      	str	r3, [r7, #4]
}
 8006088:	bf00      	nop
 800608a:	e7fe      	b.n	800608a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800608c:	4b0a      	ldr	r3, [pc, #40]	; (80060b8 <vPortExitCritical+0x54>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3b01      	subs	r3, #1
 8006092:	4a09      	ldr	r2, [pc, #36]	; (80060b8 <vPortExitCritical+0x54>)
 8006094:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006096:	4b08      	ldr	r3, [pc, #32]	; (80060b8 <vPortExitCritical+0x54>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d105      	bne.n	80060aa <vPortExitCritical+0x46>
 800609e:	2300      	movs	r3, #0
 80060a0:	603b      	str	r3, [r7, #0]
	__asm volatile
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	f383 8811 	msr	BASEPRI, r3
}
 80060a8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80060aa:	bf00      	nop
 80060ac:	370c      	adds	r7, #12
 80060ae:	46bd      	mov	sp, r7
 80060b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b4:	4770      	bx	lr
 80060b6:	bf00      	nop
 80060b8:	20000014 	.word	0x20000014
 80060bc:	00000000 	.word	0x00000000

080060c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80060c0:	f3ef 8009 	mrs	r0, PSP
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	4b15      	ldr	r3, [pc, #84]	; (8006120 <pxCurrentTCBConst>)
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	f01e 0f10 	tst.w	lr, #16
 80060d0:	bf08      	it	eq
 80060d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060da:	6010      	str	r0, [r2, #0]
 80060dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80060e4:	b672      	cpsid	i
 80060e6:	f380 8811 	msr	BASEPRI, r0
 80060ea:	f3bf 8f4f 	dsb	sy
 80060ee:	f3bf 8f6f 	isb	sy
 80060f2:	b662      	cpsie	i
 80060f4:	f7ff fa70 	bl	80055d8 <vTaskSwitchContext>
 80060f8:	f04f 0000 	mov.w	r0, #0
 80060fc:	f380 8811 	msr	BASEPRI, r0
 8006100:	bc09      	pop	{r0, r3}
 8006102:	6819      	ldr	r1, [r3, #0]
 8006104:	6808      	ldr	r0, [r1, #0]
 8006106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610a:	f01e 0f10 	tst.w	lr, #16
 800610e:	bf08      	it	eq
 8006110:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006114:	f380 8809 	msr	PSP, r0
 8006118:	f3bf 8f6f 	isb	sy
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <pxCurrentTCBConst>:
 8006120:	20000768 	.word	0x20000768
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop

08006128 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b082      	sub	sp, #8
 800612c:	af00      	add	r7, sp, #0
	__asm volatile
 800612e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006132:	b672      	cpsid	i
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	b662      	cpsie	i
 8006142:	607b      	str	r3, [r7, #4]
}
 8006144:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006146:	f7ff f98d 	bl	8005464 <xTaskIncrementTick>
 800614a:	4603      	mov	r3, r0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d003      	beq.n	8006158 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <SysTick_Handler+0x44>)
 8006152:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006156:	601a      	str	r2, [r3, #0]
 8006158:	2300      	movs	r3, #0
 800615a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	f383 8811 	msr	BASEPRI, r3
}
 8006162:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006164:	bf00      	nop
 8006166:	3708      	adds	r7, #8
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	e000ed04 	.word	0xe000ed04

08006170 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006170:	b480      	push	{r7}
 8006172:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006174:	4b0b      	ldr	r3, [pc, #44]	; (80061a4 <vPortSetupTimerInterrupt+0x34>)
 8006176:	2200      	movs	r2, #0
 8006178:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800617a:	4b0b      	ldr	r3, [pc, #44]	; (80061a8 <vPortSetupTimerInterrupt+0x38>)
 800617c:	2200      	movs	r2, #0
 800617e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <vPortSetupTimerInterrupt+0x3c>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a0a      	ldr	r2, [pc, #40]	; (80061b0 <vPortSetupTimerInterrupt+0x40>)
 8006186:	fba2 2303 	umull	r2, r3, r2, r3
 800618a:	099b      	lsrs	r3, r3, #6
 800618c:	4a09      	ldr	r2, [pc, #36]	; (80061b4 <vPortSetupTimerInterrupt+0x44>)
 800618e:	3b01      	subs	r3, #1
 8006190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <vPortSetupTimerInterrupt+0x34>)
 8006194:	2207      	movs	r2, #7
 8006196:	601a      	str	r2, [r3, #0]
}
 8006198:	bf00      	nop
 800619a:	46bd      	mov	sp, r7
 800619c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a0:	4770      	bx	lr
 80061a2:	bf00      	nop
 80061a4:	e000e010 	.word	0xe000e010
 80061a8:	e000e018 	.word	0xe000e018
 80061ac:	20000008 	.word	0x20000008
 80061b0:	10624dd3 	.word	0x10624dd3
 80061b4:	e000e014 	.word	0xe000e014

080061b8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80061b8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80061c8 <vPortEnableVFP+0x10>
 80061bc:	6801      	ldr	r1, [r0, #0]
 80061be:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80061c2:	6001      	str	r1, [r0, #0]
 80061c4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80061c6:	bf00      	nop
 80061c8:	e000ed88 	.word	0xe000ed88

080061cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80061d2:	f3ef 8305 	mrs	r3, IPSR
 80061d6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b0f      	cmp	r3, #15
 80061dc:	d916      	bls.n	800620c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061de:	4a19      	ldr	r2, [pc, #100]	; (8006244 <vPortValidateInterruptPriority+0x78>)
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <vPortValidateInterruptPriority+0x7c>)
 80061ea:	781b      	ldrb	r3, [r3, #0]
 80061ec:	7afa      	ldrb	r2, [r7, #11]
 80061ee:	429a      	cmp	r2, r3
 80061f0:	d20c      	bcs.n	800620c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80061f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f6:	b672      	cpsid	i
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	b662      	cpsie	i
 8006206:	607b      	str	r3, [r7, #4]
}
 8006208:	bf00      	nop
 800620a:	e7fe      	b.n	800620a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800620c:	4b0f      	ldr	r3, [pc, #60]	; (800624c <vPortValidateInterruptPriority+0x80>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006214:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <vPortValidateInterruptPriority+0x84>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d90c      	bls.n	8006236 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800621c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006220:	b672      	cpsid	i
 8006222:	f383 8811 	msr	BASEPRI, r3
 8006226:	f3bf 8f6f 	isb	sy
 800622a:	f3bf 8f4f 	dsb	sy
 800622e:	b662      	cpsie	i
 8006230:	603b      	str	r3, [r7, #0]
}
 8006232:	bf00      	nop
 8006234:	e7fe      	b.n	8006234 <vPortValidateInterruptPriority+0x68>
	}
 8006236:	bf00      	nop
 8006238:	3714      	adds	r7, #20
 800623a:	46bd      	mov	sp, r7
 800623c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006240:	4770      	bx	lr
 8006242:	bf00      	nop
 8006244:	e000e3f0 	.word	0xe000e3f0
 8006248:	20000894 	.word	0x20000894
 800624c:	e000ed0c 	.word	0xe000ed0c
 8006250:	20000898 	.word	0x20000898

08006254 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08a      	sub	sp, #40	; 0x28
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800625c:	2300      	movs	r3, #0
 800625e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006260:	f7ff f854 	bl	800530c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006264:	4b5b      	ldr	r3, [pc, #364]	; (80063d4 <pvPortMalloc+0x180>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d101      	bne.n	8006270 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800626c:	f000 f91a 	bl	80064a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006270:	4b59      	ldr	r3, [pc, #356]	; (80063d8 <pvPortMalloc+0x184>)
 8006272:	681a      	ldr	r2, [r3, #0]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	4013      	ands	r3, r2
 8006278:	2b00      	cmp	r3, #0
 800627a:	f040 8092 	bne.w	80063a2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d01f      	beq.n	80062c4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8006284:	2208      	movs	r2, #8
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4413      	add	r3, r2
 800628a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f003 0307 	and.w	r3, r3, #7
 8006292:	2b00      	cmp	r3, #0
 8006294:	d016      	beq.n	80062c4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f023 0307 	bic.w	r3, r3, #7
 800629c:	3308      	adds	r3, #8
 800629e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f003 0307 	and.w	r3, r3, #7
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d00c      	beq.n	80062c4 <pvPortMalloc+0x70>
	__asm volatile
 80062aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ae:	b672      	cpsid	i
 80062b0:	f383 8811 	msr	BASEPRI, r3
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	b662      	cpsie	i
 80062be:	617b      	str	r3, [r7, #20]
}
 80062c0:	bf00      	nop
 80062c2:	e7fe      	b.n	80062c2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d06b      	beq.n	80063a2 <pvPortMalloc+0x14e>
 80062ca:	4b44      	ldr	r3, [pc, #272]	; (80063dc <pvPortMalloc+0x188>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	429a      	cmp	r2, r3
 80062d2:	d866      	bhi.n	80063a2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80062d4:	4b42      	ldr	r3, [pc, #264]	; (80063e0 <pvPortMalloc+0x18c>)
 80062d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80062d8:	4b41      	ldr	r3, [pc, #260]	; (80063e0 <pvPortMalloc+0x18c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062de:	e004      	b.n	80062ea <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80062e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80062ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ec:	685b      	ldr	r3, [r3, #4]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	429a      	cmp	r2, r3
 80062f2:	d903      	bls.n	80062fc <pvPortMalloc+0xa8>
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d1f1      	bne.n	80062e0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80062fc:	4b35      	ldr	r3, [pc, #212]	; (80063d4 <pvPortMalloc+0x180>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006302:	429a      	cmp	r2, r3
 8006304:	d04d      	beq.n	80063a2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2208      	movs	r2, #8
 800630c:	4413      	add	r3, r2
 800630e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	1ad2      	subs	r2, r2, r3
 8006320:	2308      	movs	r3, #8
 8006322:	005b      	lsls	r3, r3, #1
 8006324:	429a      	cmp	r2, r3
 8006326:	d921      	bls.n	800636c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4413      	add	r3, r2
 800632e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	2b00      	cmp	r3, #0
 8006338:	d00c      	beq.n	8006354 <pvPortMalloc+0x100>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800633e:	b672      	cpsid	i
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	b662      	cpsie	i
 800634e:	613b      	str	r3, [r7, #16]
}
 8006350:	bf00      	nop
 8006352:	e7fe      	b.n	8006352 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	1ad2      	subs	r2, r2, r3
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006362:	687a      	ldr	r2, [r7, #4]
 8006364:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006366:	69b8      	ldr	r0, [r7, #24]
 8006368:	f000 f8fe 	bl	8006568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800636c:	4b1b      	ldr	r3, [pc, #108]	; (80063dc <pvPortMalloc+0x188>)
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	1ad3      	subs	r3, r2, r3
 8006376:	4a19      	ldr	r2, [pc, #100]	; (80063dc <pvPortMalloc+0x188>)
 8006378:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800637a:	4b18      	ldr	r3, [pc, #96]	; (80063dc <pvPortMalloc+0x188>)
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4b19      	ldr	r3, [pc, #100]	; (80063e4 <pvPortMalloc+0x190>)
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	429a      	cmp	r2, r3
 8006384:	d203      	bcs.n	800638e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006386:	4b15      	ldr	r3, [pc, #84]	; (80063dc <pvPortMalloc+0x188>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	4a16      	ldr	r2, [pc, #88]	; (80063e4 <pvPortMalloc+0x190>)
 800638c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800638e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006390:	685a      	ldr	r2, [r3, #4]
 8006392:	4b11      	ldr	r3, [pc, #68]	; (80063d8 <pvPortMalloc+0x184>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	431a      	orrs	r2, r3
 8006398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800639c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800639e:	2200      	movs	r2, #0
 80063a0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80063a2:	f7fe ffc1 	bl	8005328 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	f003 0307 	and.w	r3, r3, #7
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d00c      	beq.n	80063ca <pvPortMalloc+0x176>
	__asm volatile
 80063b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b4:	b672      	cpsid	i
 80063b6:	f383 8811 	msr	BASEPRI, r3
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	f3bf 8f4f 	dsb	sy
 80063c2:	b662      	cpsie	i
 80063c4:	60fb      	str	r3, [r7, #12]
}
 80063c6:	bf00      	nop
 80063c8:	e7fe      	b.n	80063c8 <pvPortMalloc+0x174>
	return pvReturn;
 80063ca:	69fb      	ldr	r3, [r7, #28]
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3728      	adds	r7, #40	; 0x28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	200056c4 	.word	0x200056c4
 80063d8:	200056d0 	.word	0x200056d0
 80063dc:	200056c8 	.word	0x200056c8
 80063e0:	200056bc 	.word	0x200056bc
 80063e4:	200056cc 	.word	0x200056cc

080063e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b086      	sub	sp, #24
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d04c      	beq.n	8006494 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80063fa:	2308      	movs	r3, #8
 80063fc:	425b      	negs	r3, r3
 80063fe:	697a      	ldr	r2, [r7, #20]
 8006400:	4413      	add	r3, r2
 8006402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	685a      	ldr	r2, [r3, #4]
 800640c:	4b23      	ldr	r3, [pc, #140]	; (800649c <vPortFree+0xb4>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4013      	ands	r3, r2
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10c      	bne.n	8006430 <vPortFree+0x48>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	b672      	cpsid	i
 800641c:	f383 8811 	msr	BASEPRI, r3
 8006420:	f3bf 8f6f 	isb	sy
 8006424:	f3bf 8f4f 	dsb	sy
 8006428:	b662      	cpsie	i
 800642a:	60fb      	str	r3, [r7, #12]
}
 800642c:	bf00      	nop
 800642e:	e7fe      	b.n	800642e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00c      	beq.n	8006452 <vPortFree+0x6a>
	__asm volatile
 8006438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643c:	b672      	cpsid	i
 800643e:	f383 8811 	msr	BASEPRI, r3
 8006442:	f3bf 8f6f 	isb	sy
 8006446:	f3bf 8f4f 	dsb	sy
 800644a:	b662      	cpsie	i
 800644c:	60bb      	str	r3, [r7, #8]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	685a      	ldr	r2, [r3, #4]
 8006456:	4b11      	ldr	r3, [pc, #68]	; (800649c <vPortFree+0xb4>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d019      	beq.n	8006494 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006460:	693b      	ldr	r3, [r7, #16]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d115      	bne.n	8006494 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	685a      	ldr	r2, [r3, #4]
 800646c:	4b0b      	ldr	r3, [pc, #44]	; (800649c <vPortFree+0xb4>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	43db      	mvns	r3, r3
 8006472:	401a      	ands	r2, r3
 8006474:	693b      	ldr	r3, [r7, #16]
 8006476:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006478:	f7fe ff48 	bl	800530c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	685a      	ldr	r2, [r3, #4]
 8006480:	4b07      	ldr	r3, [pc, #28]	; (80064a0 <vPortFree+0xb8>)
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4413      	add	r3, r2
 8006486:	4a06      	ldr	r2, [pc, #24]	; (80064a0 <vPortFree+0xb8>)
 8006488:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800648a:	6938      	ldr	r0, [r7, #16]
 800648c:	f000 f86c 	bl	8006568 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006490:	f7fe ff4a 	bl	8005328 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006494:	bf00      	nop
 8006496:	3718      	adds	r7, #24
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}
 800649c:	200056d0 	.word	0x200056d0
 80064a0:	200056c8 	.word	0x200056c8

080064a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80064ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <prvHeapInit+0xac>)
 80064b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f003 0307 	and.w	r3, r3, #7
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	3307      	adds	r3, #7
 80064c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	f023 0307 	bic.w	r3, r3, #7
 80064ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	1ad3      	subs	r3, r2, r3
 80064d2:	4a1f      	ldr	r2, [pc, #124]	; (8006550 <prvHeapInit+0xac>)
 80064d4:	4413      	add	r3, r2
 80064d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80064dc:	4a1d      	ldr	r2, [pc, #116]	; (8006554 <prvHeapInit+0xb0>)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80064e2:	4b1c      	ldr	r3, [pc, #112]	; (8006554 <prvHeapInit+0xb0>)
 80064e4:	2200      	movs	r2, #0
 80064e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80064f0:	2208      	movs	r2, #8
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	1a9b      	subs	r3, r3, r2
 80064f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0307 	bic.w	r3, r3, #7
 80064fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <prvHeapInit+0xb4>)
 8006504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006506:	4b14      	ldr	r3, [pc, #80]	; (8006558 <prvHeapInit+0xb4>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	2200      	movs	r2, #0
 800650c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800650e:	4b12      	ldr	r3, [pc, #72]	; (8006558 <prvHeapInit+0xb4>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2200      	movs	r2, #0
 8006514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	1ad2      	subs	r2, r2, r3
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006524:	4b0c      	ldr	r3, [pc, #48]	; (8006558 <prvHeapInit+0xb4>)
 8006526:	681a      	ldr	r2, [r3, #0]
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	685b      	ldr	r3, [r3, #4]
 8006530:	4a0a      	ldr	r2, [pc, #40]	; (800655c <prvHeapInit+0xb8>)
 8006532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	4a09      	ldr	r2, [pc, #36]	; (8006560 <prvHeapInit+0xbc>)
 800653a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800653c:	4b09      	ldr	r3, [pc, #36]	; (8006564 <prvHeapInit+0xc0>)
 800653e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006542:	601a      	str	r2, [r3, #0]
}
 8006544:	bf00      	nop
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	2000089c 	.word	0x2000089c
 8006554:	200056bc 	.word	0x200056bc
 8006558:	200056c4 	.word	0x200056c4
 800655c:	200056cc 	.word	0x200056cc
 8006560:	200056c8 	.word	0x200056c8
 8006564:	200056d0 	.word	0x200056d0

08006568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006568:	b480      	push	{r7}
 800656a:	b085      	sub	sp, #20
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006570:	4b28      	ldr	r3, [pc, #160]	; (8006614 <prvInsertBlockIntoFreeList+0xac>)
 8006572:	60fb      	str	r3, [r7, #12]
 8006574:	e002      	b.n	800657c <prvInsertBlockIntoFreeList+0x14>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	60fb      	str	r3, [r7, #12]
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	687a      	ldr	r2, [r7, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	d8f7      	bhi.n	8006576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4413      	add	r3, r2
 8006592:	687a      	ldr	r2, [r7, #4]
 8006594:	429a      	cmp	r2, r3
 8006596:	d108      	bne.n	80065aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	441a      	add	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68ba      	ldr	r2, [r7, #8]
 80065b4:	441a      	add	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d118      	bne.n	80065f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681a      	ldr	r2, [r3, #0]
 80065c2:	4b15      	ldr	r3, [pc, #84]	; (8006618 <prvInsertBlockIntoFreeList+0xb0>)
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	429a      	cmp	r2, r3
 80065c8:	d00d      	beq.n	80065e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	685a      	ldr	r2, [r3, #4]
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	685b      	ldr	r3, [r3, #4]
 80065d4:	441a      	add	r2, r3
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
 80065e4:	e008      	b.n	80065f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80065e6:	4b0c      	ldr	r3, [pc, #48]	; (8006618 <prvInsertBlockIntoFreeList+0xb0>)
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	e003      	b.n	80065f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d002      	beq.n	8006606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	687a      	ldr	r2, [r7, #4]
 8006604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	200056bc 	.word	0x200056bc
 8006618:	200056c4 	.word	0x200056c4

0800661c <atoi>:
 800661c:	220a      	movs	r2, #10
 800661e:	2100      	movs	r1, #0
 8006620:	f000 b882 	b.w	8006728 <strtol>

08006624 <_strtol_l.constprop.0>:
 8006624:	2b01      	cmp	r3, #1
 8006626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800662a:	d001      	beq.n	8006630 <_strtol_l.constprop.0+0xc>
 800662c:	2b24      	cmp	r3, #36	; 0x24
 800662e:	d906      	bls.n	800663e <_strtol_l.constprop.0+0x1a>
 8006630:	f000 fb52 	bl	8006cd8 <__errno>
 8006634:	2316      	movs	r3, #22
 8006636:	6003      	str	r3, [r0, #0]
 8006638:	2000      	movs	r0, #0
 800663a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800663e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006724 <_strtol_l.constprop.0+0x100>
 8006642:	460d      	mov	r5, r1
 8006644:	462e      	mov	r6, r5
 8006646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800664a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800664e:	f017 0708 	ands.w	r7, r7, #8
 8006652:	d1f7      	bne.n	8006644 <_strtol_l.constprop.0+0x20>
 8006654:	2c2d      	cmp	r4, #45	; 0x2d
 8006656:	d132      	bne.n	80066be <_strtol_l.constprop.0+0x9a>
 8006658:	782c      	ldrb	r4, [r5, #0]
 800665a:	2701      	movs	r7, #1
 800665c:	1cb5      	adds	r5, r6, #2
 800665e:	2b00      	cmp	r3, #0
 8006660:	d05b      	beq.n	800671a <_strtol_l.constprop.0+0xf6>
 8006662:	2b10      	cmp	r3, #16
 8006664:	d109      	bne.n	800667a <_strtol_l.constprop.0+0x56>
 8006666:	2c30      	cmp	r4, #48	; 0x30
 8006668:	d107      	bne.n	800667a <_strtol_l.constprop.0+0x56>
 800666a:	782c      	ldrb	r4, [r5, #0]
 800666c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006670:	2c58      	cmp	r4, #88	; 0x58
 8006672:	d14d      	bne.n	8006710 <_strtol_l.constprop.0+0xec>
 8006674:	786c      	ldrb	r4, [r5, #1]
 8006676:	2310      	movs	r3, #16
 8006678:	3502      	adds	r5, #2
 800667a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800667e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006682:	f04f 0e00 	mov.w	lr, #0
 8006686:	fbb8 f9f3 	udiv	r9, r8, r3
 800668a:	4676      	mov	r6, lr
 800668c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006690:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006694:	f1bc 0f09 	cmp.w	ip, #9
 8006698:	d816      	bhi.n	80066c8 <_strtol_l.constprop.0+0xa4>
 800669a:	4664      	mov	r4, ip
 800669c:	42a3      	cmp	r3, r4
 800669e:	dd24      	ble.n	80066ea <_strtol_l.constprop.0+0xc6>
 80066a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80066a4:	d008      	beq.n	80066b8 <_strtol_l.constprop.0+0x94>
 80066a6:	45b1      	cmp	r9, r6
 80066a8:	d31c      	bcc.n	80066e4 <_strtol_l.constprop.0+0xc0>
 80066aa:	d101      	bne.n	80066b0 <_strtol_l.constprop.0+0x8c>
 80066ac:	45a2      	cmp	sl, r4
 80066ae:	db19      	blt.n	80066e4 <_strtol_l.constprop.0+0xc0>
 80066b0:	fb06 4603 	mla	r6, r6, r3, r4
 80066b4:	f04f 0e01 	mov.w	lr, #1
 80066b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066bc:	e7e8      	b.n	8006690 <_strtol_l.constprop.0+0x6c>
 80066be:	2c2b      	cmp	r4, #43	; 0x2b
 80066c0:	bf04      	itt	eq
 80066c2:	782c      	ldrbeq	r4, [r5, #0]
 80066c4:	1cb5      	addeq	r5, r6, #2
 80066c6:	e7ca      	b.n	800665e <_strtol_l.constprop.0+0x3a>
 80066c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80066cc:	f1bc 0f19 	cmp.w	ip, #25
 80066d0:	d801      	bhi.n	80066d6 <_strtol_l.constprop.0+0xb2>
 80066d2:	3c37      	subs	r4, #55	; 0x37
 80066d4:	e7e2      	b.n	800669c <_strtol_l.constprop.0+0x78>
 80066d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80066da:	f1bc 0f19 	cmp.w	ip, #25
 80066de:	d804      	bhi.n	80066ea <_strtol_l.constprop.0+0xc6>
 80066e0:	3c57      	subs	r4, #87	; 0x57
 80066e2:	e7db      	b.n	800669c <_strtol_l.constprop.0+0x78>
 80066e4:	f04f 3eff 	mov.w	lr, #4294967295
 80066e8:	e7e6      	b.n	80066b8 <_strtol_l.constprop.0+0x94>
 80066ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80066ee:	d105      	bne.n	80066fc <_strtol_l.constprop.0+0xd8>
 80066f0:	2322      	movs	r3, #34	; 0x22
 80066f2:	6003      	str	r3, [r0, #0]
 80066f4:	4646      	mov	r6, r8
 80066f6:	b942      	cbnz	r2, 800670a <_strtol_l.constprop.0+0xe6>
 80066f8:	4630      	mov	r0, r6
 80066fa:	e79e      	b.n	800663a <_strtol_l.constprop.0+0x16>
 80066fc:	b107      	cbz	r7, 8006700 <_strtol_l.constprop.0+0xdc>
 80066fe:	4276      	negs	r6, r6
 8006700:	2a00      	cmp	r2, #0
 8006702:	d0f9      	beq.n	80066f8 <_strtol_l.constprop.0+0xd4>
 8006704:	f1be 0f00 	cmp.w	lr, #0
 8006708:	d000      	beq.n	800670c <_strtol_l.constprop.0+0xe8>
 800670a:	1e69      	subs	r1, r5, #1
 800670c:	6011      	str	r1, [r2, #0]
 800670e:	e7f3      	b.n	80066f8 <_strtol_l.constprop.0+0xd4>
 8006710:	2430      	movs	r4, #48	; 0x30
 8006712:	2b00      	cmp	r3, #0
 8006714:	d1b1      	bne.n	800667a <_strtol_l.constprop.0+0x56>
 8006716:	2308      	movs	r3, #8
 8006718:	e7af      	b.n	800667a <_strtol_l.constprop.0+0x56>
 800671a:	2c30      	cmp	r4, #48	; 0x30
 800671c:	d0a5      	beq.n	800666a <_strtol_l.constprop.0+0x46>
 800671e:	230a      	movs	r3, #10
 8006720:	e7ab      	b.n	800667a <_strtol_l.constprop.0+0x56>
 8006722:	bf00      	nop
 8006724:	08007c59 	.word	0x08007c59

08006728 <strtol>:
 8006728:	4613      	mov	r3, r2
 800672a:	460a      	mov	r2, r1
 800672c:	4601      	mov	r1, r0
 800672e:	4802      	ldr	r0, [pc, #8]	; (8006738 <strtol+0x10>)
 8006730:	6800      	ldr	r0, [r0, #0]
 8006732:	f7ff bf77 	b.w	8006624 <_strtol_l.constprop.0>
 8006736:	bf00      	nop
 8006738:	20000070 	.word	0x20000070

0800673c <std>:
 800673c:	2300      	movs	r3, #0
 800673e:	b510      	push	{r4, lr}
 8006740:	4604      	mov	r4, r0
 8006742:	e9c0 3300 	strd	r3, r3, [r0]
 8006746:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800674a:	6083      	str	r3, [r0, #8]
 800674c:	8181      	strh	r1, [r0, #12]
 800674e:	6643      	str	r3, [r0, #100]	; 0x64
 8006750:	81c2      	strh	r2, [r0, #14]
 8006752:	6183      	str	r3, [r0, #24]
 8006754:	4619      	mov	r1, r3
 8006756:	2208      	movs	r2, #8
 8006758:	305c      	adds	r0, #92	; 0x5c
 800675a:	f000 fa19 	bl	8006b90 <memset>
 800675e:	4b05      	ldr	r3, [pc, #20]	; (8006774 <std+0x38>)
 8006760:	6263      	str	r3, [r4, #36]	; 0x24
 8006762:	4b05      	ldr	r3, [pc, #20]	; (8006778 <std+0x3c>)
 8006764:	62a3      	str	r3, [r4, #40]	; 0x28
 8006766:	4b05      	ldr	r3, [pc, #20]	; (800677c <std+0x40>)
 8006768:	62e3      	str	r3, [r4, #44]	; 0x2c
 800676a:	4b05      	ldr	r3, [pc, #20]	; (8006780 <std+0x44>)
 800676c:	6224      	str	r4, [r4, #32]
 800676e:	6323      	str	r3, [r4, #48]	; 0x30
 8006770:	bd10      	pop	{r4, pc}
 8006772:	bf00      	nop
 8006774:	080069e1 	.word	0x080069e1
 8006778:	08006a03 	.word	0x08006a03
 800677c:	08006a3b 	.word	0x08006a3b
 8006780:	08006a5f 	.word	0x08006a5f

08006784 <stdio_exit_handler>:
 8006784:	4a02      	ldr	r2, [pc, #8]	; (8006790 <stdio_exit_handler+0xc>)
 8006786:	4903      	ldr	r1, [pc, #12]	; (8006794 <stdio_exit_handler+0x10>)
 8006788:	4803      	ldr	r0, [pc, #12]	; (8006798 <stdio_exit_handler+0x14>)
 800678a:	f000 b869 	b.w	8006860 <_fwalk_sglue>
 800678e:	bf00      	nop
 8006790:	20000018 	.word	0x20000018
 8006794:	080078a1 	.word	0x080078a1
 8006798:	20000024 	.word	0x20000024

0800679c <cleanup_stdio>:
 800679c:	6841      	ldr	r1, [r0, #4]
 800679e:	4b0c      	ldr	r3, [pc, #48]	; (80067d0 <cleanup_stdio+0x34>)
 80067a0:	4299      	cmp	r1, r3
 80067a2:	b510      	push	{r4, lr}
 80067a4:	4604      	mov	r4, r0
 80067a6:	d001      	beq.n	80067ac <cleanup_stdio+0x10>
 80067a8:	f001 f87a 	bl	80078a0 <_fflush_r>
 80067ac:	68a1      	ldr	r1, [r4, #8]
 80067ae:	4b09      	ldr	r3, [pc, #36]	; (80067d4 <cleanup_stdio+0x38>)
 80067b0:	4299      	cmp	r1, r3
 80067b2:	d002      	beq.n	80067ba <cleanup_stdio+0x1e>
 80067b4:	4620      	mov	r0, r4
 80067b6:	f001 f873 	bl	80078a0 <_fflush_r>
 80067ba:	68e1      	ldr	r1, [r4, #12]
 80067bc:	4b06      	ldr	r3, [pc, #24]	; (80067d8 <cleanup_stdio+0x3c>)
 80067be:	4299      	cmp	r1, r3
 80067c0:	d004      	beq.n	80067cc <cleanup_stdio+0x30>
 80067c2:	4620      	mov	r0, r4
 80067c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067c8:	f001 b86a 	b.w	80078a0 <_fflush_r>
 80067cc:	bd10      	pop	{r4, pc}
 80067ce:	bf00      	nop
 80067d0:	200056d4 	.word	0x200056d4
 80067d4:	2000573c 	.word	0x2000573c
 80067d8:	200057a4 	.word	0x200057a4

080067dc <global_stdio_init.part.0>:
 80067dc:	b510      	push	{r4, lr}
 80067de:	4b0b      	ldr	r3, [pc, #44]	; (800680c <global_stdio_init.part.0+0x30>)
 80067e0:	4c0b      	ldr	r4, [pc, #44]	; (8006810 <global_stdio_init.part.0+0x34>)
 80067e2:	4a0c      	ldr	r2, [pc, #48]	; (8006814 <global_stdio_init.part.0+0x38>)
 80067e4:	601a      	str	r2, [r3, #0]
 80067e6:	4620      	mov	r0, r4
 80067e8:	2200      	movs	r2, #0
 80067ea:	2104      	movs	r1, #4
 80067ec:	f7ff ffa6 	bl	800673c <std>
 80067f0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067f4:	2201      	movs	r2, #1
 80067f6:	2109      	movs	r1, #9
 80067f8:	f7ff ffa0 	bl	800673c <std>
 80067fc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006800:	2202      	movs	r2, #2
 8006802:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006806:	2112      	movs	r1, #18
 8006808:	f7ff bf98 	b.w	800673c <std>
 800680c:	2000580c 	.word	0x2000580c
 8006810:	200056d4 	.word	0x200056d4
 8006814:	08006785 	.word	0x08006785

08006818 <__sfp_lock_acquire>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__sfp_lock_acquire+0x8>)
 800681a:	f000 ba87 	b.w	8006d2c <__retarget_lock_acquire_recursive>
 800681e:	bf00      	nop
 8006820:	20005815 	.word	0x20005815

08006824 <__sfp_lock_release>:
 8006824:	4801      	ldr	r0, [pc, #4]	; (800682c <__sfp_lock_release+0x8>)
 8006826:	f000 ba82 	b.w	8006d2e <__retarget_lock_release_recursive>
 800682a:	bf00      	nop
 800682c:	20005815 	.word	0x20005815

08006830 <__sinit>:
 8006830:	b510      	push	{r4, lr}
 8006832:	4604      	mov	r4, r0
 8006834:	f7ff fff0 	bl	8006818 <__sfp_lock_acquire>
 8006838:	6a23      	ldr	r3, [r4, #32]
 800683a:	b11b      	cbz	r3, 8006844 <__sinit+0x14>
 800683c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006840:	f7ff bff0 	b.w	8006824 <__sfp_lock_release>
 8006844:	4b04      	ldr	r3, [pc, #16]	; (8006858 <__sinit+0x28>)
 8006846:	6223      	str	r3, [r4, #32]
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <__sinit+0x2c>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f5      	bne.n	800683c <__sinit+0xc>
 8006850:	f7ff ffc4 	bl	80067dc <global_stdio_init.part.0>
 8006854:	e7f2      	b.n	800683c <__sinit+0xc>
 8006856:	bf00      	nop
 8006858:	0800679d 	.word	0x0800679d
 800685c:	2000580c 	.word	0x2000580c

08006860 <_fwalk_sglue>:
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	4607      	mov	r7, r0
 8006866:	4688      	mov	r8, r1
 8006868:	4614      	mov	r4, r2
 800686a:	2600      	movs	r6, #0
 800686c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006870:	f1b9 0901 	subs.w	r9, r9, #1
 8006874:	d505      	bpl.n	8006882 <_fwalk_sglue+0x22>
 8006876:	6824      	ldr	r4, [r4, #0]
 8006878:	2c00      	cmp	r4, #0
 800687a:	d1f7      	bne.n	800686c <_fwalk_sglue+0xc>
 800687c:	4630      	mov	r0, r6
 800687e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006882:	89ab      	ldrh	r3, [r5, #12]
 8006884:	2b01      	cmp	r3, #1
 8006886:	d907      	bls.n	8006898 <_fwalk_sglue+0x38>
 8006888:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800688c:	3301      	adds	r3, #1
 800688e:	d003      	beq.n	8006898 <_fwalk_sglue+0x38>
 8006890:	4629      	mov	r1, r5
 8006892:	4638      	mov	r0, r7
 8006894:	47c0      	blx	r8
 8006896:	4306      	orrs	r6, r0
 8006898:	3568      	adds	r5, #104	; 0x68
 800689a:	e7e9      	b.n	8006870 <_fwalk_sglue+0x10>

0800689c <iprintf>:
 800689c:	b40f      	push	{r0, r1, r2, r3}
 800689e:	b507      	push	{r0, r1, r2, lr}
 80068a0:	4906      	ldr	r1, [pc, #24]	; (80068bc <iprintf+0x20>)
 80068a2:	ab04      	add	r3, sp, #16
 80068a4:	6808      	ldr	r0, [r1, #0]
 80068a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80068aa:	6881      	ldr	r1, [r0, #8]
 80068ac:	9301      	str	r3, [sp, #4]
 80068ae:	f000 fcc7 	bl	8007240 <_vfiprintf_r>
 80068b2:	b003      	add	sp, #12
 80068b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80068b8:	b004      	add	sp, #16
 80068ba:	4770      	bx	lr
 80068bc:	20000070 	.word	0x20000070

080068c0 <_puts_r>:
 80068c0:	6a03      	ldr	r3, [r0, #32]
 80068c2:	b570      	push	{r4, r5, r6, lr}
 80068c4:	6884      	ldr	r4, [r0, #8]
 80068c6:	4605      	mov	r5, r0
 80068c8:	460e      	mov	r6, r1
 80068ca:	b90b      	cbnz	r3, 80068d0 <_puts_r+0x10>
 80068cc:	f7ff ffb0 	bl	8006830 <__sinit>
 80068d0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80068d2:	07db      	lsls	r3, r3, #31
 80068d4:	d405      	bmi.n	80068e2 <_puts_r+0x22>
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	0598      	lsls	r0, r3, #22
 80068da:	d402      	bmi.n	80068e2 <_puts_r+0x22>
 80068dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80068de:	f000 fa25 	bl	8006d2c <__retarget_lock_acquire_recursive>
 80068e2:	89a3      	ldrh	r3, [r4, #12]
 80068e4:	0719      	lsls	r1, r3, #28
 80068e6:	d513      	bpl.n	8006910 <_puts_r+0x50>
 80068e8:	6923      	ldr	r3, [r4, #16]
 80068ea:	b18b      	cbz	r3, 8006910 <_puts_r+0x50>
 80068ec:	3e01      	subs	r6, #1
 80068ee:	68a3      	ldr	r3, [r4, #8]
 80068f0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80068f4:	3b01      	subs	r3, #1
 80068f6:	60a3      	str	r3, [r4, #8]
 80068f8:	b9e9      	cbnz	r1, 8006936 <_puts_r+0x76>
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	da2e      	bge.n	800695c <_puts_r+0x9c>
 80068fe:	4622      	mov	r2, r4
 8006900:	210a      	movs	r1, #10
 8006902:	4628      	mov	r0, r5
 8006904:	f000 f8af 	bl	8006a66 <__swbuf_r>
 8006908:	3001      	adds	r0, #1
 800690a:	d007      	beq.n	800691c <_puts_r+0x5c>
 800690c:	250a      	movs	r5, #10
 800690e:	e007      	b.n	8006920 <_puts_r+0x60>
 8006910:	4621      	mov	r1, r4
 8006912:	4628      	mov	r0, r5
 8006914:	f000 f8e4 	bl	8006ae0 <__swsetup_r>
 8006918:	2800      	cmp	r0, #0
 800691a:	d0e7      	beq.n	80068ec <_puts_r+0x2c>
 800691c:	f04f 35ff 	mov.w	r5, #4294967295
 8006920:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006922:	07da      	lsls	r2, r3, #31
 8006924:	d405      	bmi.n	8006932 <_puts_r+0x72>
 8006926:	89a3      	ldrh	r3, [r4, #12]
 8006928:	059b      	lsls	r3, r3, #22
 800692a:	d402      	bmi.n	8006932 <_puts_r+0x72>
 800692c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800692e:	f000 f9fe 	bl	8006d2e <__retarget_lock_release_recursive>
 8006932:	4628      	mov	r0, r5
 8006934:	bd70      	pop	{r4, r5, r6, pc}
 8006936:	2b00      	cmp	r3, #0
 8006938:	da04      	bge.n	8006944 <_puts_r+0x84>
 800693a:	69a2      	ldr	r2, [r4, #24]
 800693c:	429a      	cmp	r2, r3
 800693e:	dc06      	bgt.n	800694e <_puts_r+0x8e>
 8006940:	290a      	cmp	r1, #10
 8006942:	d004      	beq.n	800694e <_puts_r+0x8e>
 8006944:	6823      	ldr	r3, [r4, #0]
 8006946:	1c5a      	adds	r2, r3, #1
 8006948:	6022      	str	r2, [r4, #0]
 800694a:	7019      	strb	r1, [r3, #0]
 800694c:	e7cf      	b.n	80068ee <_puts_r+0x2e>
 800694e:	4622      	mov	r2, r4
 8006950:	4628      	mov	r0, r5
 8006952:	f000 f888 	bl	8006a66 <__swbuf_r>
 8006956:	3001      	adds	r0, #1
 8006958:	d1c9      	bne.n	80068ee <_puts_r+0x2e>
 800695a:	e7df      	b.n	800691c <_puts_r+0x5c>
 800695c:	6823      	ldr	r3, [r4, #0]
 800695e:	250a      	movs	r5, #10
 8006960:	1c5a      	adds	r2, r3, #1
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	701d      	strb	r5, [r3, #0]
 8006966:	e7db      	b.n	8006920 <_puts_r+0x60>

08006968 <puts>:
 8006968:	4b02      	ldr	r3, [pc, #8]	; (8006974 <puts+0xc>)
 800696a:	4601      	mov	r1, r0
 800696c:	6818      	ldr	r0, [r3, #0]
 800696e:	f7ff bfa7 	b.w	80068c0 <_puts_r>
 8006972:	bf00      	nop
 8006974:	20000070 	.word	0x20000070

08006978 <sniprintf>:
 8006978:	b40c      	push	{r2, r3}
 800697a:	b530      	push	{r4, r5, lr}
 800697c:	4b17      	ldr	r3, [pc, #92]	; (80069dc <sniprintf+0x64>)
 800697e:	1e0c      	subs	r4, r1, #0
 8006980:	681d      	ldr	r5, [r3, #0]
 8006982:	b09d      	sub	sp, #116	; 0x74
 8006984:	da08      	bge.n	8006998 <sniprintf+0x20>
 8006986:	238b      	movs	r3, #139	; 0x8b
 8006988:	602b      	str	r3, [r5, #0]
 800698a:	f04f 30ff 	mov.w	r0, #4294967295
 800698e:	b01d      	add	sp, #116	; 0x74
 8006990:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006994:	b002      	add	sp, #8
 8006996:	4770      	bx	lr
 8006998:	f44f 7302 	mov.w	r3, #520	; 0x208
 800699c:	f8ad 3014 	strh.w	r3, [sp, #20]
 80069a0:	bf14      	ite	ne
 80069a2:	f104 33ff 	addne.w	r3, r4, #4294967295
 80069a6:	4623      	moveq	r3, r4
 80069a8:	9304      	str	r3, [sp, #16]
 80069aa:	9307      	str	r3, [sp, #28]
 80069ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069b0:	9002      	str	r0, [sp, #8]
 80069b2:	9006      	str	r0, [sp, #24]
 80069b4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80069b8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80069ba:	ab21      	add	r3, sp, #132	; 0x84
 80069bc:	a902      	add	r1, sp, #8
 80069be:	4628      	mov	r0, r5
 80069c0:	9301      	str	r3, [sp, #4]
 80069c2:	f000 fb15 	bl	8006ff0 <_svfiprintf_r>
 80069c6:	1c43      	adds	r3, r0, #1
 80069c8:	bfbc      	itt	lt
 80069ca:	238b      	movlt	r3, #139	; 0x8b
 80069cc:	602b      	strlt	r3, [r5, #0]
 80069ce:	2c00      	cmp	r4, #0
 80069d0:	d0dd      	beq.n	800698e <sniprintf+0x16>
 80069d2:	9b02      	ldr	r3, [sp, #8]
 80069d4:	2200      	movs	r2, #0
 80069d6:	701a      	strb	r2, [r3, #0]
 80069d8:	e7d9      	b.n	800698e <sniprintf+0x16>
 80069da:	bf00      	nop
 80069dc:	20000070 	.word	0x20000070

080069e0 <__sread>:
 80069e0:	b510      	push	{r4, lr}
 80069e2:	460c      	mov	r4, r1
 80069e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80069e8:	f000 f952 	bl	8006c90 <_read_r>
 80069ec:	2800      	cmp	r0, #0
 80069ee:	bfab      	itete	ge
 80069f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80069f2:	89a3      	ldrhlt	r3, [r4, #12]
 80069f4:	181b      	addge	r3, r3, r0
 80069f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80069fa:	bfac      	ite	ge
 80069fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80069fe:	81a3      	strhlt	r3, [r4, #12]
 8006a00:	bd10      	pop	{r4, pc}

08006a02 <__swrite>:
 8006a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a06:	461f      	mov	r7, r3
 8006a08:	898b      	ldrh	r3, [r1, #12]
 8006a0a:	05db      	lsls	r3, r3, #23
 8006a0c:	4605      	mov	r5, r0
 8006a0e:	460c      	mov	r4, r1
 8006a10:	4616      	mov	r6, r2
 8006a12:	d505      	bpl.n	8006a20 <__swrite+0x1e>
 8006a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a18:	2302      	movs	r3, #2
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f000 f926 	bl	8006c6c <_lseek_r>
 8006a20:	89a3      	ldrh	r3, [r4, #12]
 8006a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a2a:	81a3      	strh	r3, [r4, #12]
 8006a2c:	4632      	mov	r2, r6
 8006a2e:	463b      	mov	r3, r7
 8006a30:	4628      	mov	r0, r5
 8006a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006a36:	f000 b93d 	b.w	8006cb4 <_write_r>

08006a3a <__sseek>:
 8006a3a:	b510      	push	{r4, lr}
 8006a3c:	460c      	mov	r4, r1
 8006a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a42:	f000 f913 	bl	8006c6c <_lseek_r>
 8006a46:	1c43      	adds	r3, r0, #1
 8006a48:	89a3      	ldrh	r3, [r4, #12]
 8006a4a:	bf15      	itete	ne
 8006a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8006a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006a56:	81a3      	strheq	r3, [r4, #12]
 8006a58:	bf18      	it	ne
 8006a5a:	81a3      	strhne	r3, [r4, #12]
 8006a5c:	bd10      	pop	{r4, pc}

08006a5e <__sclose>:
 8006a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a62:	f000 b89d 	b.w	8006ba0 <_close_r>

08006a66 <__swbuf_r>:
 8006a66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a68:	460e      	mov	r6, r1
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	4605      	mov	r5, r0
 8006a6e:	b118      	cbz	r0, 8006a78 <__swbuf_r+0x12>
 8006a70:	6a03      	ldr	r3, [r0, #32]
 8006a72:	b90b      	cbnz	r3, 8006a78 <__swbuf_r+0x12>
 8006a74:	f7ff fedc 	bl	8006830 <__sinit>
 8006a78:	69a3      	ldr	r3, [r4, #24]
 8006a7a:	60a3      	str	r3, [r4, #8]
 8006a7c:	89a3      	ldrh	r3, [r4, #12]
 8006a7e:	071a      	lsls	r2, r3, #28
 8006a80:	d525      	bpl.n	8006ace <__swbuf_r+0x68>
 8006a82:	6923      	ldr	r3, [r4, #16]
 8006a84:	b31b      	cbz	r3, 8006ace <__swbuf_r+0x68>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	6922      	ldr	r2, [r4, #16]
 8006a8a:	1a98      	subs	r0, r3, r2
 8006a8c:	6963      	ldr	r3, [r4, #20]
 8006a8e:	b2f6      	uxtb	r6, r6
 8006a90:	4283      	cmp	r3, r0
 8006a92:	4637      	mov	r7, r6
 8006a94:	dc04      	bgt.n	8006aa0 <__swbuf_r+0x3a>
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 ff01 	bl	80078a0 <_fflush_r>
 8006a9e:	b9e0      	cbnz	r0, 8006ada <__swbuf_r+0x74>
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	3b01      	subs	r3, #1
 8006aa4:	60a3      	str	r3, [r4, #8]
 8006aa6:	6823      	ldr	r3, [r4, #0]
 8006aa8:	1c5a      	adds	r2, r3, #1
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	701e      	strb	r6, [r3, #0]
 8006aae:	6962      	ldr	r2, [r4, #20]
 8006ab0:	1c43      	adds	r3, r0, #1
 8006ab2:	429a      	cmp	r2, r3
 8006ab4:	d004      	beq.n	8006ac0 <__swbuf_r+0x5a>
 8006ab6:	89a3      	ldrh	r3, [r4, #12]
 8006ab8:	07db      	lsls	r3, r3, #31
 8006aba:	d506      	bpl.n	8006aca <__swbuf_r+0x64>
 8006abc:	2e0a      	cmp	r6, #10
 8006abe:	d104      	bne.n	8006aca <__swbuf_r+0x64>
 8006ac0:	4621      	mov	r1, r4
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	f000 feec 	bl	80078a0 <_fflush_r>
 8006ac8:	b938      	cbnz	r0, 8006ada <__swbuf_r+0x74>
 8006aca:	4638      	mov	r0, r7
 8006acc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ace:	4621      	mov	r1, r4
 8006ad0:	4628      	mov	r0, r5
 8006ad2:	f000 f805 	bl	8006ae0 <__swsetup_r>
 8006ad6:	2800      	cmp	r0, #0
 8006ad8:	d0d5      	beq.n	8006a86 <__swbuf_r+0x20>
 8006ada:	f04f 37ff 	mov.w	r7, #4294967295
 8006ade:	e7f4      	b.n	8006aca <__swbuf_r+0x64>

08006ae0 <__swsetup_r>:
 8006ae0:	b538      	push	{r3, r4, r5, lr}
 8006ae2:	4b2a      	ldr	r3, [pc, #168]	; (8006b8c <__swsetup_r+0xac>)
 8006ae4:	4605      	mov	r5, r0
 8006ae6:	6818      	ldr	r0, [r3, #0]
 8006ae8:	460c      	mov	r4, r1
 8006aea:	b118      	cbz	r0, 8006af4 <__swsetup_r+0x14>
 8006aec:	6a03      	ldr	r3, [r0, #32]
 8006aee:	b90b      	cbnz	r3, 8006af4 <__swsetup_r+0x14>
 8006af0:	f7ff fe9e 	bl	8006830 <__sinit>
 8006af4:	89a3      	ldrh	r3, [r4, #12]
 8006af6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006afa:	0718      	lsls	r0, r3, #28
 8006afc:	d422      	bmi.n	8006b44 <__swsetup_r+0x64>
 8006afe:	06d9      	lsls	r1, r3, #27
 8006b00:	d407      	bmi.n	8006b12 <__swsetup_r+0x32>
 8006b02:	2309      	movs	r3, #9
 8006b04:	602b      	str	r3, [r5, #0]
 8006b06:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006b0a:	81a3      	strh	r3, [r4, #12]
 8006b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b10:	e034      	b.n	8006b7c <__swsetup_r+0x9c>
 8006b12:	0758      	lsls	r0, r3, #29
 8006b14:	d512      	bpl.n	8006b3c <__swsetup_r+0x5c>
 8006b16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b18:	b141      	cbz	r1, 8006b2c <__swsetup_r+0x4c>
 8006b1a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	d002      	beq.n	8006b28 <__swsetup_r+0x48>
 8006b22:	4628      	mov	r0, r5
 8006b24:	f000 f912 	bl	8006d4c <_free_r>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	6363      	str	r3, [r4, #52]	; 0x34
 8006b2c:	89a3      	ldrh	r3, [r4, #12]
 8006b2e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	2300      	movs	r3, #0
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6923      	ldr	r3, [r4, #16]
 8006b3a:	6023      	str	r3, [r4, #0]
 8006b3c:	89a3      	ldrh	r3, [r4, #12]
 8006b3e:	f043 0308 	orr.w	r3, r3, #8
 8006b42:	81a3      	strh	r3, [r4, #12]
 8006b44:	6923      	ldr	r3, [r4, #16]
 8006b46:	b94b      	cbnz	r3, 8006b5c <__swsetup_r+0x7c>
 8006b48:	89a3      	ldrh	r3, [r4, #12]
 8006b4a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b52:	d003      	beq.n	8006b5c <__swsetup_r+0x7c>
 8006b54:	4621      	mov	r1, r4
 8006b56:	4628      	mov	r0, r5
 8006b58:	f000 fef0 	bl	800793c <__smakebuf_r>
 8006b5c:	89a0      	ldrh	r0, [r4, #12]
 8006b5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b62:	f010 0301 	ands.w	r3, r0, #1
 8006b66:	d00a      	beq.n	8006b7e <__swsetup_r+0x9e>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	60a3      	str	r3, [r4, #8]
 8006b6c:	6963      	ldr	r3, [r4, #20]
 8006b6e:	425b      	negs	r3, r3
 8006b70:	61a3      	str	r3, [r4, #24]
 8006b72:	6923      	ldr	r3, [r4, #16]
 8006b74:	b943      	cbnz	r3, 8006b88 <__swsetup_r+0xa8>
 8006b76:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b7a:	d1c4      	bne.n	8006b06 <__swsetup_r+0x26>
 8006b7c:	bd38      	pop	{r3, r4, r5, pc}
 8006b7e:	0781      	lsls	r1, r0, #30
 8006b80:	bf58      	it	pl
 8006b82:	6963      	ldrpl	r3, [r4, #20]
 8006b84:	60a3      	str	r3, [r4, #8]
 8006b86:	e7f4      	b.n	8006b72 <__swsetup_r+0x92>
 8006b88:	2000      	movs	r0, #0
 8006b8a:	e7f7      	b.n	8006b7c <__swsetup_r+0x9c>
 8006b8c:	20000070 	.word	0x20000070

08006b90 <memset>:
 8006b90:	4402      	add	r2, r0
 8006b92:	4603      	mov	r3, r0
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d100      	bne.n	8006b9a <memset+0xa>
 8006b98:	4770      	bx	lr
 8006b9a:	f803 1b01 	strb.w	r1, [r3], #1
 8006b9e:	e7f9      	b.n	8006b94 <memset+0x4>

08006ba0 <_close_r>:
 8006ba0:	b538      	push	{r3, r4, r5, lr}
 8006ba2:	4d06      	ldr	r5, [pc, #24]	; (8006bbc <_close_r+0x1c>)
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	4604      	mov	r4, r0
 8006ba8:	4608      	mov	r0, r1
 8006baa:	602b      	str	r3, [r5, #0]
 8006bac:	f7fa f9b1 	bl	8000f12 <_close>
 8006bb0:	1c43      	adds	r3, r0, #1
 8006bb2:	d102      	bne.n	8006bba <_close_r+0x1a>
 8006bb4:	682b      	ldr	r3, [r5, #0]
 8006bb6:	b103      	cbz	r3, 8006bba <_close_r+0x1a>
 8006bb8:	6023      	str	r3, [r4, #0]
 8006bba:	bd38      	pop	{r3, r4, r5, pc}
 8006bbc:	20005810 	.word	0x20005810

08006bc0 <_reclaim_reent>:
 8006bc0:	4b29      	ldr	r3, [pc, #164]	; (8006c68 <_reclaim_reent+0xa8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4283      	cmp	r3, r0
 8006bc6:	b570      	push	{r4, r5, r6, lr}
 8006bc8:	4604      	mov	r4, r0
 8006bca:	d04b      	beq.n	8006c64 <_reclaim_reent+0xa4>
 8006bcc:	69c3      	ldr	r3, [r0, #28]
 8006bce:	b143      	cbz	r3, 8006be2 <_reclaim_reent+0x22>
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d144      	bne.n	8006c60 <_reclaim_reent+0xa0>
 8006bd6:	69e3      	ldr	r3, [r4, #28]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	b111      	cbz	r1, 8006be2 <_reclaim_reent+0x22>
 8006bdc:	4620      	mov	r0, r4
 8006bde:	f000 f8b5 	bl	8006d4c <_free_r>
 8006be2:	6961      	ldr	r1, [r4, #20]
 8006be4:	b111      	cbz	r1, 8006bec <_reclaim_reent+0x2c>
 8006be6:	4620      	mov	r0, r4
 8006be8:	f000 f8b0 	bl	8006d4c <_free_r>
 8006bec:	69e1      	ldr	r1, [r4, #28]
 8006bee:	b111      	cbz	r1, 8006bf6 <_reclaim_reent+0x36>
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	f000 f8ab 	bl	8006d4c <_free_r>
 8006bf6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8006bf8:	b111      	cbz	r1, 8006c00 <_reclaim_reent+0x40>
 8006bfa:	4620      	mov	r0, r4
 8006bfc:	f000 f8a6 	bl	8006d4c <_free_r>
 8006c00:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006c02:	b111      	cbz	r1, 8006c0a <_reclaim_reent+0x4a>
 8006c04:	4620      	mov	r0, r4
 8006c06:	f000 f8a1 	bl	8006d4c <_free_r>
 8006c0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c0c:	b111      	cbz	r1, 8006c14 <_reclaim_reent+0x54>
 8006c0e:	4620      	mov	r0, r4
 8006c10:	f000 f89c 	bl	8006d4c <_free_r>
 8006c14:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006c16:	b111      	cbz	r1, 8006c1e <_reclaim_reent+0x5e>
 8006c18:	4620      	mov	r0, r4
 8006c1a:	f000 f897 	bl	8006d4c <_free_r>
 8006c1e:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8006c20:	b111      	cbz	r1, 8006c28 <_reclaim_reent+0x68>
 8006c22:	4620      	mov	r0, r4
 8006c24:	f000 f892 	bl	8006d4c <_free_r>
 8006c28:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8006c2a:	b111      	cbz	r1, 8006c32 <_reclaim_reent+0x72>
 8006c2c:	4620      	mov	r0, r4
 8006c2e:	f000 f88d 	bl	8006d4c <_free_r>
 8006c32:	6a23      	ldr	r3, [r4, #32]
 8006c34:	b1b3      	cbz	r3, 8006c64 <_reclaim_reent+0xa4>
 8006c36:	4620      	mov	r0, r4
 8006c38:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006c3c:	4718      	bx	r3
 8006c3e:	5949      	ldr	r1, [r1, r5]
 8006c40:	b941      	cbnz	r1, 8006c54 <_reclaim_reent+0x94>
 8006c42:	3504      	adds	r5, #4
 8006c44:	69e3      	ldr	r3, [r4, #28]
 8006c46:	2d80      	cmp	r5, #128	; 0x80
 8006c48:	68d9      	ldr	r1, [r3, #12]
 8006c4a:	d1f8      	bne.n	8006c3e <_reclaim_reent+0x7e>
 8006c4c:	4620      	mov	r0, r4
 8006c4e:	f000 f87d 	bl	8006d4c <_free_r>
 8006c52:	e7c0      	b.n	8006bd6 <_reclaim_reent+0x16>
 8006c54:	680e      	ldr	r6, [r1, #0]
 8006c56:	4620      	mov	r0, r4
 8006c58:	f000 f878 	bl	8006d4c <_free_r>
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	e7ef      	b.n	8006c40 <_reclaim_reent+0x80>
 8006c60:	2500      	movs	r5, #0
 8006c62:	e7ef      	b.n	8006c44 <_reclaim_reent+0x84>
 8006c64:	bd70      	pop	{r4, r5, r6, pc}
 8006c66:	bf00      	nop
 8006c68:	20000070 	.word	0x20000070

08006c6c <_lseek_r>:
 8006c6c:	b538      	push	{r3, r4, r5, lr}
 8006c6e:	4d07      	ldr	r5, [pc, #28]	; (8006c8c <_lseek_r+0x20>)
 8006c70:	4604      	mov	r4, r0
 8006c72:	4608      	mov	r0, r1
 8006c74:	4611      	mov	r1, r2
 8006c76:	2200      	movs	r2, #0
 8006c78:	602a      	str	r2, [r5, #0]
 8006c7a:	461a      	mov	r2, r3
 8006c7c:	f7fa f970 	bl	8000f60 <_lseek>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	d102      	bne.n	8006c8a <_lseek_r+0x1e>
 8006c84:	682b      	ldr	r3, [r5, #0]
 8006c86:	b103      	cbz	r3, 8006c8a <_lseek_r+0x1e>
 8006c88:	6023      	str	r3, [r4, #0]
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	20005810 	.word	0x20005810

08006c90 <_read_r>:
 8006c90:	b538      	push	{r3, r4, r5, lr}
 8006c92:	4d07      	ldr	r5, [pc, #28]	; (8006cb0 <_read_r+0x20>)
 8006c94:	4604      	mov	r4, r0
 8006c96:	4608      	mov	r0, r1
 8006c98:	4611      	mov	r1, r2
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	602a      	str	r2, [r5, #0]
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	f7fa f8fe 	bl	8000ea0 <_read>
 8006ca4:	1c43      	adds	r3, r0, #1
 8006ca6:	d102      	bne.n	8006cae <_read_r+0x1e>
 8006ca8:	682b      	ldr	r3, [r5, #0]
 8006caa:	b103      	cbz	r3, 8006cae <_read_r+0x1e>
 8006cac:	6023      	str	r3, [r4, #0]
 8006cae:	bd38      	pop	{r3, r4, r5, pc}
 8006cb0:	20005810 	.word	0x20005810

08006cb4 <_write_r>:
 8006cb4:	b538      	push	{r3, r4, r5, lr}
 8006cb6:	4d07      	ldr	r5, [pc, #28]	; (8006cd4 <_write_r+0x20>)
 8006cb8:	4604      	mov	r4, r0
 8006cba:	4608      	mov	r0, r1
 8006cbc:	4611      	mov	r1, r2
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	602a      	str	r2, [r5, #0]
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	f7fa f909 	bl	8000eda <_write>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_write_r+0x1e>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_write_r+0x1e>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20005810 	.word	0x20005810

08006cd8 <__errno>:
 8006cd8:	4b01      	ldr	r3, [pc, #4]	; (8006ce0 <__errno+0x8>)
 8006cda:	6818      	ldr	r0, [r3, #0]
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop
 8006ce0:	20000070 	.word	0x20000070

08006ce4 <__libc_init_array>:
 8006ce4:	b570      	push	{r4, r5, r6, lr}
 8006ce6:	4d0d      	ldr	r5, [pc, #52]	; (8006d1c <__libc_init_array+0x38>)
 8006ce8:	4c0d      	ldr	r4, [pc, #52]	; (8006d20 <__libc_init_array+0x3c>)
 8006cea:	1b64      	subs	r4, r4, r5
 8006cec:	10a4      	asrs	r4, r4, #2
 8006cee:	2600      	movs	r6, #0
 8006cf0:	42a6      	cmp	r6, r4
 8006cf2:	d109      	bne.n	8006d08 <__libc_init_array+0x24>
 8006cf4:	4d0b      	ldr	r5, [pc, #44]	; (8006d24 <__libc_init_array+0x40>)
 8006cf6:	4c0c      	ldr	r4, [pc, #48]	; (8006d28 <__libc_init_array+0x44>)
 8006cf8:	f000 fee0 	bl	8007abc <_init>
 8006cfc:	1b64      	subs	r4, r4, r5
 8006cfe:	10a4      	asrs	r4, r4, #2
 8006d00:	2600      	movs	r6, #0
 8006d02:	42a6      	cmp	r6, r4
 8006d04:	d105      	bne.n	8006d12 <__libc_init_array+0x2e>
 8006d06:	bd70      	pop	{r4, r5, r6, pc}
 8006d08:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d0c:	4798      	blx	r3
 8006d0e:	3601      	adds	r6, #1
 8006d10:	e7ee      	b.n	8006cf0 <__libc_init_array+0xc>
 8006d12:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d16:	4798      	blx	r3
 8006d18:	3601      	adds	r6, #1
 8006d1a:	e7f2      	b.n	8006d02 <__libc_init_array+0x1e>
 8006d1c:	08007d94 	.word	0x08007d94
 8006d20:	08007d94 	.word	0x08007d94
 8006d24:	08007d94 	.word	0x08007d94
 8006d28:	08007d98 	.word	0x08007d98

08006d2c <__retarget_lock_acquire_recursive>:
 8006d2c:	4770      	bx	lr

08006d2e <__retarget_lock_release_recursive>:
 8006d2e:	4770      	bx	lr

08006d30 <memcpy>:
 8006d30:	440a      	add	r2, r1
 8006d32:	4291      	cmp	r1, r2
 8006d34:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d38:	d100      	bne.n	8006d3c <memcpy+0xc>
 8006d3a:	4770      	bx	lr
 8006d3c:	b510      	push	{r4, lr}
 8006d3e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d42:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d46:	4291      	cmp	r1, r2
 8006d48:	d1f9      	bne.n	8006d3e <memcpy+0xe>
 8006d4a:	bd10      	pop	{r4, pc}

08006d4c <_free_r>:
 8006d4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d4e:	2900      	cmp	r1, #0
 8006d50:	d044      	beq.n	8006ddc <_free_r+0x90>
 8006d52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d56:	9001      	str	r0, [sp, #4]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	f1a1 0404 	sub.w	r4, r1, #4
 8006d5e:	bfb8      	it	lt
 8006d60:	18e4      	addlt	r4, r4, r3
 8006d62:	f000 f8df 	bl	8006f24 <__malloc_lock>
 8006d66:	4a1e      	ldr	r2, [pc, #120]	; (8006de0 <_free_r+0x94>)
 8006d68:	9801      	ldr	r0, [sp, #4]
 8006d6a:	6813      	ldr	r3, [r2, #0]
 8006d6c:	b933      	cbnz	r3, 8006d7c <_free_r+0x30>
 8006d6e:	6063      	str	r3, [r4, #4]
 8006d70:	6014      	str	r4, [r2, #0]
 8006d72:	b003      	add	sp, #12
 8006d74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d78:	f000 b8da 	b.w	8006f30 <__malloc_unlock>
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d908      	bls.n	8006d92 <_free_r+0x46>
 8006d80:	6825      	ldr	r5, [r4, #0]
 8006d82:	1961      	adds	r1, r4, r5
 8006d84:	428b      	cmp	r3, r1
 8006d86:	bf01      	itttt	eq
 8006d88:	6819      	ldreq	r1, [r3, #0]
 8006d8a:	685b      	ldreq	r3, [r3, #4]
 8006d8c:	1949      	addeq	r1, r1, r5
 8006d8e:	6021      	streq	r1, [r4, #0]
 8006d90:	e7ed      	b.n	8006d6e <_free_r+0x22>
 8006d92:	461a      	mov	r2, r3
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b10b      	cbz	r3, 8006d9c <_free_r+0x50>
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d9fa      	bls.n	8006d92 <_free_r+0x46>
 8006d9c:	6811      	ldr	r1, [r2, #0]
 8006d9e:	1855      	adds	r5, r2, r1
 8006da0:	42a5      	cmp	r5, r4
 8006da2:	d10b      	bne.n	8006dbc <_free_r+0x70>
 8006da4:	6824      	ldr	r4, [r4, #0]
 8006da6:	4421      	add	r1, r4
 8006da8:	1854      	adds	r4, r2, r1
 8006daa:	42a3      	cmp	r3, r4
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	d1e0      	bne.n	8006d72 <_free_r+0x26>
 8006db0:	681c      	ldr	r4, [r3, #0]
 8006db2:	685b      	ldr	r3, [r3, #4]
 8006db4:	6053      	str	r3, [r2, #4]
 8006db6:	440c      	add	r4, r1
 8006db8:	6014      	str	r4, [r2, #0]
 8006dba:	e7da      	b.n	8006d72 <_free_r+0x26>
 8006dbc:	d902      	bls.n	8006dc4 <_free_r+0x78>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	6003      	str	r3, [r0, #0]
 8006dc2:	e7d6      	b.n	8006d72 <_free_r+0x26>
 8006dc4:	6825      	ldr	r5, [r4, #0]
 8006dc6:	1961      	adds	r1, r4, r5
 8006dc8:	428b      	cmp	r3, r1
 8006dca:	bf04      	itt	eq
 8006dcc:	6819      	ldreq	r1, [r3, #0]
 8006dce:	685b      	ldreq	r3, [r3, #4]
 8006dd0:	6063      	str	r3, [r4, #4]
 8006dd2:	bf04      	itt	eq
 8006dd4:	1949      	addeq	r1, r1, r5
 8006dd6:	6021      	streq	r1, [r4, #0]
 8006dd8:	6054      	str	r4, [r2, #4]
 8006dda:	e7ca      	b.n	8006d72 <_free_r+0x26>
 8006ddc:	b003      	add	sp, #12
 8006dde:	bd30      	pop	{r4, r5, pc}
 8006de0:	20005818 	.word	0x20005818

08006de4 <sbrk_aligned>:
 8006de4:	b570      	push	{r4, r5, r6, lr}
 8006de6:	4e0e      	ldr	r6, [pc, #56]	; (8006e20 <sbrk_aligned+0x3c>)
 8006de8:	460c      	mov	r4, r1
 8006dea:	6831      	ldr	r1, [r6, #0]
 8006dec:	4605      	mov	r5, r0
 8006dee:	b911      	cbnz	r1, 8006df6 <sbrk_aligned+0x12>
 8006df0:	f000 fe1c 	bl	8007a2c <_sbrk_r>
 8006df4:	6030      	str	r0, [r6, #0]
 8006df6:	4621      	mov	r1, r4
 8006df8:	4628      	mov	r0, r5
 8006dfa:	f000 fe17 	bl	8007a2c <_sbrk_r>
 8006dfe:	1c43      	adds	r3, r0, #1
 8006e00:	d00a      	beq.n	8006e18 <sbrk_aligned+0x34>
 8006e02:	1cc4      	adds	r4, r0, #3
 8006e04:	f024 0403 	bic.w	r4, r4, #3
 8006e08:	42a0      	cmp	r0, r4
 8006e0a:	d007      	beq.n	8006e1c <sbrk_aligned+0x38>
 8006e0c:	1a21      	subs	r1, r4, r0
 8006e0e:	4628      	mov	r0, r5
 8006e10:	f000 fe0c 	bl	8007a2c <_sbrk_r>
 8006e14:	3001      	adds	r0, #1
 8006e16:	d101      	bne.n	8006e1c <sbrk_aligned+0x38>
 8006e18:	f04f 34ff 	mov.w	r4, #4294967295
 8006e1c:	4620      	mov	r0, r4
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}
 8006e20:	2000581c 	.word	0x2000581c

08006e24 <_malloc_r>:
 8006e24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e28:	1ccd      	adds	r5, r1, #3
 8006e2a:	f025 0503 	bic.w	r5, r5, #3
 8006e2e:	3508      	adds	r5, #8
 8006e30:	2d0c      	cmp	r5, #12
 8006e32:	bf38      	it	cc
 8006e34:	250c      	movcc	r5, #12
 8006e36:	2d00      	cmp	r5, #0
 8006e38:	4607      	mov	r7, r0
 8006e3a:	db01      	blt.n	8006e40 <_malloc_r+0x1c>
 8006e3c:	42a9      	cmp	r1, r5
 8006e3e:	d905      	bls.n	8006e4c <_malloc_r+0x28>
 8006e40:	230c      	movs	r3, #12
 8006e42:	603b      	str	r3, [r7, #0]
 8006e44:	2600      	movs	r6, #0
 8006e46:	4630      	mov	r0, r6
 8006e48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006f20 <_malloc_r+0xfc>
 8006e50:	f000 f868 	bl	8006f24 <__malloc_lock>
 8006e54:	f8d8 3000 	ldr.w	r3, [r8]
 8006e58:	461c      	mov	r4, r3
 8006e5a:	bb5c      	cbnz	r4, 8006eb4 <_malloc_r+0x90>
 8006e5c:	4629      	mov	r1, r5
 8006e5e:	4638      	mov	r0, r7
 8006e60:	f7ff ffc0 	bl	8006de4 <sbrk_aligned>
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	4604      	mov	r4, r0
 8006e68:	d155      	bne.n	8006f16 <_malloc_r+0xf2>
 8006e6a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e6e:	4626      	mov	r6, r4
 8006e70:	2e00      	cmp	r6, #0
 8006e72:	d145      	bne.n	8006f00 <_malloc_r+0xdc>
 8006e74:	2c00      	cmp	r4, #0
 8006e76:	d048      	beq.n	8006f0a <_malloc_r+0xe6>
 8006e78:	6823      	ldr	r3, [r4, #0]
 8006e7a:	4631      	mov	r1, r6
 8006e7c:	4638      	mov	r0, r7
 8006e7e:	eb04 0903 	add.w	r9, r4, r3
 8006e82:	f000 fdd3 	bl	8007a2c <_sbrk_r>
 8006e86:	4581      	cmp	r9, r0
 8006e88:	d13f      	bne.n	8006f0a <_malloc_r+0xe6>
 8006e8a:	6821      	ldr	r1, [r4, #0]
 8006e8c:	1a6d      	subs	r5, r5, r1
 8006e8e:	4629      	mov	r1, r5
 8006e90:	4638      	mov	r0, r7
 8006e92:	f7ff ffa7 	bl	8006de4 <sbrk_aligned>
 8006e96:	3001      	adds	r0, #1
 8006e98:	d037      	beq.n	8006f0a <_malloc_r+0xe6>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	442b      	add	r3, r5
 8006e9e:	6023      	str	r3, [r4, #0]
 8006ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d038      	beq.n	8006f1a <_malloc_r+0xf6>
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	42a2      	cmp	r2, r4
 8006eac:	d12b      	bne.n	8006f06 <_malloc_r+0xe2>
 8006eae:	2200      	movs	r2, #0
 8006eb0:	605a      	str	r2, [r3, #4]
 8006eb2:	e00f      	b.n	8006ed4 <_malloc_r+0xb0>
 8006eb4:	6822      	ldr	r2, [r4, #0]
 8006eb6:	1b52      	subs	r2, r2, r5
 8006eb8:	d41f      	bmi.n	8006efa <_malloc_r+0xd6>
 8006eba:	2a0b      	cmp	r2, #11
 8006ebc:	d917      	bls.n	8006eee <_malloc_r+0xca>
 8006ebe:	1961      	adds	r1, r4, r5
 8006ec0:	42a3      	cmp	r3, r4
 8006ec2:	6025      	str	r5, [r4, #0]
 8006ec4:	bf18      	it	ne
 8006ec6:	6059      	strne	r1, [r3, #4]
 8006ec8:	6863      	ldr	r3, [r4, #4]
 8006eca:	bf08      	it	eq
 8006ecc:	f8c8 1000 	streq.w	r1, [r8]
 8006ed0:	5162      	str	r2, [r4, r5]
 8006ed2:	604b      	str	r3, [r1, #4]
 8006ed4:	4638      	mov	r0, r7
 8006ed6:	f104 060b 	add.w	r6, r4, #11
 8006eda:	f000 f829 	bl	8006f30 <__malloc_unlock>
 8006ede:	f026 0607 	bic.w	r6, r6, #7
 8006ee2:	1d23      	adds	r3, r4, #4
 8006ee4:	1af2      	subs	r2, r6, r3
 8006ee6:	d0ae      	beq.n	8006e46 <_malloc_r+0x22>
 8006ee8:	1b9b      	subs	r3, r3, r6
 8006eea:	50a3      	str	r3, [r4, r2]
 8006eec:	e7ab      	b.n	8006e46 <_malloc_r+0x22>
 8006eee:	42a3      	cmp	r3, r4
 8006ef0:	6862      	ldr	r2, [r4, #4]
 8006ef2:	d1dd      	bne.n	8006eb0 <_malloc_r+0x8c>
 8006ef4:	f8c8 2000 	str.w	r2, [r8]
 8006ef8:	e7ec      	b.n	8006ed4 <_malloc_r+0xb0>
 8006efa:	4623      	mov	r3, r4
 8006efc:	6864      	ldr	r4, [r4, #4]
 8006efe:	e7ac      	b.n	8006e5a <_malloc_r+0x36>
 8006f00:	4634      	mov	r4, r6
 8006f02:	6876      	ldr	r6, [r6, #4]
 8006f04:	e7b4      	b.n	8006e70 <_malloc_r+0x4c>
 8006f06:	4613      	mov	r3, r2
 8006f08:	e7cc      	b.n	8006ea4 <_malloc_r+0x80>
 8006f0a:	230c      	movs	r3, #12
 8006f0c:	603b      	str	r3, [r7, #0]
 8006f0e:	4638      	mov	r0, r7
 8006f10:	f000 f80e 	bl	8006f30 <__malloc_unlock>
 8006f14:	e797      	b.n	8006e46 <_malloc_r+0x22>
 8006f16:	6025      	str	r5, [r4, #0]
 8006f18:	e7dc      	b.n	8006ed4 <_malloc_r+0xb0>
 8006f1a:	605b      	str	r3, [r3, #4]
 8006f1c:	deff      	udf	#255	; 0xff
 8006f1e:	bf00      	nop
 8006f20:	20005818 	.word	0x20005818

08006f24 <__malloc_lock>:
 8006f24:	4801      	ldr	r0, [pc, #4]	; (8006f2c <__malloc_lock+0x8>)
 8006f26:	f7ff bf01 	b.w	8006d2c <__retarget_lock_acquire_recursive>
 8006f2a:	bf00      	nop
 8006f2c:	20005814 	.word	0x20005814

08006f30 <__malloc_unlock>:
 8006f30:	4801      	ldr	r0, [pc, #4]	; (8006f38 <__malloc_unlock+0x8>)
 8006f32:	f7ff befc 	b.w	8006d2e <__retarget_lock_release_recursive>
 8006f36:	bf00      	nop
 8006f38:	20005814 	.word	0x20005814

08006f3c <__ssputs_r>:
 8006f3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f40:	688e      	ldr	r6, [r1, #8]
 8006f42:	461f      	mov	r7, r3
 8006f44:	42be      	cmp	r6, r7
 8006f46:	680b      	ldr	r3, [r1, #0]
 8006f48:	4682      	mov	sl, r0
 8006f4a:	460c      	mov	r4, r1
 8006f4c:	4690      	mov	r8, r2
 8006f4e:	d82c      	bhi.n	8006faa <__ssputs_r+0x6e>
 8006f50:	898a      	ldrh	r2, [r1, #12]
 8006f52:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f56:	d026      	beq.n	8006fa6 <__ssputs_r+0x6a>
 8006f58:	6965      	ldr	r5, [r4, #20]
 8006f5a:	6909      	ldr	r1, [r1, #16]
 8006f5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f60:	eba3 0901 	sub.w	r9, r3, r1
 8006f64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f68:	1c7b      	adds	r3, r7, #1
 8006f6a:	444b      	add	r3, r9
 8006f6c:	106d      	asrs	r5, r5, #1
 8006f6e:	429d      	cmp	r5, r3
 8006f70:	bf38      	it	cc
 8006f72:	461d      	movcc	r5, r3
 8006f74:	0553      	lsls	r3, r2, #21
 8006f76:	d527      	bpl.n	8006fc8 <__ssputs_r+0x8c>
 8006f78:	4629      	mov	r1, r5
 8006f7a:	f7ff ff53 	bl	8006e24 <_malloc_r>
 8006f7e:	4606      	mov	r6, r0
 8006f80:	b360      	cbz	r0, 8006fdc <__ssputs_r+0xa0>
 8006f82:	6921      	ldr	r1, [r4, #16]
 8006f84:	464a      	mov	r2, r9
 8006f86:	f7ff fed3 	bl	8006d30 <memcpy>
 8006f8a:	89a3      	ldrh	r3, [r4, #12]
 8006f8c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f94:	81a3      	strh	r3, [r4, #12]
 8006f96:	6126      	str	r6, [r4, #16]
 8006f98:	6165      	str	r5, [r4, #20]
 8006f9a:	444e      	add	r6, r9
 8006f9c:	eba5 0509 	sub.w	r5, r5, r9
 8006fa0:	6026      	str	r6, [r4, #0]
 8006fa2:	60a5      	str	r5, [r4, #8]
 8006fa4:	463e      	mov	r6, r7
 8006fa6:	42be      	cmp	r6, r7
 8006fa8:	d900      	bls.n	8006fac <__ssputs_r+0x70>
 8006faa:	463e      	mov	r6, r7
 8006fac:	6820      	ldr	r0, [r4, #0]
 8006fae:	4632      	mov	r2, r6
 8006fb0:	4641      	mov	r1, r8
 8006fb2:	f000 fcff 	bl	80079b4 <memmove>
 8006fb6:	68a3      	ldr	r3, [r4, #8]
 8006fb8:	1b9b      	subs	r3, r3, r6
 8006fba:	60a3      	str	r3, [r4, #8]
 8006fbc:	6823      	ldr	r3, [r4, #0]
 8006fbe:	4433      	add	r3, r6
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	2000      	movs	r0, #0
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	462a      	mov	r2, r5
 8006fca:	f000 fd3f 	bl	8007a4c <_realloc_r>
 8006fce:	4606      	mov	r6, r0
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	d1e0      	bne.n	8006f96 <__ssputs_r+0x5a>
 8006fd4:	6921      	ldr	r1, [r4, #16]
 8006fd6:	4650      	mov	r0, sl
 8006fd8:	f7ff feb8 	bl	8006d4c <_free_r>
 8006fdc:	230c      	movs	r3, #12
 8006fde:	f8ca 3000 	str.w	r3, [sl]
 8006fe2:	89a3      	ldrh	r3, [r4, #12]
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fe8:	81a3      	strh	r3, [r4, #12]
 8006fea:	f04f 30ff 	mov.w	r0, #4294967295
 8006fee:	e7e9      	b.n	8006fc4 <__ssputs_r+0x88>

08006ff0 <_svfiprintf_r>:
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4698      	mov	r8, r3
 8006ff6:	898b      	ldrh	r3, [r1, #12]
 8006ff8:	061b      	lsls	r3, r3, #24
 8006ffa:	b09d      	sub	sp, #116	; 0x74
 8006ffc:	4607      	mov	r7, r0
 8006ffe:	460d      	mov	r5, r1
 8007000:	4614      	mov	r4, r2
 8007002:	d50e      	bpl.n	8007022 <_svfiprintf_r+0x32>
 8007004:	690b      	ldr	r3, [r1, #16]
 8007006:	b963      	cbnz	r3, 8007022 <_svfiprintf_r+0x32>
 8007008:	2140      	movs	r1, #64	; 0x40
 800700a:	f7ff ff0b 	bl	8006e24 <_malloc_r>
 800700e:	6028      	str	r0, [r5, #0]
 8007010:	6128      	str	r0, [r5, #16]
 8007012:	b920      	cbnz	r0, 800701e <_svfiprintf_r+0x2e>
 8007014:	230c      	movs	r3, #12
 8007016:	603b      	str	r3, [r7, #0]
 8007018:	f04f 30ff 	mov.w	r0, #4294967295
 800701c:	e0d0      	b.n	80071c0 <_svfiprintf_r+0x1d0>
 800701e:	2340      	movs	r3, #64	; 0x40
 8007020:	616b      	str	r3, [r5, #20]
 8007022:	2300      	movs	r3, #0
 8007024:	9309      	str	r3, [sp, #36]	; 0x24
 8007026:	2320      	movs	r3, #32
 8007028:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800702c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007030:	2330      	movs	r3, #48	; 0x30
 8007032:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80071d8 <_svfiprintf_r+0x1e8>
 8007036:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800703a:	f04f 0901 	mov.w	r9, #1
 800703e:	4623      	mov	r3, r4
 8007040:	469a      	mov	sl, r3
 8007042:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007046:	b10a      	cbz	r2, 800704c <_svfiprintf_r+0x5c>
 8007048:	2a25      	cmp	r2, #37	; 0x25
 800704a:	d1f9      	bne.n	8007040 <_svfiprintf_r+0x50>
 800704c:	ebba 0b04 	subs.w	fp, sl, r4
 8007050:	d00b      	beq.n	800706a <_svfiprintf_r+0x7a>
 8007052:	465b      	mov	r3, fp
 8007054:	4622      	mov	r2, r4
 8007056:	4629      	mov	r1, r5
 8007058:	4638      	mov	r0, r7
 800705a:	f7ff ff6f 	bl	8006f3c <__ssputs_r>
 800705e:	3001      	adds	r0, #1
 8007060:	f000 80a9 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007064:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007066:	445a      	add	r2, fp
 8007068:	9209      	str	r2, [sp, #36]	; 0x24
 800706a:	f89a 3000 	ldrb.w	r3, [sl]
 800706e:	2b00      	cmp	r3, #0
 8007070:	f000 80a1 	beq.w	80071b6 <_svfiprintf_r+0x1c6>
 8007074:	2300      	movs	r3, #0
 8007076:	f04f 32ff 	mov.w	r2, #4294967295
 800707a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800707e:	f10a 0a01 	add.w	sl, sl, #1
 8007082:	9304      	str	r3, [sp, #16]
 8007084:	9307      	str	r3, [sp, #28]
 8007086:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800708a:	931a      	str	r3, [sp, #104]	; 0x68
 800708c:	4654      	mov	r4, sl
 800708e:	2205      	movs	r2, #5
 8007090:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007094:	4850      	ldr	r0, [pc, #320]	; (80071d8 <_svfiprintf_r+0x1e8>)
 8007096:	f7f9 f8bb 	bl	8000210 <memchr>
 800709a:	9a04      	ldr	r2, [sp, #16]
 800709c:	b9d8      	cbnz	r0, 80070d6 <_svfiprintf_r+0xe6>
 800709e:	06d0      	lsls	r0, r2, #27
 80070a0:	bf44      	itt	mi
 80070a2:	2320      	movmi	r3, #32
 80070a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070a8:	0711      	lsls	r1, r2, #28
 80070aa:	bf44      	itt	mi
 80070ac:	232b      	movmi	r3, #43	; 0x2b
 80070ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070b2:	f89a 3000 	ldrb.w	r3, [sl]
 80070b6:	2b2a      	cmp	r3, #42	; 0x2a
 80070b8:	d015      	beq.n	80070e6 <_svfiprintf_r+0xf6>
 80070ba:	9a07      	ldr	r2, [sp, #28]
 80070bc:	4654      	mov	r4, sl
 80070be:	2000      	movs	r0, #0
 80070c0:	f04f 0c0a 	mov.w	ip, #10
 80070c4:	4621      	mov	r1, r4
 80070c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070ca:	3b30      	subs	r3, #48	; 0x30
 80070cc:	2b09      	cmp	r3, #9
 80070ce:	d94d      	bls.n	800716c <_svfiprintf_r+0x17c>
 80070d0:	b1b0      	cbz	r0, 8007100 <_svfiprintf_r+0x110>
 80070d2:	9207      	str	r2, [sp, #28]
 80070d4:	e014      	b.n	8007100 <_svfiprintf_r+0x110>
 80070d6:	eba0 0308 	sub.w	r3, r0, r8
 80070da:	fa09 f303 	lsl.w	r3, r9, r3
 80070de:	4313      	orrs	r3, r2
 80070e0:	9304      	str	r3, [sp, #16]
 80070e2:	46a2      	mov	sl, r4
 80070e4:	e7d2      	b.n	800708c <_svfiprintf_r+0x9c>
 80070e6:	9b03      	ldr	r3, [sp, #12]
 80070e8:	1d19      	adds	r1, r3, #4
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	9103      	str	r1, [sp, #12]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	bfbb      	ittet	lt
 80070f2:	425b      	neglt	r3, r3
 80070f4:	f042 0202 	orrlt.w	r2, r2, #2
 80070f8:	9307      	strge	r3, [sp, #28]
 80070fa:	9307      	strlt	r3, [sp, #28]
 80070fc:	bfb8      	it	lt
 80070fe:	9204      	strlt	r2, [sp, #16]
 8007100:	7823      	ldrb	r3, [r4, #0]
 8007102:	2b2e      	cmp	r3, #46	; 0x2e
 8007104:	d10c      	bne.n	8007120 <_svfiprintf_r+0x130>
 8007106:	7863      	ldrb	r3, [r4, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d134      	bne.n	8007176 <_svfiprintf_r+0x186>
 800710c:	9b03      	ldr	r3, [sp, #12]
 800710e:	1d1a      	adds	r2, r3, #4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	9203      	str	r2, [sp, #12]
 8007114:	2b00      	cmp	r3, #0
 8007116:	bfb8      	it	lt
 8007118:	f04f 33ff 	movlt.w	r3, #4294967295
 800711c:	3402      	adds	r4, #2
 800711e:	9305      	str	r3, [sp, #20]
 8007120:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80071e8 <_svfiprintf_r+0x1f8>
 8007124:	7821      	ldrb	r1, [r4, #0]
 8007126:	2203      	movs	r2, #3
 8007128:	4650      	mov	r0, sl
 800712a:	f7f9 f871 	bl	8000210 <memchr>
 800712e:	b138      	cbz	r0, 8007140 <_svfiprintf_r+0x150>
 8007130:	9b04      	ldr	r3, [sp, #16]
 8007132:	eba0 000a 	sub.w	r0, r0, sl
 8007136:	2240      	movs	r2, #64	; 0x40
 8007138:	4082      	lsls	r2, r0
 800713a:	4313      	orrs	r3, r2
 800713c:	3401      	adds	r4, #1
 800713e:	9304      	str	r3, [sp, #16]
 8007140:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007144:	4825      	ldr	r0, [pc, #148]	; (80071dc <_svfiprintf_r+0x1ec>)
 8007146:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800714a:	2206      	movs	r2, #6
 800714c:	f7f9 f860 	bl	8000210 <memchr>
 8007150:	2800      	cmp	r0, #0
 8007152:	d038      	beq.n	80071c6 <_svfiprintf_r+0x1d6>
 8007154:	4b22      	ldr	r3, [pc, #136]	; (80071e0 <_svfiprintf_r+0x1f0>)
 8007156:	bb1b      	cbnz	r3, 80071a0 <_svfiprintf_r+0x1b0>
 8007158:	9b03      	ldr	r3, [sp, #12]
 800715a:	3307      	adds	r3, #7
 800715c:	f023 0307 	bic.w	r3, r3, #7
 8007160:	3308      	adds	r3, #8
 8007162:	9303      	str	r3, [sp, #12]
 8007164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007166:	4433      	add	r3, r6
 8007168:	9309      	str	r3, [sp, #36]	; 0x24
 800716a:	e768      	b.n	800703e <_svfiprintf_r+0x4e>
 800716c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007170:	460c      	mov	r4, r1
 8007172:	2001      	movs	r0, #1
 8007174:	e7a6      	b.n	80070c4 <_svfiprintf_r+0xd4>
 8007176:	2300      	movs	r3, #0
 8007178:	3401      	adds	r4, #1
 800717a:	9305      	str	r3, [sp, #20]
 800717c:	4619      	mov	r1, r3
 800717e:	f04f 0c0a 	mov.w	ip, #10
 8007182:	4620      	mov	r0, r4
 8007184:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007188:	3a30      	subs	r2, #48	; 0x30
 800718a:	2a09      	cmp	r2, #9
 800718c:	d903      	bls.n	8007196 <_svfiprintf_r+0x1a6>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d0c6      	beq.n	8007120 <_svfiprintf_r+0x130>
 8007192:	9105      	str	r1, [sp, #20]
 8007194:	e7c4      	b.n	8007120 <_svfiprintf_r+0x130>
 8007196:	fb0c 2101 	mla	r1, ip, r1, r2
 800719a:	4604      	mov	r4, r0
 800719c:	2301      	movs	r3, #1
 800719e:	e7f0      	b.n	8007182 <_svfiprintf_r+0x192>
 80071a0:	ab03      	add	r3, sp, #12
 80071a2:	9300      	str	r3, [sp, #0]
 80071a4:	462a      	mov	r2, r5
 80071a6:	4b0f      	ldr	r3, [pc, #60]	; (80071e4 <_svfiprintf_r+0x1f4>)
 80071a8:	a904      	add	r1, sp, #16
 80071aa:	4638      	mov	r0, r7
 80071ac:	f3af 8000 	nop.w
 80071b0:	1c42      	adds	r2, r0, #1
 80071b2:	4606      	mov	r6, r0
 80071b4:	d1d6      	bne.n	8007164 <_svfiprintf_r+0x174>
 80071b6:	89ab      	ldrh	r3, [r5, #12]
 80071b8:	065b      	lsls	r3, r3, #25
 80071ba:	f53f af2d 	bmi.w	8007018 <_svfiprintf_r+0x28>
 80071be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071c0:	b01d      	add	sp, #116	; 0x74
 80071c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c6:	ab03      	add	r3, sp, #12
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	462a      	mov	r2, r5
 80071cc:	4b05      	ldr	r3, [pc, #20]	; (80071e4 <_svfiprintf_r+0x1f4>)
 80071ce:	a904      	add	r1, sp, #16
 80071d0:	4638      	mov	r0, r7
 80071d2:	f000 f9bd 	bl	8007550 <_printf_i>
 80071d6:	e7eb      	b.n	80071b0 <_svfiprintf_r+0x1c0>
 80071d8:	08007d59 	.word	0x08007d59
 80071dc:	08007d63 	.word	0x08007d63
 80071e0:	00000000 	.word	0x00000000
 80071e4:	08006f3d 	.word	0x08006f3d
 80071e8:	08007d5f 	.word	0x08007d5f

080071ec <__sfputc_r>:
 80071ec:	6893      	ldr	r3, [r2, #8]
 80071ee:	3b01      	subs	r3, #1
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	b410      	push	{r4}
 80071f4:	6093      	str	r3, [r2, #8]
 80071f6:	da08      	bge.n	800720a <__sfputc_r+0x1e>
 80071f8:	6994      	ldr	r4, [r2, #24]
 80071fa:	42a3      	cmp	r3, r4
 80071fc:	db01      	blt.n	8007202 <__sfputc_r+0x16>
 80071fe:	290a      	cmp	r1, #10
 8007200:	d103      	bne.n	800720a <__sfputc_r+0x1e>
 8007202:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007206:	f7ff bc2e 	b.w	8006a66 <__swbuf_r>
 800720a:	6813      	ldr	r3, [r2, #0]
 800720c:	1c58      	adds	r0, r3, #1
 800720e:	6010      	str	r0, [r2, #0]
 8007210:	7019      	strb	r1, [r3, #0]
 8007212:	4608      	mov	r0, r1
 8007214:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007218:	4770      	bx	lr

0800721a <__sfputs_r>:
 800721a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800721c:	4606      	mov	r6, r0
 800721e:	460f      	mov	r7, r1
 8007220:	4614      	mov	r4, r2
 8007222:	18d5      	adds	r5, r2, r3
 8007224:	42ac      	cmp	r4, r5
 8007226:	d101      	bne.n	800722c <__sfputs_r+0x12>
 8007228:	2000      	movs	r0, #0
 800722a:	e007      	b.n	800723c <__sfputs_r+0x22>
 800722c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007230:	463a      	mov	r2, r7
 8007232:	4630      	mov	r0, r6
 8007234:	f7ff ffda 	bl	80071ec <__sfputc_r>
 8007238:	1c43      	adds	r3, r0, #1
 800723a:	d1f3      	bne.n	8007224 <__sfputs_r+0xa>
 800723c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007240 <_vfiprintf_r>:
 8007240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007244:	460d      	mov	r5, r1
 8007246:	b09d      	sub	sp, #116	; 0x74
 8007248:	4614      	mov	r4, r2
 800724a:	4698      	mov	r8, r3
 800724c:	4606      	mov	r6, r0
 800724e:	b118      	cbz	r0, 8007258 <_vfiprintf_r+0x18>
 8007250:	6a03      	ldr	r3, [r0, #32]
 8007252:	b90b      	cbnz	r3, 8007258 <_vfiprintf_r+0x18>
 8007254:	f7ff faec 	bl	8006830 <__sinit>
 8007258:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800725a:	07d9      	lsls	r1, r3, #31
 800725c:	d405      	bmi.n	800726a <_vfiprintf_r+0x2a>
 800725e:	89ab      	ldrh	r3, [r5, #12]
 8007260:	059a      	lsls	r2, r3, #22
 8007262:	d402      	bmi.n	800726a <_vfiprintf_r+0x2a>
 8007264:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007266:	f7ff fd61 	bl	8006d2c <__retarget_lock_acquire_recursive>
 800726a:	89ab      	ldrh	r3, [r5, #12]
 800726c:	071b      	lsls	r3, r3, #28
 800726e:	d501      	bpl.n	8007274 <_vfiprintf_r+0x34>
 8007270:	692b      	ldr	r3, [r5, #16]
 8007272:	b99b      	cbnz	r3, 800729c <_vfiprintf_r+0x5c>
 8007274:	4629      	mov	r1, r5
 8007276:	4630      	mov	r0, r6
 8007278:	f7ff fc32 	bl	8006ae0 <__swsetup_r>
 800727c:	b170      	cbz	r0, 800729c <_vfiprintf_r+0x5c>
 800727e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007280:	07dc      	lsls	r4, r3, #31
 8007282:	d504      	bpl.n	800728e <_vfiprintf_r+0x4e>
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	b01d      	add	sp, #116	; 0x74
 800728a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800728e:	89ab      	ldrh	r3, [r5, #12]
 8007290:	0598      	lsls	r0, r3, #22
 8007292:	d4f7      	bmi.n	8007284 <_vfiprintf_r+0x44>
 8007294:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007296:	f7ff fd4a 	bl	8006d2e <__retarget_lock_release_recursive>
 800729a:	e7f3      	b.n	8007284 <_vfiprintf_r+0x44>
 800729c:	2300      	movs	r3, #0
 800729e:	9309      	str	r3, [sp, #36]	; 0x24
 80072a0:	2320      	movs	r3, #32
 80072a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072aa:	2330      	movs	r3, #48	; 0x30
 80072ac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007460 <_vfiprintf_r+0x220>
 80072b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072b4:	f04f 0901 	mov.w	r9, #1
 80072b8:	4623      	mov	r3, r4
 80072ba:	469a      	mov	sl, r3
 80072bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072c0:	b10a      	cbz	r2, 80072c6 <_vfiprintf_r+0x86>
 80072c2:	2a25      	cmp	r2, #37	; 0x25
 80072c4:	d1f9      	bne.n	80072ba <_vfiprintf_r+0x7a>
 80072c6:	ebba 0b04 	subs.w	fp, sl, r4
 80072ca:	d00b      	beq.n	80072e4 <_vfiprintf_r+0xa4>
 80072cc:	465b      	mov	r3, fp
 80072ce:	4622      	mov	r2, r4
 80072d0:	4629      	mov	r1, r5
 80072d2:	4630      	mov	r0, r6
 80072d4:	f7ff ffa1 	bl	800721a <__sfputs_r>
 80072d8:	3001      	adds	r0, #1
 80072da:	f000 80a9 	beq.w	8007430 <_vfiprintf_r+0x1f0>
 80072de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072e0:	445a      	add	r2, fp
 80072e2:	9209      	str	r2, [sp, #36]	; 0x24
 80072e4:	f89a 3000 	ldrb.w	r3, [sl]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	f000 80a1 	beq.w	8007430 <_vfiprintf_r+0x1f0>
 80072ee:	2300      	movs	r3, #0
 80072f0:	f04f 32ff 	mov.w	r2, #4294967295
 80072f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80072f8:	f10a 0a01 	add.w	sl, sl, #1
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	9307      	str	r3, [sp, #28]
 8007300:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007304:	931a      	str	r3, [sp, #104]	; 0x68
 8007306:	4654      	mov	r4, sl
 8007308:	2205      	movs	r2, #5
 800730a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800730e:	4854      	ldr	r0, [pc, #336]	; (8007460 <_vfiprintf_r+0x220>)
 8007310:	f7f8 ff7e 	bl	8000210 <memchr>
 8007314:	9a04      	ldr	r2, [sp, #16]
 8007316:	b9d8      	cbnz	r0, 8007350 <_vfiprintf_r+0x110>
 8007318:	06d1      	lsls	r1, r2, #27
 800731a:	bf44      	itt	mi
 800731c:	2320      	movmi	r3, #32
 800731e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007322:	0713      	lsls	r3, r2, #28
 8007324:	bf44      	itt	mi
 8007326:	232b      	movmi	r3, #43	; 0x2b
 8007328:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800732c:	f89a 3000 	ldrb.w	r3, [sl]
 8007330:	2b2a      	cmp	r3, #42	; 0x2a
 8007332:	d015      	beq.n	8007360 <_vfiprintf_r+0x120>
 8007334:	9a07      	ldr	r2, [sp, #28]
 8007336:	4654      	mov	r4, sl
 8007338:	2000      	movs	r0, #0
 800733a:	f04f 0c0a 	mov.w	ip, #10
 800733e:	4621      	mov	r1, r4
 8007340:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007344:	3b30      	subs	r3, #48	; 0x30
 8007346:	2b09      	cmp	r3, #9
 8007348:	d94d      	bls.n	80073e6 <_vfiprintf_r+0x1a6>
 800734a:	b1b0      	cbz	r0, 800737a <_vfiprintf_r+0x13a>
 800734c:	9207      	str	r2, [sp, #28]
 800734e:	e014      	b.n	800737a <_vfiprintf_r+0x13a>
 8007350:	eba0 0308 	sub.w	r3, r0, r8
 8007354:	fa09 f303 	lsl.w	r3, r9, r3
 8007358:	4313      	orrs	r3, r2
 800735a:	9304      	str	r3, [sp, #16]
 800735c:	46a2      	mov	sl, r4
 800735e:	e7d2      	b.n	8007306 <_vfiprintf_r+0xc6>
 8007360:	9b03      	ldr	r3, [sp, #12]
 8007362:	1d19      	adds	r1, r3, #4
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	9103      	str	r1, [sp, #12]
 8007368:	2b00      	cmp	r3, #0
 800736a:	bfbb      	ittet	lt
 800736c:	425b      	neglt	r3, r3
 800736e:	f042 0202 	orrlt.w	r2, r2, #2
 8007372:	9307      	strge	r3, [sp, #28]
 8007374:	9307      	strlt	r3, [sp, #28]
 8007376:	bfb8      	it	lt
 8007378:	9204      	strlt	r2, [sp, #16]
 800737a:	7823      	ldrb	r3, [r4, #0]
 800737c:	2b2e      	cmp	r3, #46	; 0x2e
 800737e:	d10c      	bne.n	800739a <_vfiprintf_r+0x15a>
 8007380:	7863      	ldrb	r3, [r4, #1]
 8007382:	2b2a      	cmp	r3, #42	; 0x2a
 8007384:	d134      	bne.n	80073f0 <_vfiprintf_r+0x1b0>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d1a      	adds	r2, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9203      	str	r2, [sp, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfb8      	it	lt
 8007392:	f04f 33ff 	movlt.w	r3, #4294967295
 8007396:	3402      	adds	r4, #2
 8007398:	9305      	str	r3, [sp, #20]
 800739a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007470 <_vfiprintf_r+0x230>
 800739e:	7821      	ldrb	r1, [r4, #0]
 80073a0:	2203      	movs	r2, #3
 80073a2:	4650      	mov	r0, sl
 80073a4:	f7f8 ff34 	bl	8000210 <memchr>
 80073a8:	b138      	cbz	r0, 80073ba <_vfiprintf_r+0x17a>
 80073aa:	9b04      	ldr	r3, [sp, #16]
 80073ac:	eba0 000a 	sub.w	r0, r0, sl
 80073b0:	2240      	movs	r2, #64	; 0x40
 80073b2:	4082      	lsls	r2, r0
 80073b4:	4313      	orrs	r3, r2
 80073b6:	3401      	adds	r4, #1
 80073b8:	9304      	str	r3, [sp, #16]
 80073ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073be:	4829      	ldr	r0, [pc, #164]	; (8007464 <_vfiprintf_r+0x224>)
 80073c0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073c4:	2206      	movs	r2, #6
 80073c6:	f7f8 ff23 	bl	8000210 <memchr>
 80073ca:	2800      	cmp	r0, #0
 80073cc:	d03f      	beq.n	800744e <_vfiprintf_r+0x20e>
 80073ce:	4b26      	ldr	r3, [pc, #152]	; (8007468 <_vfiprintf_r+0x228>)
 80073d0:	bb1b      	cbnz	r3, 800741a <_vfiprintf_r+0x1da>
 80073d2:	9b03      	ldr	r3, [sp, #12]
 80073d4:	3307      	adds	r3, #7
 80073d6:	f023 0307 	bic.w	r3, r3, #7
 80073da:	3308      	adds	r3, #8
 80073dc:	9303      	str	r3, [sp, #12]
 80073de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073e0:	443b      	add	r3, r7
 80073e2:	9309      	str	r3, [sp, #36]	; 0x24
 80073e4:	e768      	b.n	80072b8 <_vfiprintf_r+0x78>
 80073e6:	fb0c 3202 	mla	r2, ip, r2, r3
 80073ea:	460c      	mov	r4, r1
 80073ec:	2001      	movs	r0, #1
 80073ee:	e7a6      	b.n	800733e <_vfiprintf_r+0xfe>
 80073f0:	2300      	movs	r3, #0
 80073f2:	3401      	adds	r4, #1
 80073f4:	9305      	str	r3, [sp, #20]
 80073f6:	4619      	mov	r1, r3
 80073f8:	f04f 0c0a 	mov.w	ip, #10
 80073fc:	4620      	mov	r0, r4
 80073fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007402:	3a30      	subs	r2, #48	; 0x30
 8007404:	2a09      	cmp	r2, #9
 8007406:	d903      	bls.n	8007410 <_vfiprintf_r+0x1d0>
 8007408:	2b00      	cmp	r3, #0
 800740a:	d0c6      	beq.n	800739a <_vfiprintf_r+0x15a>
 800740c:	9105      	str	r1, [sp, #20]
 800740e:	e7c4      	b.n	800739a <_vfiprintf_r+0x15a>
 8007410:	fb0c 2101 	mla	r1, ip, r1, r2
 8007414:	4604      	mov	r4, r0
 8007416:	2301      	movs	r3, #1
 8007418:	e7f0      	b.n	80073fc <_vfiprintf_r+0x1bc>
 800741a:	ab03      	add	r3, sp, #12
 800741c:	9300      	str	r3, [sp, #0]
 800741e:	462a      	mov	r2, r5
 8007420:	4b12      	ldr	r3, [pc, #72]	; (800746c <_vfiprintf_r+0x22c>)
 8007422:	a904      	add	r1, sp, #16
 8007424:	4630      	mov	r0, r6
 8007426:	f3af 8000 	nop.w
 800742a:	4607      	mov	r7, r0
 800742c:	1c78      	adds	r0, r7, #1
 800742e:	d1d6      	bne.n	80073de <_vfiprintf_r+0x19e>
 8007430:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007432:	07d9      	lsls	r1, r3, #31
 8007434:	d405      	bmi.n	8007442 <_vfiprintf_r+0x202>
 8007436:	89ab      	ldrh	r3, [r5, #12]
 8007438:	059a      	lsls	r2, r3, #22
 800743a:	d402      	bmi.n	8007442 <_vfiprintf_r+0x202>
 800743c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800743e:	f7ff fc76 	bl	8006d2e <__retarget_lock_release_recursive>
 8007442:	89ab      	ldrh	r3, [r5, #12]
 8007444:	065b      	lsls	r3, r3, #25
 8007446:	f53f af1d 	bmi.w	8007284 <_vfiprintf_r+0x44>
 800744a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800744c:	e71c      	b.n	8007288 <_vfiprintf_r+0x48>
 800744e:	ab03      	add	r3, sp, #12
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	462a      	mov	r2, r5
 8007454:	4b05      	ldr	r3, [pc, #20]	; (800746c <_vfiprintf_r+0x22c>)
 8007456:	a904      	add	r1, sp, #16
 8007458:	4630      	mov	r0, r6
 800745a:	f000 f879 	bl	8007550 <_printf_i>
 800745e:	e7e4      	b.n	800742a <_vfiprintf_r+0x1ea>
 8007460:	08007d59 	.word	0x08007d59
 8007464:	08007d63 	.word	0x08007d63
 8007468:	00000000 	.word	0x00000000
 800746c:	0800721b 	.word	0x0800721b
 8007470:	08007d5f 	.word	0x08007d5f

08007474 <_printf_common>:
 8007474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007478:	4616      	mov	r6, r2
 800747a:	4699      	mov	r9, r3
 800747c:	688a      	ldr	r2, [r1, #8]
 800747e:	690b      	ldr	r3, [r1, #16]
 8007480:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007484:	4293      	cmp	r3, r2
 8007486:	bfb8      	it	lt
 8007488:	4613      	movlt	r3, r2
 800748a:	6033      	str	r3, [r6, #0]
 800748c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007490:	4607      	mov	r7, r0
 8007492:	460c      	mov	r4, r1
 8007494:	b10a      	cbz	r2, 800749a <_printf_common+0x26>
 8007496:	3301      	adds	r3, #1
 8007498:	6033      	str	r3, [r6, #0]
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	0699      	lsls	r1, r3, #26
 800749e:	bf42      	ittt	mi
 80074a0:	6833      	ldrmi	r3, [r6, #0]
 80074a2:	3302      	addmi	r3, #2
 80074a4:	6033      	strmi	r3, [r6, #0]
 80074a6:	6825      	ldr	r5, [r4, #0]
 80074a8:	f015 0506 	ands.w	r5, r5, #6
 80074ac:	d106      	bne.n	80074bc <_printf_common+0x48>
 80074ae:	f104 0a19 	add.w	sl, r4, #25
 80074b2:	68e3      	ldr	r3, [r4, #12]
 80074b4:	6832      	ldr	r2, [r6, #0]
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	42ab      	cmp	r3, r5
 80074ba:	dc26      	bgt.n	800750a <_printf_common+0x96>
 80074bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074c0:	1e13      	subs	r3, r2, #0
 80074c2:	6822      	ldr	r2, [r4, #0]
 80074c4:	bf18      	it	ne
 80074c6:	2301      	movne	r3, #1
 80074c8:	0692      	lsls	r2, r2, #26
 80074ca:	d42b      	bmi.n	8007524 <_printf_common+0xb0>
 80074cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d0:	4649      	mov	r1, r9
 80074d2:	4638      	mov	r0, r7
 80074d4:	47c0      	blx	r8
 80074d6:	3001      	adds	r0, #1
 80074d8:	d01e      	beq.n	8007518 <_printf_common+0xa4>
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	6922      	ldr	r2, [r4, #16]
 80074de:	f003 0306 	and.w	r3, r3, #6
 80074e2:	2b04      	cmp	r3, #4
 80074e4:	bf02      	ittt	eq
 80074e6:	68e5      	ldreq	r5, [r4, #12]
 80074e8:	6833      	ldreq	r3, [r6, #0]
 80074ea:	1aed      	subeq	r5, r5, r3
 80074ec:	68a3      	ldr	r3, [r4, #8]
 80074ee:	bf0c      	ite	eq
 80074f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80074f4:	2500      	movne	r5, #0
 80074f6:	4293      	cmp	r3, r2
 80074f8:	bfc4      	itt	gt
 80074fa:	1a9b      	subgt	r3, r3, r2
 80074fc:	18ed      	addgt	r5, r5, r3
 80074fe:	2600      	movs	r6, #0
 8007500:	341a      	adds	r4, #26
 8007502:	42b5      	cmp	r5, r6
 8007504:	d11a      	bne.n	800753c <_printf_common+0xc8>
 8007506:	2000      	movs	r0, #0
 8007508:	e008      	b.n	800751c <_printf_common+0xa8>
 800750a:	2301      	movs	r3, #1
 800750c:	4652      	mov	r2, sl
 800750e:	4649      	mov	r1, r9
 8007510:	4638      	mov	r0, r7
 8007512:	47c0      	blx	r8
 8007514:	3001      	adds	r0, #1
 8007516:	d103      	bne.n	8007520 <_printf_common+0xac>
 8007518:	f04f 30ff 	mov.w	r0, #4294967295
 800751c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007520:	3501      	adds	r5, #1
 8007522:	e7c6      	b.n	80074b2 <_printf_common+0x3e>
 8007524:	18e1      	adds	r1, r4, r3
 8007526:	1c5a      	adds	r2, r3, #1
 8007528:	2030      	movs	r0, #48	; 0x30
 800752a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800752e:	4422      	add	r2, r4
 8007530:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007534:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007538:	3302      	adds	r3, #2
 800753a:	e7c7      	b.n	80074cc <_printf_common+0x58>
 800753c:	2301      	movs	r3, #1
 800753e:	4622      	mov	r2, r4
 8007540:	4649      	mov	r1, r9
 8007542:	4638      	mov	r0, r7
 8007544:	47c0      	blx	r8
 8007546:	3001      	adds	r0, #1
 8007548:	d0e6      	beq.n	8007518 <_printf_common+0xa4>
 800754a:	3601      	adds	r6, #1
 800754c:	e7d9      	b.n	8007502 <_printf_common+0x8e>
	...

08007550 <_printf_i>:
 8007550:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007554:	7e0f      	ldrb	r7, [r1, #24]
 8007556:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007558:	2f78      	cmp	r7, #120	; 0x78
 800755a:	4691      	mov	r9, r2
 800755c:	4680      	mov	r8, r0
 800755e:	460c      	mov	r4, r1
 8007560:	469a      	mov	sl, r3
 8007562:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007566:	d807      	bhi.n	8007578 <_printf_i+0x28>
 8007568:	2f62      	cmp	r7, #98	; 0x62
 800756a:	d80a      	bhi.n	8007582 <_printf_i+0x32>
 800756c:	2f00      	cmp	r7, #0
 800756e:	f000 80d4 	beq.w	800771a <_printf_i+0x1ca>
 8007572:	2f58      	cmp	r7, #88	; 0x58
 8007574:	f000 80c0 	beq.w	80076f8 <_printf_i+0x1a8>
 8007578:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800757c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007580:	e03a      	b.n	80075f8 <_printf_i+0xa8>
 8007582:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007586:	2b15      	cmp	r3, #21
 8007588:	d8f6      	bhi.n	8007578 <_printf_i+0x28>
 800758a:	a101      	add	r1, pc, #4	; (adr r1, 8007590 <_printf_i+0x40>)
 800758c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007590:	080075e9 	.word	0x080075e9
 8007594:	080075fd 	.word	0x080075fd
 8007598:	08007579 	.word	0x08007579
 800759c:	08007579 	.word	0x08007579
 80075a0:	08007579 	.word	0x08007579
 80075a4:	08007579 	.word	0x08007579
 80075a8:	080075fd 	.word	0x080075fd
 80075ac:	08007579 	.word	0x08007579
 80075b0:	08007579 	.word	0x08007579
 80075b4:	08007579 	.word	0x08007579
 80075b8:	08007579 	.word	0x08007579
 80075bc:	08007701 	.word	0x08007701
 80075c0:	08007629 	.word	0x08007629
 80075c4:	080076bb 	.word	0x080076bb
 80075c8:	08007579 	.word	0x08007579
 80075cc:	08007579 	.word	0x08007579
 80075d0:	08007723 	.word	0x08007723
 80075d4:	08007579 	.word	0x08007579
 80075d8:	08007629 	.word	0x08007629
 80075dc:	08007579 	.word	0x08007579
 80075e0:	08007579 	.word	0x08007579
 80075e4:	080076c3 	.word	0x080076c3
 80075e8:	682b      	ldr	r3, [r5, #0]
 80075ea:	1d1a      	adds	r2, r3, #4
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	602a      	str	r2, [r5, #0]
 80075f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80075f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80075f8:	2301      	movs	r3, #1
 80075fa:	e09f      	b.n	800773c <_printf_i+0x1ec>
 80075fc:	6820      	ldr	r0, [r4, #0]
 80075fe:	682b      	ldr	r3, [r5, #0]
 8007600:	0607      	lsls	r7, r0, #24
 8007602:	f103 0104 	add.w	r1, r3, #4
 8007606:	6029      	str	r1, [r5, #0]
 8007608:	d501      	bpl.n	800760e <_printf_i+0xbe>
 800760a:	681e      	ldr	r6, [r3, #0]
 800760c:	e003      	b.n	8007616 <_printf_i+0xc6>
 800760e:	0646      	lsls	r6, r0, #25
 8007610:	d5fb      	bpl.n	800760a <_printf_i+0xba>
 8007612:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007616:	2e00      	cmp	r6, #0
 8007618:	da03      	bge.n	8007622 <_printf_i+0xd2>
 800761a:	232d      	movs	r3, #45	; 0x2d
 800761c:	4276      	negs	r6, r6
 800761e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007622:	485a      	ldr	r0, [pc, #360]	; (800778c <_printf_i+0x23c>)
 8007624:	230a      	movs	r3, #10
 8007626:	e012      	b.n	800764e <_printf_i+0xfe>
 8007628:	682b      	ldr	r3, [r5, #0]
 800762a:	6820      	ldr	r0, [r4, #0]
 800762c:	1d19      	adds	r1, r3, #4
 800762e:	6029      	str	r1, [r5, #0]
 8007630:	0605      	lsls	r5, r0, #24
 8007632:	d501      	bpl.n	8007638 <_printf_i+0xe8>
 8007634:	681e      	ldr	r6, [r3, #0]
 8007636:	e002      	b.n	800763e <_printf_i+0xee>
 8007638:	0641      	lsls	r1, r0, #25
 800763a:	d5fb      	bpl.n	8007634 <_printf_i+0xe4>
 800763c:	881e      	ldrh	r6, [r3, #0]
 800763e:	4853      	ldr	r0, [pc, #332]	; (800778c <_printf_i+0x23c>)
 8007640:	2f6f      	cmp	r7, #111	; 0x6f
 8007642:	bf0c      	ite	eq
 8007644:	2308      	moveq	r3, #8
 8007646:	230a      	movne	r3, #10
 8007648:	2100      	movs	r1, #0
 800764a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800764e:	6865      	ldr	r5, [r4, #4]
 8007650:	60a5      	str	r5, [r4, #8]
 8007652:	2d00      	cmp	r5, #0
 8007654:	bfa2      	ittt	ge
 8007656:	6821      	ldrge	r1, [r4, #0]
 8007658:	f021 0104 	bicge.w	r1, r1, #4
 800765c:	6021      	strge	r1, [r4, #0]
 800765e:	b90e      	cbnz	r6, 8007664 <_printf_i+0x114>
 8007660:	2d00      	cmp	r5, #0
 8007662:	d04b      	beq.n	80076fc <_printf_i+0x1ac>
 8007664:	4615      	mov	r5, r2
 8007666:	fbb6 f1f3 	udiv	r1, r6, r3
 800766a:	fb03 6711 	mls	r7, r3, r1, r6
 800766e:	5dc7      	ldrb	r7, [r0, r7]
 8007670:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007674:	4637      	mov	r7, r6
 8007676:	42bb      	cmp	r3, r7
 8007678:	460e      	mov	r6, r1
 800767a:	d9f4      	bls.n	8007666 <_printf_i+0x116>
 800767c:	2b08      	cmp	r3, #8
 800767e:	d10b      	bne.n	8007698 <_printf_i+0x148>
 8007680:	6823      	ldr	r3, [r4, #0]
 8007682:	07de      	lsls	r6, r3, #31
 8007684:	d508      	bpl.n	8007698 <_printf_i+0x148>
 8007686:	6923      	ldr	r3, [r4, #16]
 8007688:	6861      	ldr	r1, [r4, #4]
 800768a:	4299      	cmp	r1, r3
 800768c:	bfde      	ittt	le
 800768e:	2330      	movle	r3, #48	; 0x30
 8007690:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007694:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007698:	1b52      	subs	r2, r2, r5
 800769a:	6122      	str	r2, [r4, #16]
 800769c:	f8cd a000 	str.w	sl, [sp]
 80076a0:	464b      	mov	r3, r9
 80076a2:	aa03      	add	r2, sp, #12
 80076a4:	4621      	mov	r1, r4
 80076a6:	4640      	mov	r0, r8
 80076a8:	f7ff fee4 	bl	8007474 <_printf_common>
 80076ac:	3001      	adds	r0, #1
 80076ae:	d14a      	bne.n	8007746 <_printf_i+0x1f6>
 80076b0:	f04f 30ff 	mov.w	r0, #4294967295
 80076b4:	b004      	add	sp, #16
 80076b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076ba:	6823      	ldr	r3, [r4, #0]
 80076bc:	f043 0320 	orr.w	r3, r3, #32
 80076c0:	6023      	str	r3, [r4, #0]
 80076c2:	4833      	ldr	r0, [pc, #204]	; (8007790 <_printf_i+0x240>)
 80076c4:	2778      	movs	r7, #120	; 0x78
 80076c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80076ca:	6823      	ldr	r3, [r4, #0]
 80076cc:	6829      	ldr	r1, [r5, #0]
 80076ce:	061f      	lsls	r7, r3, #24
 80076d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80076d4:	d402      	bmi.n	80076dc <_printf_i+0x18c>
 80076d6:	065f      	lsls	r7, r3, #25
 80076d8:	bf48      	it	mi
 80076da:	b2b6      	uxthmi	r6, r6
 80076dc:	07df      	lsls	r7, r3, #31
 80076de:	bf48      	it	mi
 80076e0:	f043 0320 	orrmi.w	r3, r3, #32
 80076e4:	6029      	str	r1, [r5, #0]
 80076e6:	bf48      	it	mi
 80076e8:	6023      	strmi	r3, [r4, #0]
 80076ea:	b91e      	cbnz	r6, 80076f4 <_printf_i+0x1a4>
 80076ec:	6823      	ldr	r3, [r4, #0]
 80076ee:	f023 0320 	bic.w	r3, r3, #32
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	2310      	movs	r3, #16
 80076f6:	e7a7      	b.n	8007648 <_printf_i+0xf8>
 80076f8:	4824      	ldr	r0, [pc, #144]	; (800778c <_printf_i+0x23c>)
 80076fa:	e7e4      	b.n	80076c6 <_printf_i+0x176>
 80076fc:	4615      	mov	r5, r2
 80076fe:	e7bd      	b.n	800767c <_printf_i+0x12c>
 8007700:	682b      	ldr	r3, [r5, #0]
 8007702:	6826      	ldr	r6, [r4, #0]
 8007704:	6961      	ldr	r1, [r4, #20]
 8007706:	1d18      	adds	r0, r3, #4
 8007708:	6028      	str	r0, [r5, #0]
 800770a:	0635      	lsls	r5, r6, #24
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	d501      	bpl.n	8007714 <_printf_i+0x1c4>
 8007710:	6019      	str	r1, [r3, #0]
 8007712:	e002      	b.n	800771a <_printf_i+0x1ca>
 8007714:	0670      	lsls	r0, r6, #25
 8007716:	d5fb      	bpl.n	8007710 <_printf_i+0x1c0>
 8007718:	8019      	strh	r1, [r3, #0]
 800771a:	2300      	movs	r3, #0
 800771c:	6123      	str	r3, [r4, #16]
 800771e:	4615      	mov	r5, r2
 8007720:	e7bc      	b.n	800769c <_printf_i+0x14c>
 8007722:	682b      	ldr	r3, [r5, #0]
 8007724:	1d1a      	adds	r2, r3, #4
 8007726:	602a      	str	r2, [r5, #0]
 8007728:	681d      	ldr	r5, [r3, #0]
 800772a:	6862      	ldr	r2, [r4, #4]
 800772c:	2100      	movs	r1, #0
 800772e:	4628      	mov	r0, r5
 8007730:	f7f8 fd6e 	bl	8000210 <memchr>
 8007734:	b108      	cbz	r0, 800773a <_printf_i+0x1ea>
 8007736:	1b40      	subs	r0, r0, r5
 8007738:	6060      	str	r0, [r4, #4]
 800773a:	6863      	ldr	r3, [r4, #4]
 800773c:	6123      	str	r3, [r4, #16]
 800773e:	2300      	movs	r3, #0
 8007740:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007744:	e7aa      	b.n	800769c <_printf_i+0x14c>
 8007746:	6923      	ldr	r3, [r4, #16]
 8007748:	462a      	mov	r2, r5
 800774a:	4649      	mov	r1, r9
 800774c:	4640      	mov	r0, r8
 800774e:	47d0      	blx	sl
 8007750:	3001      	adds	r0, #1
 8007752:	d0ad      	beq.n	80076b0 <_printf_i+0x160>
 8007754:	6823      	ldr	r3, [r4, #0]
 8007756:	079b      	lsls	r3, r3, #30
 8007758:	d413      	bmi.n	8007782 <_printf_i+0x232>
 800775a:	68e0      	ldr	r0, [r4, #12]
 800775c:	9b03      	ldr	r3, [sp, #12]
 800775e:	4298      	cmp	r0, r3
 8007760:	bfb8      	it	lt
 8007762:	4618      	movlt	r0, r3
 8007764:	e7a6      	b.n	80076b4 <_printf_i+0x164>
 8007766:	2301      	movs	r3, #1
 8007768:	4632      	mov	r2, r6
 800776a:	4649      	mov	r1, r9
 800776c:	4640      	mov	r0, r8
 800776e:	47d0      	blx	sl
 8007770:	3001      	adds	r0, #1
 8007772:	d09d      	beq.n	80076b0 <_printf_i+0x160>
 8007774:	3501      	adds	r5, #1
 8007776:	68e3      	ldr	r3, [r4, #12]
 8007778:	9903      	ldr	r1, [sp, #12]
 800777a:	1a5b      	subs	r3, r3, r1
 800777c:	42ab      	cmp	r3, r5
 800777e:	dcf2      	bgt.n	8007766 <_printf_i+0x216>
 8007780:	e7eb      	b.n	800775a <_printf_i+0x20a>
 8007782:	2500      	movs	r5, #0
 8007784:	f104 0619 	add.w	r6, r4, #25
 8007788:	e7f5      	b.n	8007776 <_printf_i+0x226>
 800778a:	bf00      	nop
 800778c:	08007d6a 	.word	0x08007d6a
 8007790:	08007d7b 	.word	0x08007d7b

08007794 <__sflush_r>:
 8007794:	898a      	ldrh	r2, [r1, #12]
 8007796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800779a:	4605      	mov	r5, r0
 800779c:	0710      	lsls	r0, r2, #28
 800779e:	460c      	mov	r4, r1
 80077a0:	d458      	bmi.n	8007854 <__sflush_r+0xc0>
 80077a2:	684b      	ldr	r3, [r1, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	dc05      	bgt.n	80077b4 <__sflush_r+0x20>
 80077a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	dc02      	bgt.n	80077b4 <__sflush_r+0x20>
 80077ae:	2000      	movs	r0, #0
 80077b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077b6:	2e00      	cmp	r6, #0
 80077b8:	d0f9      	beq.n	80077ae <__sflush_r+0x1a>
 80077ba:	2300      	movs	r3, #0
 80077bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80077c0:	682f      	ldr	r7, [r5, #0]
 80077c2:	6a21      	ldr	r1, [r4, #32]
 80077c4:	602b      	str	r3, [r5, #0]
 80077c6:	d032      	beq.n	800782e <__sflush_r+0x9a>
 80077c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80077ca:	89a3      	ldrh	r3, [r4, #12]
 80077cc:	075a      	lsls	r2, r3, #29
 80077ce:	d505      	bpl.n	80077dc <__sflush_r+0x48>
 80077d0:	6863      	ldr	r3, [r4, #4]
 80077d2:	1ac0      	subs	r0, r0, r3
 80077d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80077d6:	b10b      	cbz	r3, 80077dc <__sflush_r+0x48>
 80077d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80077da:	1ac0      	subs	r0, r0, r3
 80077dc:	2300      	movs	r3, #0
 80077de:	4602      	mov	r2, r0
 80077e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80077e2:	6a21      	ldr	r1, [r4, #32]
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	d106      	bne.n	80077fc <__sflush_r+0x68>
 80077ee:	6829      	ldr	r1, [r5, #0]
 80077f0:	291d      	cmp	r1, #29
 80077f2:	d82b      	bhi.n	800784c <__sflush_r+0xb8>
 80077f4:	4a29      	ldr	r2, [pc, #164]	; (800789c <__sflush_r+0x108>)
 80077f6:	410a      	asrs	r2, r1
 80077f8:	07d6      	lsls	r6, r2, #31
 80077fa:	d427      	bmi.n	800784c <__sflush_r+0xb8>
 80077fc:	2200      	movs	r2, #0
 80077fe:	6062      	str	r2, [r4, #4]
 8007800:	04d9      	lsls	r1, r3, #19
 8007802:	6922      	ldr	r2, [r4, #16]
 8007804:	6022      	str	r2, [r4, #0]
 8007806:	d504      	bpl.n	8007812 <__sflush_r+0x7e>
 8007808:	1c42      	adds	r2, r0, #1
 800780a:	d101      	bne.n	8007810 <__sflush_r+0x7c>
 800780c:	682b      	ldr	r3, [r5, #0]
 800780e:	b903      	cbnz	r3, 8007812 <__sflush_r+0x7e>
 8007810:	6560      	str	r0, [r4, #84]	; 0x54
 8007812:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007814:	602f      	str	r7, [r5, #0]
 8007816:	2900      	cmp	r1, #0
 8007818:	d0c9      	beq.n	80077ae <__sflush_r+0x1a>
 800781a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800781e:	4299      	cmp	r1, r3
 8007820:	d002      	beq.n	8007828 <__sflush_r+0x94>
 8007822:	4628      	mov	r0, r5
 8007824:	f7ff fa92 	bl	8006d4c <_free_r>
 8007828:	2000      	movs	r0, #0
 800782a:	6360      	str	r0, [r4, #52]	; 0x34
 800782c:	e7c0      	b.n	80077b0 <__sflush_r+0x1c>
 800782e:	2301      	movs	r3, #1
 8007830:	4628      	mov	r0, r5
 8007832:	47b0      	blx	r6
 8007834:	1c41      	adds	r1, r0, #1
 8007836:	d1c8      	bne.n	80077ca <__sflush_r+0x36>
 8007838:	682b      	ldr	r3, [r5, #0]
 800783a:	2b00      	cmp	r3, #0
 800783c:	d0c5      	beq.n	80077ca <__sflush_r+0x36>
 800783e:	2b1d      	cmp	r3, #29
 8007840:	d001      	beq.n	8007846 <__sflush_r+0xb2>
 8007842:	2b16      	cmp	r3, #22
 8007844:	d101      	bne.n	800784a <__sflush_r+0xb6>
 8007846:	602f      	str	r7, [r5, #0]
 8007848:	e7b1      	b.n	80077ae <__sflush_r+0x1a>
 800784a:	89a3      	ldrh	r3, [r4, #12]
 800784c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007850:	81a3      	strh	r3, [r4, #12]
 8007852:	e7ad      	b.n	80077b0 <__sflush_r+0x1c>
 8007854:	690f      	ldr	r7, [r1, #16]
 8007856:	2f00      	cmp	r7, #0
 8007858:	d0a9      	beq.n	80077ae <__sflush_r+0x1a>
 800785a:	0793      	lsls	r3, r2, #30
 800785c:	680e      	ldr	r6, [r1, #0]
 800785e:	bf08      	it	eq
 8007860:	694b      	ldreq	r3, [r1, #20]
 8007862:	600f      	str	r7, [r1, #0]
 8007864:	bf18      	it	ne
 8007866:	2300      	movne	r3, #0
 8007868:	eba6 0807 	sub.w	r8, r6, r7
 800786c:	608b      	str	r3, [r1, #8]
 800786e:	f1b8 0f00 	cmp.w	r8, #0
 8007872:	dd9c      	ble.n	80077ae <__sflush_r+0x1a>
 8007874:	6a21      	ldr	r1, [r4, #32]
 8007876:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007878:	4643      	mov	r3, r8
 800787a:	463a      	mov	r2, r7
 800787c:	4628      	mov	r0, r5
 800787e:	47b0      	blx	r6
 8007880:	2800      	cmp	r0, #0
 8007882:	dc06      	bgt.n	8007892 <__sflush_r+0xfe>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800788a:	81a3      	strh	r3, [r4, #12]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	e78e      	b.n	80077b0 <__sflush_r+0x1c>
 8007892:	4407      	add	r7, r0
 8007894:	eba8 0800 	sub.w	r8, r8, r0
 8007898:	e7e9      	b.n	800786e <__sflush_r+0xda>
 800789a:	bf00      	nop
 800789c:	dfbffffe 	.word	0xdfbffffe

080078a0 <_fflush_r>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	690b      	ldr	r3, [r1, #16]
 80078a4:	4605      	mov	r5, r0
 80078a6:	460c      	mov	r4, r1
 80078a8:	b913      	cbnz	r3, 80078b0 <_fflush_r+0x10>
 80078aa:	2500      	movs	r5, #0
 80078ac:	4628      	mov	r0, r5
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	b118      	cbz	r0, 80078ba <_fflush_r+0x1a>
 80078b2:	6a03      	ldr	r3, [r0, #32]
 80078b4:	b90b      	cbnz	r3, 80078ba <_fflush_r+0x1a>
 80078b6:	f7fe ffbb 	bl	8006830 <__sinit>
 80078ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d0f3      	beq.n	80078aa <_fflush_r+0xa>
 80078c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80078c4:	07d0      	lsls	r0, r2, #31
 80078c6:	d404      	bmi.n	80078d2 <_fflush_r+0x32>
 80078c8:	0599      	lsls	r1, r3, #22
 80078ca:	d402      	bmi.n	80078d2 <_fflush_r+0x32>
 80078cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ce:	f7ff fa2d 	bl	8006d2c <__retarget_lock_acquire_recursive>
 80078d2:	4628      	mov	r0, r5
 80078d4:	4621      	mov	r1, r4
 80078d6:	f7ff ff5d 	bl	8007794 <__sflush_r>
 80078da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80078dc:	07da      	lsls	r2, r3, #31
 80078de:	4605      	mov	r5, r0
 80078e0:	d4e4      	bmi.n	80078ac <_fflush_r+0xc>
 80078e2:	89a3      	ldrh	r3, [r4, #12]
 80078e4:	059b      	lsls	r3, r3, #22
 80078e6:	d4e1      	bmi.n	80078ac <_fflush_r+0xc>
 80078e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80078ea:	f7ff fa20 	bl	8006d2e <__retarget_lock_release_recursive>
 80078ee:	e7dd      	b.n	80078ac <_fflush_r+0xc>

080078f0 <__swhatbuf_r>:
 80078f0:	b570      	push	{r4, r5, r6, lr}
 80078f2:	460c      	mov	r4, r1
 80078f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078f8:	2900      	cmp	r1, #0
 80078fa:	b096      	sub	sp, #88	; 0x58
 80078fc:	4615      	mov	r5, r2
 80078fe:	461e      	mov	r6, r3
 8007900:	da0d      	bge.n	800791e <__swhatbuf_r+0x2e>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007908:	f04f 0100 	mov.w	r1, #0
 800790c:	bf0c      	ite	eq
 800790e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007912:	2340      	movne	r3, #64	; 0x40
 8007914:	2000      	movs	r0, #0
 8007916:	6031      	str	r1, [r6, #0]
 8007918:	602b      	str	r3, [r5, #0]
 800791a:	b016      	add	sp, #88	; 0x58
 800791c:	bd70      	pop	{r4, r5, r6, pc}
 800791e:	466a      	mov	r2, sp
 8007920:	f000 f862 	bl	80079e8 <_fstat_r>
 8007924:	2800      	cmp	r0, #0
 8007926:	dbec      	blt.n	8007902 <__swhatbuf_r+0x12>
 8007928:	9901      	ldr	r1, [sp, #4]
 800792a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800792e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8007932:	4259      	negs	r1, r3
 8007934:	4159      	adcs	r1, r3
 8007936:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800793a:	e7eb      	b.n	8007914 <__swhatbuf_r+0x24>

0800793c <__smakebuf_r>:
 800793c:	898b      	ldrh	r3, [r1, #12]
 800793e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007940:	079d      	lsls	r5, r3, #30
 8007942:	4606      	mov	r6, r0
 8007944:	460c      	mov	r4, r1
 8007946:	d507      	bpl.n	8007958 <__smakebuf_r+0x1c>
 8007948:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800794c:	6023      	str	r3, [r4, #0]
 800794e:	6123      	str	r3, [r4, #16]
 8007950:	2301      	movs	r3, #1
 8007952:	6163      	str	r3, [r4, #20]
 8007954:	b002      	add	sp, #8
 8007956:	bd70      	pop	{r4, r5, r6, pc}
 8007958:	ab01      	add	r3, sp, #4
 800795a:	466a      	mov	r2, sp
 800795c:	f7ff ffc8 	bl	80078f0 <__swhatbuf_r>
 8007960:	9900      	ldr	r1, [sp, #0]
 8007962:	4605      	mov	r5, r0
 8007964:	4630      	mov	r0, r6
 8007966:	f7ff fa5d 	bl	8006e24 <_malloc_r>
 800796a:	b948      	cbnz	r0, 8007980 <__smakebuf_r+0x44>
 800796c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007970:	059a      	lsls	r2, r3, #22
 8007972:	d4ef      	bmi.n	8007954 <__smakebuf_r+0x18>
 8007974:	f023 0303 	bic.w	r3, r3, #3
 8007978:	f043 0302 	orr.w	r3, r3, #2
 800797c:	81a3      	strh	r3, [r4, #12]
 800797e:	e7e3      	b.n	8007948 <__smakebuf_r+0xc>
 8007980:	89a3      	ldrh	r3, [r4, #12]
 8007982:	6020      	str	r0, [r4, #0]
 8007984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007988:	81a3      	strh	r3, [r4, #12]
 800798a:	9b00      	ldr	r3, [sp, #0]
 800798c:	6163      	str	r3, [r4, #20]
 800798e:	9b01      	ldr	r3, [sp, #4]
 8007990:	6120      	str	r0, [r4, #16]
 8007992:	b15b      	cbz	r3, 80079ac <__smakebuf_r+0x70>
 8007994:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007998:	4630      	mov	r0, r6
 800799a:	f000 f837 	bl	8007a0c <_isatty_r>
 800799e:	b128      	cbz	r0, 80079ac <__smakebuf_r+0x70>
 80079a0:	89a3      	ldrh	r3, [r4, #12]
 80079a2:	f023 0303 	bic.w	r3, r3, #3
 80079a6:	f043 0301 	orr.w	r3, r3, #1
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	431d      	orrs	r5, r3
 80079b0:	81a5      	strh	r5, [r4, #12]
 80079b2:	e7cf      	b.n	8007954 <__smakebuf_r+0x18>

080079b4 <memmove>:
 80079b4:	4288      	cmp	r0, r1
 80079b6:	b510      	push	{r4, lr}
 80079b8:	eb01 0402 	add.w	r4, r1, r2
 80079bc:	d902      	bls.n	80079c4 <memmove+0x10>
 80079be:	4284      	cmp	r4, r0
 80079c0:	4623      	mov	r3, r4
 80079c2:	d807      	bhi.n	80079d4 <memmove+0x20>
 80079c4:	1e43      	subs	r3, r0, #1
 80079c6:	42a1      	cmp	r1, r4
 80079c8:	d008      	beq.n	80079dc <memmove+0x28>
 80079ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079d2:	e7f8      	b.n	80079c6 <memmove+0x12>
 80079d4:	4402      	add	r2, r0
 80079d6:	4601      	mov	r1, r0
 80079d8:	428a      	cmp	r2, r1
 80079da:	d100      	bne.n	80079de <memmove+0x2a>
 80079dc:	bd10      	pop	{r4, pc}
 80079de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079e6:	e7f7      	b.n	80079d8 <memmove+0x24>

080079e8 <_fstat_r>:
 80079e8:	b538      	push	{r3, r4, r5, lr}
 80079ea:	4d07      	ldr	r5, [pc, #28]	; (8007a08 <_fstat_r+0x20>)
 80079ec:	2300      	movs	r3, #0
 80079ee:	4604      	mov	r4, r0
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	602b      	str	r3, [r5, #0]
 80079f6:	f7f9 fa98 	bl	8000f2a <_fstat>
 80079fa:	1c43      	adds	r3, r0, #1
 80079fc:	d102      	bne.n	8007a04 <_fstat_r+0x1c>
 80079fe:	682b      	ldr	r3, [r5, #0]
 8007a00:	b103      	cbz	r3, 8007a04 <_fstat_r+0x1c>
 8007a02:	6023      	str	r3, [r4, #0]
 8007a04:	bd38      	pop	{r3, r4, r5, pc}
 8007a06:	bf00      	nop
 8007a08:	20005810 	.word	0x20005810

08007a0c <_isatty_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d06      	ldr	r5, [pc, #24]	; (8007a28 <_isatty_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7f9 fa97 	bl	8000f4a <_isatty>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_isatty_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_isatty_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20005810 	.word	0x20005810

08007a2c <_sbrk_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d06      	ldr	r5, [pc, #24]	; (8007a48 <_sbrk_r+0x1c>)
 8007a30:	2300      	movs	r3, #0
 8007a32:	4604      	mov	r4, r0
 8007a34:	4608      	mov	r0, r1
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	f7f9 faa0 	bl	8000f7c <_sbrk>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_sbrk_r+0x1a>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_sbrk_r+0x1a>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20005810 	.word	0x20005810

08007a4c <_realloc_r>:
 8007a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a50:	4680      	mov	r8, r0
 8007a52:	4614      	mov	r4, r2
 8007a54:	460e      	mov	r6, r1
 8007a56:	b921      	cbnz	r1, 8007a62 <_realloc_r+0x16>
 8007a58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a5c:	4611      	mov	r1, r2
 8007a5e:	f7ff b9e1 	b.w	8006e24 <_malloc_r>
 8007a62:	b92a      	cbnz	r2, 8007a70 <_realloc_r+0x24>
 8007a64:	f7ff f972 	bl	8006d4c <_free_r>
 8007a68:	4625      	mov	r5, r4
 8007a6a:	4628      	mov	r0, r5
 8007a6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a70:	f000 f81b 	bl	8007aaa <_malloc_usable_size_r>
 8007a74:	4284      	cmp	r4, r0
 8007a76:	4607      	mov	r7, r0
 8007a78:	d802      	bhi.n	8007a80 <_realloc_r+0x34>
 8007a7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007a7e:	d812      	bhi.n	8007aa6 <_realloc_r+0x5a>
 8007a80:	4621      	mov	r1, r4
 8007a82:	4640      	mov	r0, r8
 8007a84:	f7ff f9ce 	bl	8006e24 <_malloc_r>
 8007a88:	4605      	mov	r5, r0
 8007a8a:	2800      	cmp	r0, #0
 8007a8c:	d0ed      	beq.n	8007a6a <_realloc_r+0x1e>
 8007a8e:	42bc      	cmp	r4, r7
 8007a90:	4622      	mov	r2, r4
 8007a92:	4631      	mov	r1, r6
 8007a94:	bf28      	it	cs
 8007a96:	463a      	movcs	r2, r7
 8007a98:	f7ff f94a 	bl	8006d30 <memcpy>
 8007a9c:	4631      	mov	r1, r6
 8007a9e:	4640      	mov	r0, r8
 8007aa0:	f7ff f954 	bl	8006d4c <_free_r>
 8007aa4:	e7e1      	b.n	8007a6a <_realloc_r+0x1e>
 8007aa6:	4635      	mov	r5, r6
 8007aa8:	e7df      	b.n	8007a6a <_realloc_r+0x1e>

08007aaa <_malloc_usable_size_r>:
 8007aaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007aae:	1f18      	subs	r0, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	bfbc      	itt	lt
 8007ab4:	580b      	ldrlt	r3, [r1, r0]
 8007ab6:	18c0      	addlt	r0, r0, r3
 8007ab8:	4770      	bx	lr
	...

08007abc <_init>:
 8007abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007abe:	bf00      	nop
 8007ac0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ac2:	bc08      	pop	{r3}
 8007ac4:	469e      	mov	lr, r3
 8007ac6:	4770      	bx	lr

08007ac8 <_fini>:
 8007ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aca:	bf00      	nop
 8007acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ace:	bc08      	pop	{r3}
 8007ad0:	469e      	mov	lr, r3
 8007ad2:	4770      	bx	lr
